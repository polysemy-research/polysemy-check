
==================== Tidy Core ====================
2021-10-22 15:05:53.027123169 UTC

Result size of Tidy Core
  = {terms: 912, types: 27,283, coercions: 12,078, joins: 0/62}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule1_raHm :: ghc-prim-0.5.3:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule1_raHm = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule2_raI0 :: ghc-prim-0.5.3:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule2_raI0 = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule1_raHm

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule3_raI1 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule3_raI1 = "CommutativeSpec"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule4_raI2 :: ghc-prim-0.5.3:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule4_raI2 = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule3_raI1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
CommutativeSpec.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
CommutativeSpec.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule2_raI0 $trModule4_raI2

-- RHS size: {terms: 20, types: 3, coercions: 0, joins: 0/0}
$dIP_raI3 :: GHC.Stack.Types.CallStack
[GblId]
$dIP_raI3
  = GHC.Stack.Types.pushCallStack
      (ghc-prim-0.5.3:GHC.CString.unpackCString# "prop"#,
       GHC.Stack.Types.SrcLoc
         (ghc-prim-0.5.3:GHC.CString.unpackCString# "main"#)
         (ghc-prim-0.5.3:GHC.CString.unpackCString# "CommutativeSpec"#)
         (ghc-prim-0.5.3:GHC.CString.unpackCString#
            "/home/sandy/prj/polysemy-quickcheck-state-machine/test/CommutativeSpec.hs"#)
         (ghc-prim-0.5.3:GHC.Types.I# 47#)
         (ghc-prim-0.5.3:GHC.Types.I# 14#)
         (ghc-prim-0.5.3:GHC.Types.I# 47#)
         (ghc-prim-0.5.3:GHC.Types.I# 43#))
      GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 20, types: 3, coercions: 0, joins: 0/0}
$dIP1_raI4 :: GHC.Stack.Types.CallStack
[GblId]
$dIP1_raI4
  = GHC.Stack.Types.pushCallStack
      (ghc-prim-0.5.3:GHC.CString.unpackCString# "shouldBe"#,
       GHC.Stack.Types.SrcLoc
         (ghc-prim-0.5.3:GHC.CString.unpackCString# "main"#)
         (ghc-prim-0.5.3:GHC.CString.unpackCString# "CommutativeSpec"#)
         (ghc-prim-0.5.3:GHC.CString.unpackCString#
            "/home/sandy/prj/polysemy-quickcheck-state-machine/test/CommutativeSpec.hs"#)
         (ghc-prim-0.5.3:GHC.Types.I# 45#)
         (ghc-prim-0.5.3:GHC.Types.I# 5#)
         (ghc-prim-0.5.3:GHC.Types.I# 45#)
         (ghc-prim-0.5.3:GHC.Types.I# 46#))
      GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 20, types: 3, coercions: 0, joins: 0/0}
$dIP2_raI5 :: GHC.Stack.Types.CallStack
[GblId]
$dIP2_raI5
  = GHC.Stack.Types.pushCallStack
      (ghc-prim-0.5.3:GHC.CString.unpackCString# "it"#,
       GHC.Stack.Types.SrcLoc
         (ghc-prim-0.5.3:GHC.CString.unpackCString# "main"#)
         (ghc-prim-0.5.3:GHC.CString.unpackCString# "CommutativeSpec"#)
         (ghc-prim-0.5.3:GHC.CString.unpackCString#
            "/home/sandy/prj/polysemy-quickcheck-state-machine/test/CommutativeSpec.hs"#)
         (ghc-prim-0.5.3:GHC.Types.I# 44#)
         (ghc-prim-0.5.3:GHC.Types.I# 3#)
         (ghc-prim-0.5.3:GHC.Types.I# 44#)
         (ghc-prim-0.5.3:GHC.Types.I# 36#))
      GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 2, types: 193, coercions: 0, joins: 0/0}
$dGArbitraryK_raI6
  :: GArbitraryK
       (State Int)
       (GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons "Put" 'GHC.Generics.PrefixI 'False)
          ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
            'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                           ())
           Generics.Kind.:=>: GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   'Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (Generics.Kind.Field
                                   ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int))))
       '[Error Int, State Int]
       Int
[GblId]
$dGArbitraryK_raI6
  = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
      @ (State Int)
      @ ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
           'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
          'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                         ())
         Generics.Kind.:=>: GHC.Generics.S1
                              ('GHC.Generics.MetaSel
                                 'Nothing
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (Generics.Kind.Field
                                 ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int)))
      @ '[Error Int, State Int]
      @ Int
      @ GHC.Generics.C
      @ ('GHC.Generics.MetaCons "Put" 'GHC.Generics.PrefixI 'False)
      (Polysemy.Check.Arbitrary.$fGArbitraryKe:=>:ra
         @ *
         @ (State Int)
         @ ()
         @ (GHC.Generics.M1
              GHC.Generics.S
              ('GHC.Generics.MetaSel
                 'Nothing
                 'GHC.Generics.NoSourceUnpackedness
                 'GHC.Generics.NoSourceStrictness
                 'GHC.Generics.DecidedLazy)
              (Generics.Kind.Field
                 ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int)))
         @ '[Error Int, State Int]
         @ Int)

-- RHS size: {terms: 2, types: 94, coercions: 0, joins: 0/0}
$dGArbitraryK1_raI7
  :: GArbitraryK
       (State Int)
       (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
         'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
        Generics.Kind.:=>: GHC.Generics.U1)
       '[Error Int, State Int]
       Int
[GblId]
$dGArbitraryK1_raI7
  = Polysemy.Check.Arbitrary.$fGArbitraryKe:=>:ra2
      @ (State Int)
      @ GHC.Generics.U1
      @ '[Error Int, State Int]
      @ Int
      (Polysemy.Check.Arbitrary.$fGArbitraryKeU1ra
         @ (State Int) @ '[Error Int, State Int] @ Int)

-- RHS size: {terms: 2, types: 83, coercions: 0, joins: 0/0}
$dGArbitraryK2_raI8
  :: GArbitraryK
       (State Int)
       (GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
          (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
            'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
           Generics.Kind.:=>: GHC.Generics.U1))
       '[Error Int, State Int]
       Int
[GblId]
$dGArbitraryK2_raI8
  = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
      @ (State Int)
      @ (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
          'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
         Generics.Kind.:=>: GHC.Generics.U1)
      @ '[Error Int, State Int]
      @ Int
      @ GHC.Generics.C
      @ ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
      $dGArbitraryK1_raI7

-- RHS size: {terms: 3, types: 172, coercions: 0, joins: 0/0}
$dGArbitraryK3_raI9
  :: GArbitraryK
       (State Int)
       (GHC.Generics.C1
          ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
          (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
            'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
           Generics.Kind.:=>: GHC.Generics.U1)
        GHC.Generics.:+: GHC.Generics.C1
                           ('GHC.Generics.MetaCons "Put" 'GHC.Generics.PrefixI 'False)
                           ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                              'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                            ())
                            Generics.Kind.:=>: GHC.Generics.S1
                                                 ('GHC.Generics.MetaSel
                                                    'Nothing
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (Generics.Kind.Field
                                                    ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                       Int))))
       '[Error Int, State Int]
       Int
[GblId]
$dGArbitraryK3_raI9
  = Polysemy.Check.Arbitrary.$fGArbitraryKe:+:ra
      @ (State Int)
      @ (GHC.Generics.M1
           GHC.Generics.C
           ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
           (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
            Generics.Kind.:=>: GHC.Generics.U1))
      @ '[Error Int, State Int]
      @ Int
      @ (GHC.Generics.M1
           GHC.Generics.C
           ('GHC.Generics.MetaCons "Put" 'GHC.Generics.PrefixI 'False)
           ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
              'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                            ())
            Generics.Kind.:=>: GHC.Generics.S1
                                 ('GHC.Generics.MetaSel
                                    'Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (Generics.Kind.Field
                                    ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int))))
      $dGArbitraryK2_raI8
      $dGArbitraryK_raI6

-- RHS size: {terms: 2, types: 182, coercions: 0, joins: 0/0}
$dGArbitraryK4_raIa
  :: GArbitraryK
       (State Int)
       (GHC.Generics.D1
          ('GHC.Generics.MetaData
             "State"
             "Polysemy.State"
             "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
             'False)
          (GHC.Generics.C1
             ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
             (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
               'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
              Generics.Kind.:=>: GHC.Generics.U1)
           GHC.Generics.:+: GHC.Generics.C1
                              ('GHC.Generics.MetaCons "Put" 'GHC.Generics.PrefixI 'False)
                              ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                                 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                               ())
                               Generics.Kind.:=>: GHC.Generics.S1
                                                    ('GHC.Generics.MetaSel
                                                       'Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (Generics.Kind.Field
                                                       ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                          Int)))))
       '[Error Int, State Int]
       Int
[GblId]
$dGArbitraryK4_raIa
  = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
      @ (State Int)
      @ (GHC.Generics.C1
           ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
           (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
            Generics.Kind.:=>: GHC.Generics.U1)
         GHC.Generics.:+: GHC.Generics.C1
                            ('GHC.Generics.MetaCons "Put" 'GHC.Generics.PrefixI 'False)
                            ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                               'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                              'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                             ())
                             Generics.Kind.:=>: GHC.Generics.S1
                                                  ('GHC.Generics.MetaSel
                                                     'Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (Generics.Kind.Field
                                                     ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                        Int))))
      @ '[Error Int, State Int]
      @ Int
      @ GHC.Generics.D
      @ ('GHC.Generics.MetaData
           "State"
           "Polysemy.State"
           "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
           'False)
      $dGArbitraryK3_raI9

-- RHS size: {terms: 2, types: 136, coercions: 0, joins: 0/0}
$dGArbitraryK5_raIb
  :: GArbitraryK
       (State Int)
       (GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
          (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
            'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
           Generics.Kind.:=>: GHC.Generics.U1))
       '[Error Int, State Int]
       ()
[GblId]
$dGArbitraryK5_raIb
  = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
      @ (State Int)
      @ (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
          'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
         Generics.Kind.:=>: GHC.Generics.U1)
      @ '[Error Int, State Int]
      @ ()
      @ GHC.Generics.C
      @ ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
      (Polysemy.Check.Arbitrary.$fGArbitraryKe:=>:ra0
         @ *
         @ (State Int)
         @ Int
         @ GHC.Generics.U1
         @ '[Error Int, State Int]
         @ ())

-- RHS size: {terms: 2, types: 57, coercions: 0, joins: 0/0}
$dFind_raIc
  :: Polysemy.Internal.Union.Find (State Int) '[Error Int, State Int]
[GblId]
$dFind_raIc
  = Polysemy.Internal.Union.$fFindat:
      @ ((* -> *) -> * -> *)
      @ (State Int)
      @ '[State Int]
      @ (Error Int)
      (Polysemy.Internal.Union.$fFindat:0
         @ ((* -> *) -> * -> *) @ (State Int) @ '[])

-- RHS size: {terms: 20, types: 3, coercions: 0, joins: 0/0}
$dIP3_raId :: GHC.Stack.Types.CallStack
[GblId]
$dIP3_raId
  = GHC.Stack.Types.pushCallStack
      (ghc-prim-0.5.3:GHC.CString.unpackCString# "prop"#,
       GHC.Stack.Types.SrcLoc
         (ghc-prim-0.5.3:GHC.CString.unpackCString# "main"#)
         (ghc-prim-0.5.3:GHC.CString.unpackCString# "CommutativeSpec"#)
         (ghc-prim-0.5.3:GHC.CString.unpackCString#
            "/home/sandy/prj/polysemy-quickcheck-state-machine/test/CommutativeSpec.hs"#)
         (ghc-prim-0.5.3:GHC.Types.I# 29#)
         (ghc-prim-0.5.3:GHC.Types.I# 3#)
         (ghc-prim-0.5.3:GHC.Types.I# 29#)
         (ghc-prim-0.5.3:GHC.Types.I# 88#))
      GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 20, types: 3, coercions: 0, joins: 0/0}
$dIP4_raIe :: GHC.Stack.Types.CallStack
[GblId]
$dIP4_raIe
  = GHC.Stack.Types.pushCallStack
      (ghc-prim-0.5.3:GHC.CString.unpackCString# "prop"#,
       GHC.Stack.Types.SrcLoc
         (ghc-prim-0.5.3:GHC.CString.unpackCString# "main"#)
         (ghc-prim-0.5.3:GHC.CString.unpackCString# "CommutativeSpec"#)
         (ghc-prim-0.5.3:GHC.CString.unpackCString#
            "/home/sandy/prj/polysemy-quickcheck-state-machine/test/CommutativeSpec.hs"#)
         (ghc-prim-0.5.3:GHC.Types.I# 25#)
         (ghc-prim-0.5.3:GHC.Types.I# 3#)
         (ghc-prim-0.5.3:GHC.Types.I# 25#)
         (ghc-prim-0.5.3:GHC.Types.I# 44#))
      GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dArbitrary_raIf :: Arbitrary [Char]
[GblId]
$dArbitrary_raIf
  = Test.QuickCheck.Arbitrary.$fArbitrary[]
      @ Char Test.QuickCheck.Arbitrary.$fArbitraryChar

-- RHS size: {terms: 2, types: 52, coercions: 66, joins: 0/0}
$dGArbitraryK6_raIg
  :: GArbitraryK
       Trace
       (Generics.Kind.Field
          ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon [Char]))
       '[State Int, Trace, State Int]
       ()
[GblId]
$dGArbitraryK6_raIg
  = Polysemy.Check.Arbitrary.$fGArbitraryKeFieldra
      @ ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon [Char])
      @ '[State Int, Trace, State Int]
      @ ()
      @ Trace
      ($dArbitrary_raIf
       `cast` ((Arbitrary
                  (Sym (kind-apply-0.3.2.0:Data.PolyKinded.Atom.D:R:Interpret[1]
                            <*>_N
                            <(* -> *) -> * -> *>_N
                            <[Char]>_N
                            <Sem '[State Int, Trace, State Int]
                             'kind-apply-0.3.2.0:Data.PolyKinded.:&&: (()
                                                                       'kind-apply-0.3.2.0:Data.PolyKinded.:&&: 'kind-apply-0.3.2.0:Data.PolyKinded.LoT0)>_N)))_R
               :: Arbitrary [Char]
                  ~R# Arbitrary
                        (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Interpret
                           ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon [Char])
                           (Sem '[State Int, Trace, State Int]
                            'kind-apply-0.3.2.0:Data.PolyKinded.:&&: (()
                                                                      'kind-apply-0.3.2.0:Data.PolyKinded.:&&: 'kind-apply-0.3.2.0:Data.PolyKinded.LoT0)))))

-- RHS size: {terms: 2, types: 64, coercions: 0, joins: 0/0}
$dGArbitraryK7_raIh
  :: GArbitraryK
       Trace
       (GHC.Generics.M1
          GHC.Generics.S
          ('GHC.Generics.MetaSel
             'Nothing
             'GHC.Generics.NoSourceUnpackedness
             'GHC.Generics.NoSourceStrictness
             'GHC.Generics.DecidedLazy)
          (Generics.Kind.Field
             ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon [Char])))
       '[State Int, Trace, State Int]
       ()
[GblId]
$dGArbitraryK7_raIh
  = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
      @ Trace
      @ (Generics.Kind.Field
           ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon [Char]))
      @ '[State Int, Trace, State Int]
      @ ()
      @ GHC.Generics.S
      @ ('GHC.Generics.MetaSel
           'Nothing
           'GHC.Generics.NoSourceUnpackedness
           'GHC.Generics.NoSourceStrictness
           'GHC.Generics.DecidedLazy)
      $dGArbitraryK6_raIg

-- RHS size: {terms: 2, types: 70, coercions: 0, joins: 0/0}
$dGArbitraryK8_raIi
  :: GArbitraryK
       Trace
       ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
          'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
         'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                        ())
        Generics.Kind.:=>: GHC.Generics.S1
                             ('GHC.Generics.MetaSel
                                'Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (Generics.Kind.Field
                                ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon [Char])))
       '[State Int, Trace, State Int]
       ()
[GblId]
$dGArbitraryK8_raIi
  = Polysemy.Check.Arbitrary.$fGArbitraryKe:=>:ra1
      @ Trace
      @ (GHC.Generics.M1
           GHC.Generics.S
           ('GHC.Generics.MetaSel
              'Nothing
              'GHC.Generics.NoSourceUnpackedness
              'GHC.Generics.NoSourceStrictness
              'GHC.Generics.DecidedLazy)
           (Generics.Kind.Field
              ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon [Char])))
      @ '[State Int, Trace, State Int]
      @ ()
      $dGArbitraryK7_raIh

-- RHS size: {terms: 2, types: 122, coercions: 0, joins: 0/0}
$dGArbitraryK9_raIj
  :: GArbitraryK
       Trace
       (GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons "Trace" 'GHC.Generics.PrefixI 'False)
          ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
            'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                           ())
           Generics.Kind.:=>: GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   'Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (Generics.Kind.Field
                                   ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon [Char]))))
       '[State Int, Trace, State Int]
       ()
[GblId]
$dGArbitraryK9_raIj
  = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
      @ Trace
      @ ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
           'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
          'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                         ())
         Generics.Kind.:=>: GHC.Generics.S1
                              ('GHC.Generics.MetaSel
                                 'Nothing
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (Generics.Kind.Field
                                 ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon [Char])))
      @ '[State Int, Trace, State Int]
      @ ()
      @ GHC.Generics.C
      @ ('GHC.Generics.MetaCons "Trace" 'GHC.Generics.PrefixI 'False)
      $dGArbitraryK8_raIi

-- RHS size: {terms: 2, types: 134, coercions: 0, joins: 0/0}
$dGArbitraryK10_raIk
  :: GArbitraryK
       Trace
       (GHC.Generics.D1
          ('GHC.Generics.MetaData
             "Trace"
             "Polysemy.Trace"
             "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
             'False)
          (GHC.Generics.C1
             ('GHC.Generics.MetaCons "Trace" 'GHC.Generics.PrefixI 'False)
             ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
               'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                              ())
              Generics.Kind.:=>: GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      'Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (Generics.Kind.Field
                                      ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon [Char])))))
       '[State Int, Trace, State Int]
       ()
[GblId]
$dGArbitraryK10_raIk
  = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
      @ Trace
      @ (GHC.Generics.M1
           GHC.Generics.C
           ('GHC.Generics.MetaCons "Trace" 'GHC.Generics.PrefixI 'False)
           ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
              'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                            ())
            Generics.Kind.:=>: GHC.Generics.S1
                                 ('GHC.Generics.MetaSel
                                    'Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (Generics.Kind.Field
                                    ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon [Char]))))
      @ '[State Int, Trace, State Int]
      @ ()
      @ GHC.Generics.D
      @ ('GHC.Generics.MetaData
           "Trace"
           "Polysemy.Trace"
           "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
           'False)
      $dGArbitraryK9_raIj

-- RHS size: {terms: 2, types: 64, coercions: 0, joins: 0/0}
$dFind1_raIl
  :: Polysemy.Internal.Union.Find
       Trace '[State Int, Trace, State Int]
[GblId]
$dFind1_raIl
  = Polysemy.Internal.Union.$fFindat:
      @ ((* -> *) -> * -> *)
      @ Trace
      @ '[Trace, State Int]
      @ (State Int)
      (Polysemy.Internal.Union.$fFindat:0
         @ ((* -> *) -> * -> *) @ Trace @ '[State Int])

-- RHS size: {terms: 2, types: 193, coercions: 0, joins: 0/0}
$dGArbitraryK11_raIm
  :: GArbitraryK
       (State Int)
       (GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons "Put" 'GHC.Generics.PrefixI 'False)
          ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
            'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                           ())
           Generics.Kind.:=>: GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   'Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (Generics.Kind.Field
                                   ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int))))
       '[State Int, Trace, State Int]
       Int
[GblId]
$dGArbitraryK11_raIm
  = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
      @ (State Int)
      @ ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
           'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
          'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                         ())
         Generics.Kind.:=>: GHC.Generics.S1
                              ('GHC.Generics.MetaSel
                                 'Nothing
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (Generics.Kind.Field
                                 ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int)))
      @ '[State Int, Trace, State Int]
      @ Int
      @ GHC.Generics.C
      @ ('GHC.Generics.MetaCons "Put" 'GHC.Generics.PrefixI 'False)
      (Polysemy.Check.Arbitrary.$fGArbitraryKe:=>:ra
         @ *
         @ (State Int)
         @ ()
         @ (GHC.Generics.M1
              GHC.Generics.S
              ('GHC.Generics.MetaSel
                 'Nothing
                 'GHC.Generics.NoSourceUnpackedness
                 'GHC.Generics.NoSourceStrictness
                 'GHC.Generics.DecidedLazy)
              (Generics.Kind.Field
                 ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int)))
         @ '[State Int, Trace, State Int]
         @ Int)

-- RHS size: {terms: 2, types: 94, coercions: 0, joins: 0/0}
$dGArbitraryK12_raIn
  :: GArbitraryK
       (State Int)
       (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
         'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
        Generics.Kind.:=>: GHC.Generics.U1)
       '[State Int, Trace, State Int]
       Int
[GblId]
$dGArbitraryK12_raIn
  = Polysemy.Check.Arbitrary.$fGArbitraryKe:=>:ra2
      @ (State Int)
      @ GHC.Generics.U1
      @ '[State Int, Trace, State Int]
      @ Int
      (Polysemy.Check.Arbitrary.$fGArbitraryKeU1ra
         @ (State Int) @ '[State Int, Trace, State Int] @ Int)

-- RHS size: {terms: 2, types: 83, coercions: 0, joins: 0/0}
$dGArbitraryK13_raIo
  :: GArbitraryK
       (State Int)
       (GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
          (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
            'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
           Generics.Kind.:=>: GHC.Generics.U1))
       '[State Int, Trace, State Int]
       Int
[GblId]
$dGArbitraryK13_raIo
  = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
      @ (State Int)
      @ (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
          'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
         Generics.Kind.:=>: GHC.Generics.U1)
      @ '[State Int, Trace, State Int]
      @ Int
      @ GHC.Generics.C
      @ ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
      $dGArbitraryK12_raIn

-- RHS size: {terms: 3, types: 172, coercions: 0, joins: 0/0}
$dGArbitraryK14_raIp
  :: GArbitraryK
       (State Int)
       (GHC.Generics.C1
          ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
          (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
            'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
           Generics.Kind.:=>: GHC.Generics.U1)
        GHC.Generics.:+: GHC.Generics.C1
                           ('GHC.Generics.MetaCons "Put" 'GHC.Generics.PrefixI 'False)
                           ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                              'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                            ())
                            Generics.Kind.:=>: GHC.Generics.S1
                                                 ('GHC.Generics.MetaSel
                                                    'Nothing
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (Generics.Kind.Field
                                                    ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                       Int))))
       '[State Int, Trace, State Int]
       Int
[GblId]
$dGArbitraryK14_raIp
  = Polysemy.Check.Arbitrary.$fGArbitraryKe:+:ra
      @ (State Int)
      @ (GHC.Generics.M1
           GHC.Generics.C
           ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
           (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
            Generics.Kind.:=>: GHC.Generics.U1))
      @ '[State Int, Trace, State Int]
      @ Int
      @ (GHC.Generics.M1
           GHC.Generics.C
           ('GHC.Generics.MetaCons "Put" 'GHC.Generics.PrefixI 'False)
           ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
              'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                            ())
            Generics.Kind.:=>: GHC.Generics.S1
                                 ('GHC.Generics.MetaSel
                                    'Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (Generics.Kind.Field
                                    ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int))))
      $dGArbitraryK13_raIo
      $dGArbitraryK11_raIm

-- RHS size: {terms: 2, types: 182, coercions: 0, joins: 0/0}
$dGArbitraryK15_raIq
  :: GArbitraryK
       (State Int)
       (GHC.Generics.D1
          ('GHC.Generics.MetaData
             "State"
             "Polysemy.State"
             "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
             'False)
          (GHC.Generics.C1
             ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
             (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
               'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
              Generics.Kind.:=>: GHC.Generics.U1)
           GHC.Generics.:+: GHC.Generics.C1
                              ('GHC.Generics.MetaCons "Put" 'GHC.Generics.PrefixI 'False)
                              ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                                 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                               ())
                               Generics.Kind.:=>: GHC.Generics.S1
                                                    ('GHC.Generics.MetaSel
                                                       'Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (Generics.Kind.Field
                                                       ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                          Int)))))
       '[State Int, Trace, State Int]
       Int
[GblId]
$dGArbitraryK15_raIq
  = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
      @ (State Int)
      @ (GHC.Generics.C1
           ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
           (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
            Generics.Kind.:=>: GHC.Generics.U1)
         GHC.Generics.:+: GHC.Generics.C1
                            ('GHC.Generics.MetaCons "Put" 'GHC.Generics.PrefixI 'False)
                            ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                               'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                              'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                             ())
                             Generics.Kind.:=>: GHC.Generics.S1
                                                  ('GHC.Generics.MetaSel
                                                     'Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (Generics.Kind.Field
                                                     ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                        Int))))
      @ '[State Int, Trace, State Int]
      @ Int
      @ GHC.Generics.D
      @ ('GHC.Generics.MetaData
           "State"
           "Polysemy.State"
           "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
           'False)
      $dGArbitraryK14_raIp

-- RHS size: {terms: 10, types: 16, coercions: 0, joins: 0/0}
df_raIr
  :: forall a. Eq a => Eq (Compose ((,) Int) ((,) [String]) a)
[GblId, Arity=1, Unf=OtherCon []]
df_raIr
  = \ (@ a_aaDw) ($dEq_aaDx :: Eq a_aaDw) ->
      Data.Functor.Compose.$fEqCompose
        @ ((,) Int)
        @ ((,) [String])
        @ a_aaDw
        (Data.Functor.Classes.$fEq1(,)
           @ Int ghc-prim-0.5.3:GHC.Classes.$fEqInt)
        (Data.Functor.Classes.$fEq1(,)
           @ [String]
           (ghc-prim-0.5.3:GHC.Classes.$fEq[]
              @ [Char]
              (ghc-prim-0.5.3:GHC.Classes.$fEq[]
                 @ Char ghc-prim-0.5.3:GHC.Classes.$fEqChar)))
        $dEq_aaDx

-- RHS size: {terms: 8, types: 11, coercions: 0, joins: 0/0}
df1_raIs :: forall a. Eq a => Eq (Compose ((,) Int) (Either Int) a)
[GblId, Arity=1, Unf=OtherCon []]
df1_raIs
  = \ (@ a_aaDF) ($dEq_aaDG :: Eq a_aaDF) ->
      Data.Functor.Compose.$fEqCompose
        @ ((,) Int)
        @ (Either Int)
        @ a_aaDF
        (Data.Functor.Classes.$fEq1(,)
           @ Int ghc-prim-0.5.3:GHC.Classes.$fEqInt)
        (Data.Functor.Classes.$fEq1Either
           @ Int ghc-prim-0.5.3:GHC.Classes.$fEqInt)
        $dEq_aaDG

-- RHS size: {terms: 2, types: 51, coercions: 63, joins: 0/0}
$dGArbitraryK16_raIt
  :: GArbitraryK
       (State Int)
       (Generics.Kind.Field
          ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int))
       '[Error Int, State Int]
       ()
[GblId]
$dGArbitraryK16_raIt
  = Polysemy.Check.Arbitrary.$fGArbitraryKeFieldra
      @ ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int)
      @ '[Error Int, State Int]
      @ ()
      @ (State Int)
      (Test.QuickCheck.Arbitrary.$fArbitraryInt
       `cast` ((Arbitrary
                  (Sym (kind-apply-0.3.2.0:Data.PolyKinded.Atom.D:R:Interpret[1]
                            <*>_N
                            <(* -> *) -> * -> *>_N
                            <Int>_N
                            <Sem '[Error Int, State Int]
                             'kind-apply-0.3.2.0:Data.PolyKinded.:&&: (()
                                                                       'kind-apply-0.3.2.0:Data.PolyKinded.:&&: 'kind-apply-0.3.2.0:Data.PolyKinded.LoT0)>_N)))_R
               :: Arbitrary Int
                  ~R# Arbitrary
                        (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Interpret
                           ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int)
                           (Sem '[Error Int, State Int]
                            'kind-apply-0.3.2.0:Data.PolyKinded.:&&: (()
                                                                      'kind-apply-0.3.2.0:Data.PolyKinded.:&&: 'kind-apply-0.3.2.0:Data.PolyKinded.LoT0)))))

-- RHS size: {terms: 2, types: 63, coercions: 0, joins: 0/0}
$dGArbitraryK17_raIu
  :: GArbitraryK
       (State Int)
       (GHC.Generics.M1
          GHC.Generics.S
          ('GHC.Generics.MetaSel
             'Nothing
             'GHC.Generics.NoSourceUnpackedness
             'GHC.Generics.NoSourceStrictness
             'GHC.Generics.DecidedLazy)
          (Generics.Kind.Field
             ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int)))
       '[Error Int, State Int]
       ()
[GblId]
$dGArbitraryK17_raIu
  = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
      @ (State Int)
      @ (Generics.Kind.Field
           ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int))
      @ '[Error Int, State Int]
      @ ()
      @ GHC.Generics.S
      @ ('GHC.Generics.MetaSel
           'Nothing
           'GHC.Generics.NoSourceUnpackedness
           'GHC.Generics.NoSourceStrictness
           'GHC.Generics.DecidedLazy)
      $dGArbitraryK16_raIt

-- RHS size: {terms: 2, types: 69, coercions: 0, joins: 0/0}
$dGArbitraryK18_raIv
  :: GArbitraryK
       (State Int)
       ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
          'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
         'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                        ())
        Generics.Kind.:=>: GHC.Generics.S1
                             ('GHC.Generics.MetaSel
                                'Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (Generics.Kind.Field
                                ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int)))
       '[Error Int, State Int]
       ()
[GblId]
$dGArbitraryK18_raIv
  = Polysemy.Check.Arbitrary.$fGArbitraryKe:=>:ra1
      @ (State Int)
      @ (GHC.Generics.M1
           GHC.Generics.S
           ('GHC.Generics.MetaSel
              'Nothing
              'GHC.Generics.NoSourceUnpackedness
              'GHC.Generics.NoSourceStrictness
              'GHC.Generics.DecidedLazy)
           (Generics.Kind.Field
              ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int)))
      @ '[Error Int, State Int]
      @ ()
      $dGArbitraryK17_raIu

-- RHS size: {terms: 2, types: 121, coercions: 0, joins: 0/0}
$dGArbitraryK19_raIw
  :: GArbitraryK
       (State Int)
       (GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons "Put" 'GHC.Generics.PrefixI 'False)
          ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
            'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                           ())
           Generics.Kind.:=>: GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   'Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (Generics.Kind.Field
                                   ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int))))
       '[Error Int, State Int]
       ()
[GblId]
$dGArbitraryK19_raIw
  = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
      @ (State Int)
      @ ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
           'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
          'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                         ())
         Generics.Kind.:=>: GHC.Generics.S1
                              ('GHC.Generics.MetaSel
                                 'Nothing
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (Generics.Kind.Field
                                 ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int)))
      @ '[Error Int, State Int]
      @ ()
      @ GHC.Generics.C
      @ ('GHC.Generics.MetaCons "Put" 'GHC.Generics.PrefixI 'False)
      $dGArbitraryK18_raIv

-- RHS size: {terms: 3, types: 172, coercions: 0, joins: 0/0}
$dGArbitraryK20_raIx
  :: GArbitraryK
       (State Int)
       (GHC.Generics.C1
          ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
          (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
            'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
           Generics.Kind.:=>: GHC.Generics.U1)
        GHC.Generics.:+: GHC.Generics.C1
                           ('GHC.Generics.MetaCons "Put" 'GHC.Generics.PrefixI 'False)
                           ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                              'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                            ())
                            Generics.Kind.:=>: GHC.Generics.S1
                                                 ('GHC.Generics.MetaSel
                                                    'Nothing
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (Generics.Kind.Field
                                                    ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                       Int))))
       '[Error Int, State Int]
       ()
[GblId]
$dGArbitraryK20_raIx
  = Polysemy.Check.Arbitrary.$fGArbitraryKe:+:ra
      @ (State Int)
      @ (GHC.Generics.M1
           GHC.Generics.C
           ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
           (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
            Generics.Kind.:=>: GHC.Generics.U1))
      @ '[Error Int, State Int]
      @ ()
      @ (GHC.Generics.M1
           GHC.Generics.C
           ('GHC.Generics.MetaCons "Put" 'GHC.Generics.PrefixI 'False)
           ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
              'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                            ())
            Generics.Kind.:=>: GHC.Generics.S1
                                 ('GHC.Generics.MetaSel
                                    'Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (Generics.Kind.Field
                                    ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int))))
      $dGArbitraryK5_raIb
      $dGArbitraryK19_raIw

-- RHS size: {terms: 2, types: 182, coercions: 0, joins: 0/0}
$dGArbitraryK21_raIy
  :: GArbitraryK
       (State Int)
       (GHC.Generics.D1
          ('GHC.Generics.MetaData
             "State"
             "Polysemy.State"
             "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
             'False)
          (GHC.Generics.C1
             ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
             (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
               'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
              Generics.Kind.:=>: GHC.Generics.U1)
           GHC.Generics.:+: GHC.Generics.C1
                              ('GHC.Generics.MetaCons "Put" 'GHC.Generics.PrefixI 'False)
                              ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                                 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                               ())
                               Generics.Kind.:=>: GHC.Generics.S1
                                                    ('GHC.Generics.MetaSel
                                                       'Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (Generics.Kind.Field
                                                       ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                          Int)))))
       '[Error Int, State Int]
       ()
[GblId]
$dGArbitraryK21_raIy
  = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
      @ (State Int)
      @ (GHC.Generics.C1
           ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
           (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
            Generics.Kind.:=>: GHC.Generics.U1)
         GHC.Generics.:+: GHC.Generics.C1
                            ('GHC.Generics.MetaCons "Put" 'GHC.Generics.PrefixI 'False)
                            ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                               'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                              'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                             ())
                             Generics.Kind.:=>: GHC.Generics.S1
                                                  ('GHC.Generics.MetaSel
                                                     'Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (Generics.Kind.Field
                                                     ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                        Int))))
      @ '[Error Int, State Int]
      @ ()
      @ GHC.Generics.D
      @ ('GHC.Generics.MetaData
           "State"
           "Polysemy.State"
           "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
           'False)
      $dGArbitraryK20_raIx

-- RHS size: {terms: 2, types: 52, coercions: 63, joins: 0/0}
$dGArbitraryK22_raIz
  :: GArbitraryK
       (Error Int)
       (Generics.Kind.Field
          ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int))
       '[Error Int, State Int]
       ()
[GblId]
$dGArbitraryK22_raIz
  = Polysemy.Check.Arbitrary.$fGArbitraryKeFieldra
      @ ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int)
      @ '[Error Int, State Int]
      @ ()
      @ (Error Int)
      (Test.QuickCheck.Arbitrary.$fArbitraryInt
       `cast` ((Arbitrary
                  (Sym (kind-apply-0.3.2.0:Data.PolyKinded.Atom.D:R:Interpret[1]
                            <*>_N
                            <(* -> *) -> * -> *>_N
                            <Int>_N
                            <Sem '[Error Int, State Int]
                             'kind-apply-0.3.2.0:Data.PolyKinded.:&&: (()
                                                                       'kind-apply-0.3.2.0:Data.PolyKinded.:&&: 'kind-apply-0.3.2.0:Data.PolyKinded.LoT0)>_N)))_R
               :: Arbitrary Int
                  ~R# Arbitrary
                        (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Interpret
                           ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int)
                           (Sem '[Error Int, State Int]
                            'kind-apply-0.3.2.0:Data.PolyKinded.:&&: (()
                                                                      'kind-apply-0.3.2.0:Data.PolyKinded.:&&: 'kind-apply-0.3.2.0:Data.PolyKinded.LoT0)))))

-- RHS size: {terms: 2, types: 67, coercions: 0, joins: 0/0}
$dGArbitraryK23_raIA
  :: GArbitraryK
       (Error Int)
       (GHC.Generics.M1
          GHC.Generics.S
          ('GHC.Generics.MetaSel
             'Nothing
             'GHC.Generics.NoSourceUnpackedness
             'GHC.Generics.NoSourceStrictness
             'GHC.Generics.DecidedLazy)
          (Generics.Kind.Field
             ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int)))
       '[Error Int, State Int]
       ()
[GblId]
$dGArbitraryK23_raIA
  = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
      @ (Error Int)
      @ (Generics.Kind.Field
           ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int))
      @ '[Error Int, State Int]
      @ ()
      @ GHC.Generics.S
      @ ('GHC.Generics.MetaSel
           'Nothing
           'GHC.Generics.NoSourceUnpackedness
           'GHC.Generics.NoSourceStrictness
           'GHC.Generics.DecidedLazy)
      $dGArbitraryK22_raIz

-- RHS size: {terms: 2, types: 81, coercions: 0, joins: 0/0}
$dGArbitraryK24_raIB
  :: GArbitraryK
       (Error Int)
       (GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons "Throw" 'GHC.Generics.PrefixI 'False)
          (GHC.Generics.S1
             ('GHC.Generics.MetaSel
                'Nothing
                'GHC.Generics.NoSourceUnpackedness
                'GHC.Generics.NoSourceStrictness
                'GHC.Generics.DecidedLazy)
             (Generics.Kind.Field
                ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int))))
       '[Error Int, State Int]
       ()
[GblId]
$dGArbitraryK24_raIB
  = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
      @ (Error Int)
      @ (GHC.Generics.M1
           GHC.Generics.S
           ('GHC.Generics.MetaSel
              'Nothing
              'GHC.Generics.NoSourceUnpackedness
              'GHC.Generics.NoSourceStrictness
              'GHC.Generics.DecidedLazy)
           (Generics.Kind.Field
              ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int)))
      @ '[Error Int, State Int]
      @ ()
      @ GHC.Generics.C
      @ ('GHC.Generics.MetaCons "Throw" 'GHC.Generics.PrefixI 'False)
      $dGArbitraryK23_raIA

-- RHS size: {terms: 2, types: 51, coercions: 65, joins: 0/0}
$dGArbitraryK25_raIC
  :: GArbitraryK
       (State Int)
       (Generics.Kind.Field
          ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int))
       '[State Int, Trace, State Int]
       ()
[GblId]
$dGArbitraryK25_raIC
  = Polysemy.Check.Arbitrary.$fGArbitraryKeFieldra
      @ ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int)
      @ '[State Int, Trace, State Int]
      @ ()
      @ (State Int)
      (Test.QuickCheck.Arbitrary.$fArbitraryInt
       `cast` ((Arbitrary
                  (Sym (kind-apply-0.3.2.0:Data.PolyKinded.Atom.D:R:Interpret[1]
                            <*>_N
                            <(* -> *) -> * -> *>_N
                            <Int>_N
                            <Sem '[State Int, Trace, State Int]
                             'kind-apply-0.3.2.0:Data.PolyKinded.:&&: (()
                                                                       'kind-apply-0.3.2.0:Data.PolyKinded.:&&: 'kind-apply-0.3.2.0:Data.PolyKinded.LoT0)>_N)))_R
               :: Arbitrary Int
                  ~R# Arbitrary
                        (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Interpret
                           ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int)
                           (Sem '[State Int, Trace, State Int]
                            'kind-apply-0.3.2.0:Data.PolyKinded.:&&: (()
                                                                      'kind-apply-0.3.2.0:Data.PolyKinded.:&&: 'kind-apply-0.3.2.0:Data.PolyKinded.LoT0)))))

-- RHS size: {terms: 2, types: 63, coercions: 0, joins: 0/0}
$dGArbitraryK26_raID
  :: GArbitraryK
       (State Int)
       (GHC.Generics.M1
          GHC.Generics.S
          ('GHC.Generics.MetaSel
             'Nothing
             'GHC.Generics.NoSourceUnpackedness
             'GHC.Generics.NoSourceStrictness
             'GHC.Generics.DecidedLazy)
          (Generics.Kind.Field
             ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int)))
       '[State Int, Trace, State Int]
       ()
[GblId]
$dGArbitraryK26_raID
  = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
      @ (State Int)
      @ (Generics.Kind.Field
           ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int))
      @ '[State Int, Trace, State Int]
      @ ()
      @ GHC.Generics.S
      @ ('GHC.Generics.MetaSel
           'Nothing
           'GHC.Generics.NoSourceUnpackedness
           'GHC.Generics.NoSourceStrictness
           'GHC.Generics.DecidedLazy)
      $dGArbitraryK25_raIC

-- RHS size: {terms: 2, types: 69, coercions: 0, joins: 0/0}
$dGArbitraryK27_raIE
  :: GArbitraryK
       (State Int)
       ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
          'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
         'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                        ())
        Generics.Kind.:=>: GHC.Generics.S1
                             ('GHC.Generics.MetaSel
                                'Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (Generics.Kind.Field
                                ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int)))
       '[State Int, Trace, State Int]
       ()
[GblId]
$dGArbitraryK27_raIE
  = Polysemy.Check.Arbitrary.$fGArbitraryKe:=>:ra1
      @ (State Int)
      @ (GHC.Generics.M1
           GHC.Generics.S
           ('GHC.Generics.MetaSel
              'Nothing
              'GHC.Generics.NoSourceUnpackedness
              'GHC.Generics.NoSourceStrictness
              'GHC.Generics.DecidedLazy)
           (Generics.Kind.Field
              ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int)))
      @ '[State Int, Trace, State Int]
      @ ()
      $dGArbitraryK26_raID

-- RHS size: {terms: 2, types: 121, coercions: 0, joins: 0/0}
$dGArbitraryK28_raIF
  :: GArbitraryK
       (State Int)
       (GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons "Put" 'GHC.Generics.PrefixI 'False)
          ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
            'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                           ())
           Generics.Kind.:=>: GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   'Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (Generics.Kind.Field
                                   ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int))))
       '[State Int, Trace, State Int]
       ()
[GblId]
$dGArbitraryK28_raIF
  = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
      @ (State Int)
      @ ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
           'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
          'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                         ())
         Generics.Kind.:=>: GHC.Generics.S1
                              ('GHC.Generics.MetaSel
                                 'Nothing
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (Generics.Kind.Field
                                 ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int)))
      @ '[State Int, Trace, State Int]
      @ ()
      @ GHC.Generics.C
      @ ('GHC.Generics.MetaCons "Put" 'GHC.Generics.PrefixI 'False)
      $dGArbitraryK27_raIE

-- RHS size: {terms: 2, types: 136, coercions: 0, joins: 0/0}
$dGArbitraryK29_raIG
  :: GArbitraryK
       (State Int)
       (GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
          (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
            'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
           Generics.Kind.:=>: GHC.Generics.U1))
       '[State Int, Trace, State Int]
       ()
[GblId]
$dGArbitraryK29_raIG
  = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
      @ (State Int)
      @ (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
          'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
         Generics.Kind.:=>: GHC.Generics.U1)
      @ '[State Int, Trace, State Int]
      @ ()
      @ GHC.Generics.C
      @ ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
      (Polysemy.Check.Arbitrary.$fGArbitraryKe:=>:ra0
         @ *
         @ (State Int)
         @ Int
         @ GHC.Generics.U1
         @ '[State Int, Trace, State Int]
         @ ())

-- RHS size: {terms: 3, types: 172, coercions: 0, joins: 0/0}
$dGArbitraryK30_raIH
  :: GArbitraryK
       (State Int)
       (GHC.Generics.C1
          ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
          (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
            'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
           Generics.Kind.:=>: GHC.Generics.U1)
        GHC.Generics.:+: GHC.Generics.C1
                           ('GHC.Generics.MetaCons "Put" 'GHC.Generics.PrefixI 'False)
                           ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                              'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                            ())
                            Generics.Kind.:=>: GHC.Generics.S1
                                                 ('GHC.Generics.MetaSel
                                                    'Nothing
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (Generics.Kind.Field
                                                    ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                       Int))))
       '[State Int, Trace, State Int]
       ()
[GblId]
$dGArbitraryK30_raIH
  = Polysemy.Check.Arbitrary.$fGArbitraryKe:+:ra
      @ (State Int)
      @ (GHC.Generics.M1
           GHC.Generics.C
           ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
           (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
            Generics.Kind.:=>: GHC.Generics.U1))
      @ '[State Int, Trace, State Int]
      @ ()
      @ (GHC.Generics.M1
           GHC.Generics.C
           ('GHC.Generics.MetaCons "Put" 'GHC.Generics.PrefixI 'False)
           ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
              'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                            ())
            Generics.Kind.:=>: GHC.Generics.S1
                                 ('GHC.Generics.MetaSel
                                    'Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (Generics.Kind.Field
                                    ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int))))
      $dGArbitraryK29_raIG
      $dGArbitraryK28_raIF

-- RHS size: {terms: 2, types: 182, coercions: 0, joins: 0/0}
$dGArbitraryK31_raII
  :: GArbitraryK
       (State Int)
       (GHC.Generics.D1
          ('GHC.Generics.MetaData
             "State"
             "Polysemy.State"
             "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
             'False)
          (GHC.Generics.C1
             ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
             (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
               'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
              Generics.Kind.:=>: GHC.Generics.U1)
           GHC.Generics.:+: GHC.Generics.C1
                              ('GHC.Generics.MetaCons "Put" 'GHC.Generics.PrefixI 'False)
                              ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                                 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                               ())
                               Generics.Kind.:=>: GHC.Generics.S1
                                                    ('GHC.Generics.MetaSel
                                                       'Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (Generics.Kind.Field
                                                       ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                          Int)))))
       '[State Int, Trace, State Int]
       ()
[GblId]
$dGArbitraryK31_raII
  = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
      @ (State Int)
      @ (GHC.Generics.C1
           ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
           (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
            Generics.Kind.:=>: GHC.Generics.U1)
         GHC.Generics.:+: GHC.Generics.C1
                            ('GHC.Generics.MetaCons "Put" 'GHC.Generics.PrefixI 'False)
                            ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                               'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                              'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                             ())
                             Generics.Kind.:=>: GHC.Generics.S1
                                                  ('GHC.Generics.MetaSel
                                                     'Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (Generics.Kind.Field
                                                     ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                        Int))))
      @ '[State Int, Trace, State Int]
      @ ()
      @ GHC.Generics.D
      @ ('GHC.Generics.MetaData
           "State"
           "Polysemy.State"
           "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
           'False)
      $dGArbitraryK30_raIH

-- RHS size: {terms: 2, types: 41, coercions: 0, joins: 0/0}
$dShow_raIJ
  :: Show (State Int (Sem '[State Int, Trace, State Int]) Int)
[GblId]
$dShow_raIJ
  = Polysemy.Check.Orphans.$fShowState
      @ Int @ '[State Int, Trace, State Int] @ Int GHC.Show.$fShowInt

-- RHS size: {terms: 10, types: 16, coercions: 0, joins: 0/0}
df2_raIK
  :: forall a. Show a => Show (Compose ((,) Int) ((,) [String]) a)
[GblId, Arity=1, Unf=OtherCon []]
df2_raIK
  = \ (@ a_aaDs) ($dShow5_aaDt :: Show a_aaDs) ->
      Data.Functor.Compose.$fShowCompose
        @ ((,) Int)
        @ ((,) [String])
        @ a_aaDs
        (Data.Functor.Classes.$fShow1(,) @ Int GHC.Show.$fShowInt)
        (Data.Functor.Classes.$fShow1(,)
           @ [String]
           (GHC.Show.$fShow[]
              @ [Char] (GHC.Show.$fShow[] @ Char GHC.Show.$fShowChar)))
        $dShow5_aaDt

-- RHS size: {terms: 8, types: 11, coercions: 0, joins: 0/0}
df3_raIL
  :: forall a. Show a => Show (Compose ((,) Int) (Either Int) a)
[GblId, Arity=1, Unf=OtherCon []]
df3_raIL
  = \ (@ a_aaDB) ($dShow5_aaDC :: Show a_aaDB) ->
      Data.Functor.Compose.$fShowCompose
        @ ((,) Int)
        @ (Either Int)
        @ a_aaDB
        (Data.Functor.Classes.$fShow1(,) @ Int GHC.Show.$fShowInt)
        (Data.Functor.Classes.$fShow1Either @ Int GHC.Show.$fShowInt)
        $dShow5_aaDC

-- RHS size: {terms: 2, types: 39, coercions: 0, joins: 0/0}
$dShow1_raIM :: Show (State Int (Sem '[Error Int, State Int]) ())
[GblId]
$dShow1_raIM
  = Polysemy.Check.Orphans.$fShowState
      @ Int @ '[Error Int, State Int] @ () GHC.Show.$fShowInt

-- RHS size: {terms: 2, types: 39, coercions: 0, joins: 0/0}
$dShow2_raIN :: Show (State Int (Sem '[Error Int, State Int]) Int)
[GblId]
$dShow2_raIN
  = Polysemy.Check.Orphans.$fShowState
      @ Int @ '[Error Int, State Int] @ Int GHC.Show.$fShowInt

-- RHS size: {terms: 2, types: 39, coercions: 0, joins: 0/0}
$dShow3_raIO :: Show (Error Int (Sem '[Error Int, State Int]) ())
[GblId]
$dShow3_raIO
  = Polysemy.Check.Orphans.$fShowError
      @ Int @ '[Error Int, State Int] @ () GHC.Show.$fShowInt

-- RHS size: {terms: 2, types: 41, coercions: 0, joins: 0/0}
$dShow4_raIP
  :: Show (State Int (Sem '[State Int, Trace, State Int]) ())
[GblId]
$dShow4_raIP
  = Polysemy.Check.Orphans.$fShowState
      @ Int @ '[State Int, Trace, State Int] @ () GHC.Show.$fShowInt

-- RHS size: {terms: 1, types: 3, coercions: 1, joins: 0/0}
$d~_raIQ :: '() ~ '()
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$d~_raIQ
  = ghc-prim-0.5.3:GHC.Types.Eq#
      @ () @ '() @ '() @~ (<'()>_N :: '() ghc-prim-0.5.3:GHC.Prim.~# '())

-- RHS size: {terms: 2, types: 43, coercions: 0, joins: 0/0}
$dFind2_raIR
  :: Polysemy.Internal.Union.Find (State Int) '[Trace, State Int]
[GblId]
$dFind2_raIR
  = Polysemy.Internal.Union.$fFindat:
      @ ((* -> *) -> * -> *)
      @ (State Int)
      @ '[State Int]
      @ Trace
      (Polysemy.Internal.Union.$fFindat:0
         @ ((* -> *) -> * -> *) @ (State Int) @ '[])

-- RHS size: {terms: 3, types: 33, coercions: 0, joins: 0/0}
$d(%,%)_raIS
  :: (Polysemy.Internal.Union.Find (State Int) '[Trace, State Int],
      '() ~ '())
[GblId, Unf=OtherCon []]
$d(%,%)_raIS = ($dFind2_raIR, $d~_raIQ)

-- RHS size: {terms: 17, types: 354, coercions: 94, joins: 0/0}
runTestEffs
  :: forall a.
     Sem TestEffs a -> IO (Compose ((,) Int) ((,) [String]) a)
[GblId]
runTestEffs
  = \ (@ a_a7k1) ->
      break<5>()
      . @ (Compose ((,) Int) ((,) [String]) a_a7k1)
        @ (IO (Compose ((,) Int) ((,) [String]) a_a7k1))
        @ (Sem '[State Int, Trace, State Int] a_a7k1)
        (pure
           @ IO
           GHC.Base.$fApplicativeIO
           @ (Compose ((,) Int) ((,) [String]) a_a7k1))
        (break<4>()
         . @ (Int, ([String], a_a7k1))
           @ (Compose ((,) Int) ((,) [String]) a_a7k1)
           @ (Sem '[State Int, Trace, State Int] a_a7k1)
           ((\ (v_B1 :: (Int, ([String], a_a7k1))) -> v_B1)
            `cast` (<(Int, ([String], a_a7k1))>_R
                    ->_R Sym (Data.Functor.Compose.N:Compose[0]
                                  <*>_N <*>_N <(,) Int>_R <(,) [String]>_N <a_a7k1>_N)
                    :: ((Int, ([String], a_a7k1)) -> (Int, ([String], a_a7k1)))
                       ~R# ((Int, ([String], a_a7k1))
                            -> Compose ((,) Int) ((,) [String]) a_a7k1)))
           (break<3>()
            . @ (Sem '[] (Int, ([String], a_a7k1)))
              @ (Int, ([String], a_a7k1))
              @ (Sem '[State Int, Trace, State Int] a_a7k1)
              (run @ (Int, ([String], a_a7k1)))
              (break<2>()
               . @ (Sem '[State Int] ([String], a_a7k1))
                 @ (Sem '[] (Int, ([String], a_a7k1)))
                 @ (Sem '[State Int, Trace, State Int] a_a7k1)
                 (break<0>()
                  runState
                    @ Int @ '[] @ ([String], a_a7k1) (ghc-prim-0.5.3:GHC.Types.I# 0#))
                 (break<1>()
                  . @ (Sem '[Trace, State Int] a_a7k1)
                    @ (Sem '[State Int] ([String], a_a7k1))
                    @ (Sem '[State Int, Trace, State Int] a_a7k1)
                    (runTraceList @ '[State Int] @ a_a7k1)
                    (subsume
                       @ (State Int)
                       @ '[Trace, State Int]
                       @ a_a7k1
                       ($d(%,%)_raIS
                        `cast` ((ghc-prim-0.5.3:GHC.Classes.(%,%)
                                   <Polysemy.Internal.Union.Find (State Int) '[Trace, State Int]>_N
                                   ((~)
                                      <()>_N
                                      (Sym (Polysemy.Internal.Union.D:R:LocateEffect[1]
                                                <(* -> *) -> * -> *>_N
                                                <State Int>_N
                                                <'[]>_N) ; Sym (Polysemy.Internal.Union.D:R:LocateEffect[2]
                                                                    <(* -> *) -> * -> *>_N
                                                                    <State Int>_N
                                                                    <Trace>_N
                                                                    <'[State Int]>_N))
                                      <'()>_N)_N)_R
                                :: (Polysemy.Internal.Union.Find (State Int) '[Trace, State Int],
                                    '() ~ '())
                                   ~R# (Polysemy.Internal.Union.Find
                                          (State Int) '[Trace, State Int],
                                        Polysemy.Internal.Union.LocateEffect
                                          (State Int) '[Trace, State Int]
                                        ~ '()))))))))

-- RHS size: {terms: 3, types: 48, coercions: 0, joins: 0/0}
$d(%,%)1_raIT
  :: (Polysemy.Internal.Union.Find
        Trace '[State Int, Trace, State Int],
      '() ~ '())
[GblId, Unf=OtherCon []]
$d(%,%)1_raIT = ($dFind1_raIl, $d~_raIQ)

-- RHS size: {terms: 3, types: 49, coercions: 0, joins: 0/0}
$d(%,%)2_raIU
  :: (Polysemy.Internal.Union.Find
        (State Int) '[Error Int, State Int],
      '() ~ '())
[GblId, Unf=OtherCon []]
$d(%,%)2_raIU = ($dFind_raIc, $d~_raIQ)

-- RHS size: {terms: 3, types: 79, coercions: 0, joins: 0/0}
$d(%,%)3_raIV
  :: (Polysemy.Internal.Union.Find
        (Error Int) '[Error Int, State Int],
      '() ~ '())
[GblId, Unf=OtherCon []]
$d(%,%)3_raIV
  = (Polysemy.Internal.Union.$fFindat:0
       @ ((* -> *) -> * -> *) @ (Error Int) @ '[State Int],
     $d~_raIQ)

-- RHS size: {terms: 3, types: 85, coercions: 0, joins: 0/0}
$d(%,%)4_raIW
  :: (Polysemy.Internal.Union.Find
        (State Int) '[State Int, Trace, State Int],
      '() ~ '())
[GblId, Unf=OtherCon []]
$d(%,%)4_raIW
  = (Polysemy.Internal.Union.$fFindat:0
       @ ((* -> *) -> * -> *) @ (State Int) @ '[Trace, State Int],
     $d~_raIQ)

-- RHS size: {terms: 9, types: 129, coercions: 200, joins: 0/0}
$dArbitraryAction_raIX
  :: ArbitraryAction '[()] Trace '[State Int, Trace, State Int]
[GblId]
$dArbitraryAction_raIX
  = Polysemy.Check.Arbitrary.$fArbitraryAction:er
      @ '[]
      @ Trace
      @ '[State Int, Trace, State Int]
      @ ()
      (Polysemy.Check.Arbitrary.$fArbitraryAction[]er
         @ Trace @ '[State Int, Trace, State Int])
      ghc-prim-0.5.3:GHC.Classes.$fEq()
      GHC.Show.$fShow()
      ($d(%,%)1_raIT
       `cast` ((ghc-prim-0.5.3:GHC.Classes.(%,%)
                  <Polysemy.Internal.Union.Find
                     Trace '[State Int, Trace, State Int]>_N
                  ((~)
                     <()>_N
                     (Sym (Polysemy.Internal.Union.D:R:LocateEffect[1]
                               <(* -> *) -> * -> *>_N
                               <Trace>_N
                               <'[State
                                    Int]>_N) ; Sym (Polysemy.Internal.Union.D:R:LocateEffect[2]
                                                        <(* -> *) -> * -> *>_N
                                                        <Trace>_N
                                                        <State Int>_N
                                                        <'[Trace, State Int]>_N))
                     <'()>_N)_N)_R
               :: (Polysemy.Internal.Union.Find
                     Trace '[State Int, Trace, State Int],
                   '() ~ '())
                  ~R# (Polysemy.Internal.Union.Find
                         Trace '[State Int, Trace, State Int],
                       Polysemy.Internal.Union.LocateEffect
                         Trace '[State Int, Trace, State Int]
                       ~ '())))
      (Polysemy.Check.Orphans.$fShowTrace
         @ '[State Int, Trace, State Int] @ ())
      (Polysemy.Check.Orphans.$fGenericK->Trace @ (* -> *))
      Test.QuickCheck.Arbitrary.$fCoArbitrary()
      ($dGArbitraryK10_raIk
       `cast` ((GArbitraryK
                  <Trace>_N
                  (Sym (Polysemy.Check.Orphans.D:R:RepK->Trace[0] <* -> *>_N))
                  <'[State Int, Trace, State Int]>_N
                  <()>_N)_R
               :: GArbitraryK
                    Trace
                    (GHC.Generics.D1
                       ('GHC.Generics.MetaData
                          "Trace"
                          "Polysemy.Trace"
                          "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                          'False)
                       (GHC.Generics.C1
                          ('GHC.Generics.MetaCons "Trace" 'GHC.Generics.PrefixI 'False)
                          ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                            'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                           ())
                           Generics.Kind.:=>: GHC.Generics.S1
                                                ('GHC.Generics.MetaSel
                                                   'Nothing
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (Generics.Kind.Field
                                                   ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                      [Char])))))
                    '[State Int, Trace, State Int]
                    ()
                  ~R# GArbitraryK
                        Trace
                        (Generics.Kind.RepK Trace)
                        '[State Int, Trace, State Int]
                        ()))

-- RHS size: {terms: 9, types: 92, coercions: 164, joins: 0/0}
$dArbitraryAction1_raIY
  :: ArbitraryAction '[()] (State Int) '[Error Int, State Int]
[GblId]
$dArbitraryAction1_raIY
  = Polysemy.Check.Arbitrary.$fArbitraryAction:er
      @ '[]
      @ (State Int)
      @ '[Error Int, State Int]
      @ ()
      (Polysemy.Check.Arbitrary.$fArbitraryAction[]er
         @ (State Int) @ '[Error Int, State Int])
      ghc-prim-0.5.3:GHC.Classes.$fEq()
      GHC.Show.$fShow()
      ($d(%,%)2_raIU
       `cast` ((ghc-prim-0.5.3:GHC.Classes.(%,%)
                  <Polysemy.Internal.Union.Find
                     (State Int) '[Error Int, State Int]>_N
                  ((~)
                     <()>_N
                     (Sym (Polysemy.Internal.Union.D:R:LocateEffect[1]
                               <(* -> *) -> * -> *>_N
                               <State Int>_N
                               <'[]>_N) ; Sym (Polysemy.Internal.Union.D:R:LocateEffect[2]
                                                   <(* -> *) -> * -> *>_N
                                                   <State Int>_N
                                                   <Error Int>_N
                                                   <'[State Int]>_N))
                     <'()>_N)_N)_R
               :: (Polysemy.Internal.Union.Find
                     (State Int) '[Error Int, State Int],
                   '() ~ '())
                  ~R# (Polysemy.Internal.Union.Find
                         (State Int) '[Error Int, State Int],
                       Polysemy.Internal.Union.LocateEffect
                         (State Int) '[Error Int, State Int]
                       ~ '())))
      $dShow1_raIM
      (Polysemy.Check.Orphans.$fGenericK->State0 @ (* -> *) @ Int)
      Test.QuickCheck.Arbitrary.$fCoArbitrary()
      ($dGArbitraryK21_raIy
       `cast` ((GArbitraryK
                  <State Int>_N
                  (Sym (Polysemy.Check.Orphans.D:R:RepK->State0[0]
                            <* -> *>_N <Int>_N))
                  <'[Error Int, State Int]>_N
                  <()>_N)_R
               :: GArbitraryK
                    (State Int)
                    (GHC.Generics.D1
                       ('GHC.Generics.MetaData
                          "State"
                          "Polysemy.State"
                          "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                          'False)
                       (GHC.Generics.C1
                          ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
                          (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
                            'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                           Generics.Kind.:=>: GHC.Generics.U1)
                        GHC.Generics.:+: GHC.Generics.C1
                                           ('GHC.Generics.MetaCons
                                              "Put" 'GHC.Generics.PrefixI 'False)
                                           ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                                              'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                            ())
                                            Generics.Kind.:=>: GHC.Generics.S1
                                                                 ('GHC.Generics.MetaSel
                                                                    'Nothing
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (Generics.Kind.Field
                                                                    ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                       Int)))))
                    '[Error Int, State Int]
                    ()
                  ~R# GArbitraryK
                        (State Int)
                        (Generics.Kind.RepK (State Int))
                        '[Error Int, State Int]
                        ()))

-- RHS size: {terms: 9, types: 52, coercions: 164, joins: 0/0}
$dArbitraryAction2_raIZ
  :: ArbitraryAction '[Int, ()] (State Int) '[Error Int, State Int]
[GblId]
$dArbitraryAction2_raIZ
  = Polysemy.Check.Arbitrary.$fArbitraryAction:er
      @ '[()]
      @ (State Int)
      @ '[Error Int, State Int]
      @ Int
      $dArbitraryAction1_raIY
      ghc-prim-0.5.3:GHC.Classes.$fEqInt
      GHC.Show.$fShowInt
      ($d(%,%)2_raIU
       `cast` ((ghc-prim-0.5.3:GHC.Classes.(%,%)
                  <Polysemy.Internal.Union.Find
                     (State Int) '[Error Int, State Int]>_N
                  ((~)
                     <()>_N
                     (Sym (Polysemy.Internal.Union.D:R:LocateEffect[1]
                               <(* -> *) -> * -> *>_N
                               <State Int>_N
                               <'[]>_N) ; Sym (Polysemy.Internal.Union.D:R:LocateEffect[2]
                                                   <(* -> *) -> * -> *>_N
                                                   <State Int>_N
                                                   <Error Int>_N
                                                   <'[State Int]>_N))
                     <'()>_N)_N)_R
               :: (Polysemy.Internal.Union.Find
                     (State Int) '[Error Int, State Int],
                   '() ~ '())
                  ~R# (Polysemy.Internal.Union.Find
                         (State Int) '[Error Int, State Int],
                       Polysemy.Internal.Union.LocateEffect
                         (State Int) '[Error Int, State Int]
                       ~ '())))
      $dShow2_raIN
      (Polysemy.Check.Orphans.$fGenericK->State0 @ (* -> *) @ Int)
      Test.QuickCheck.Arbitrary.$fCoArbitraryInt
      ($dGArbitraryK4_raIa
       `cast` ((GArbitraryK
                  <State Int>_N
                  (Sym (Polysemy.Check.Orphans.D:R:RepK->State0[0]
                            <* -> *>_N <Int>_N))
                  <'[Error Int, State Int]>_N
                  <Int>_N)_R
               :: GArbitraryK
                    (State Int)
                    (GHC.Generics.D1
                       ('GHC.Generics.MetaData
                          "State"
                          "Polysemy.State"
                          "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                          'False)
                       (GHC.Generics.C1
                          ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
                          (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
                            'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                           Generics.Kind.:=>: GHC.Generics.U1)
                        GHC.Generics.:+: GHC.Generics.C1
                                           ('GHC.Generics.MetaCons
                                              "Put" 'GHC.Generics.PrefixI 'False)
                                           ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                                              'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                            ())
                                            Generics.Kind.:=>: GHC.Generics.S1
                                                                 ('GHC.Generics.MetaSel
                                                                    'Nothing
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (Generics.Kind.Field
                                                                    ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                       Int)))))
                    '[Error Int, State Int]
                    Int
                  ~R# GArbitraryK
                        (State Int)
                        (Generics.Kind.RepK (State Int))
                        '[Error Int, State Int]
                        Int))

-- RHS size: {terms: 3, types: 89, coercions: 512, joins: 0/0}
$dArbitraryEff_raJ0
  :: ArbitraryEff '[State Int] '[Error Int, State Int]
[GblId]
$dArbitraryEff_raJ0
  = Polysemy.Check.Arbitrary.$fArbitraryEff:r
      @ '[]
      @ '[Error Int, State Int]
      @ (State Int)
      (Polysemy.Check.Arbitrary.$fArbitraryEff[]r
         @ '[Error Int, State Int])
      ($dArbitraryAction2_raIZ
       `cast` ((ArbitraryAction
                  (((':)
                      <*>_N
                      <Int>_N
                      (Sym (Polysemy.Internal.Kind.D:R:Append[1]
                                <*>_N <'[()]>_N)))_N ; (Sym (Polysemy.Internal.Kind.D:R:Append[0]
                                                                 <*>_N
                                                                 <Int>_N
                                                                 <'[]>_N
                                                                 <'[()]>_N) ; ((Polysemy.Internal.Kind.Append
                                                                                  <*>_N
                                                                                  (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[3]
                                                                                            <Int>_N
                                                                                            <GHC.Generics.U1>_N) ; Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                                                                                            <GHC.Generics.C>_N
                                                                                                                            <'GHC.Generics.MetaCons
                                                                                                                               "Get"
                                                                                                                               'GHC.Generics.PrefixI
                                                                                                                               'False>_N
                                                                                                                            <('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                ((~~)
                                                                                                                                   Int)
                                                                                                                              'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                             Generics.Kind.:=>: GHC.Generics.U1>_N))
                                                                                  (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[2]
                                                                                            <()>_N
                                                                                            <GHC.Generics.M1
                                                                                               GHC.Generics.S
                                                                                               ('GHC.Generics.MetaSel
                                                                                                  'Nothing
                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                               (Generics.Kind.Field
                                                                                                  ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                     Int))>_N) ; Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                                                                                          <GHC.Generics.C>_N
                                                                                                                          <'GHC.Generics.MetaCons
                                                                                                                             "Put"
                                                                                                                             'GHC.Generics.PrefixI
                                                                                                                             'False>_N
                                                                                                                          <(('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                               (~~)
                                                                                                                             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                            'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                           ())
                                                                                                                           Generics.Kind.:=>: GHC.Generics.S1
                                                                                                                                                ('GHC.Generics.MetaSel
                                                                                                                                                   'Nothing
                                                                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                                                                (Generics.Kind.Field
                                                                                                                                                   ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                      Int))>_N)))_N ; (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[1]
                                                                                                                                                                                <GHC.Generics.M1
                                                                                                                                                                                   GHC.Generics.C
                                                                                                                                                                                   ('GHC.Generics.MetaCons
                                                                                                                                                                                      "Get"
                                                                                                                                                                                      'GHC.Generics.PrefixI
                                                                                                                                                                                      'False)
                                                                                                                                                                                   (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                       ((~~)
                                                                                                                                                                                          Int)
                                                                                                                                                                                     'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                                                                                    Generics.Kind.:=>: GHC.Generics.U1)>_N
                                                                                                                                                                                <GHC.Generics.M1
                                                                                                                                                                                   GHC.Generics.C
                                                                                                                                                                                   ('GHC.Generics.MetaCons
                                                                                                                                                                                      "Put"
                                                                                                                                                                                      'GHC.Generics.PrefixI
                                                                                                                                                                                      'False)
                                                                                                                                                                                   ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                        (~~)
                                                                                                                                                                                      'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                                                                                     'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                                                    ())
                                                                                                                                                                                    Generics.Kind.:=>: GHC.Generics.S1
                                                                                                                                                                                                         ('GHC.Generics.MetaSel
                                                                                                                                                                                                            'Nothing
                                                                                                                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                         (Generics.Kind.Field
                                                                                                                                                                                                            ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                               Int)))>_N) ; (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                                                                                                                                                                                                      <GHC.Generics.D>_N
                                                                                                                                                                                                                                      <'GHC.Generics.MetaData
                                                                                                                                                                                                                                         "State"
                                                                                                                                                                                                                                         "Polysemy.State"
                                                                                                                                                                                                                                         "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                                                                                                                                                                                                                                         'False>_N
                                                                                                                                                                                                                                      <GHC.Generics.C1
                                                                                                                                                                                                                                         ('GHC.Generics.MetaCons
                                                                                                                                                                                                                                            "Get"
                                                                                                                                                                                                                                            'GHC.Generics.PrefixI
                                                                                                                                                                                                                                            'False)
                                                                                                                                                                                                                                         (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                                                             ((~~)
                                                                                                                                                                                                                                                Int)
                                                                                                                                                                                                                                           'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                                                                                                                                          Generics.Kind.:=>: GHC.Generics.U1)
                                                                                                                                                                                                                                       GHC.Generics.:+: GHC.Generics.C1
                                                                                                                                                                                                                                                          ('GHC.Generics.MetaCons
                                                                                                                                                                                                                                                             "Put"
                                                                                                                                                                                                                                                             'GHC.Generics.PrefixI
                                                                                                                                                                                                                                                             'False)
                                                                                                                                                                                                                                                          ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                                                                               (~~)
                                                                                                                                                                                                                                                             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                                                                                                                                                            'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                                                                                                                           ())
                                                                                                                                                                                                                                                           Generics.Kind.:=>: GHC.Generics.S1
                                                                                                                                                                                                                                                                                ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                                                   'Nothing
                                                                                                                                                                                                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                                                (Generics.Kind.Field
                                                                                                                                                                                                                                                                                   ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                                                                                                      Int)))>_N) ; (Polysemy.Check.Arbitrary.GTypesOf
                                                                                                                                                                                                                                                                                                      (Sym (Polysemy.Check.Orphans.D:R:RepK->State0[0]
                                                                                                                                                                                                                                                                                                                <*
                                                                                                                                                                                                                                                                                                                 -> *>_N
                                                                                                                                                                                                                                                                                                                <Int>_N)))_N)))))
                  <State Int>_N
                  <'[Error Int, State Int]>_N)_R
               :: ArbitraryAction '[Int, ()] (State Int) '[Error Int, State Int]
                  ~R# ArbitraryAction
                        (Polysemy.Check.Arbitrary.GTypesOf
                           (Generics.Kind.RepK (State Int)))
                        (State Int)
                        '[Error Int, State Int]))

-- RHS size: {terms: 9, types: 94, coercions: 175, joins: 0/0}
$dArbitraryEffOfType_raJ1
  :: ArbitraryEffOfType () '[State Int] '[Error Int, State Int]
[GblId]
$dArbitraryEffOfType_raJ1
  = Polysemy.Check.Arbitrary.$fArbitraryEffOfTypea:r
      @ ()
      @ (State Int)
      @ '[Error Int, State Int]
      @ '[]
      ghc-prim-0.5.3:GHC.Classes.$fEq()
      GHC.Show.$fShow()
      $dShow1_raIM
      (Polysemy.Check.Arbitrary.$fArbitraryEffOfTypea[]r
         @ () @ '[Error Int, State Int])
      (Polysemy.Check.Orphans.$fGenericK->State0 @ (* -> *) @ Int)
      ($dGArbitraryK21_raIy
       `cast` ((GArbitraryK
                  <State Int>_N
                  (Sym (Polysemy.Check.Orphans.D:R:RepK->State0[0]
                            <* -> *>_N <Int>_N))
                  <'[Error Int, State Int]>_N
                  <()>_N)_R
               :: GArbitraryK
                    (State Int)
                    (GHC.Generics.D1
                       ('GHC.Generics.MetaData
                          "State"
                          "Polysemy.State"
                          "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                          'False)
                       (GHC.Generics.C1
                          ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
                          (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
                            'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                           Generics.Kind.:=>: GHC.Generics.U1)
                        GHC.Generics.:+: GHC.Generics.C1
                                           ('GHC.Generics.MetaCons
                                              "Put" 'GHC.Generics.PrefixI 'False)
                                           ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                                              'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                            ())
                                            Generics.Kind.:=>: GHC.Generics.S1
                                                                 ('GHC.Generics.MetaSel
                                                                    'Nothing
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (Generics.Kind.Field
                                                                    ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                       Int)))))
                    '[Error Int, State Int]
                    ()
                  ~R# GArbitraryK
                        (State Int)
                        (Generics.Kind.RepK (State Int))
                        '[Error Int, State Int]
                        ()))
      Test.QuickCheck.Arbitrary.$fCoArbitrary()
      ($d(%,%)2_raIU
       `cast` ((ghc-prim-0.5.3:GHC.Classes.(%,%)
                  <Polysemy.Internal.Union.Find
                     (State Int) '[Error Int, State Int]>_N
                  ((~)
                     <()>_N
                     (Sym (Polysemy.Internal.Union.D:R:LocateEffect[1]
                               <(* -> *) -> * -> *>_N
                               <State Int>_N
                               <'[]>_N) ; Sym (Polysemy.Internal.Union.D:R:LocateEffect[2]
                                                   <(* -> *) -> * -> *>_N
                                                   <State Int>_N
                                                   <Error Int>_N
                                                   <'[State Int]>_N))
                     <'()>_N)_N)_R
               :: (Polysemy.Internal.Union.Find
                     (State Int) '[Error Int, State Int],
                   '() ~ '())
                  ~R# (Polysemy.Internal.Union.Find
                         (State Int) '[Error Int, State Int],
                       Polysemy.Internal.Union.LocateEffect
                         (State Int) '[Error Int, State Int]
                       ~ '())))

Rec {
-- RHS size: {terms: 3, types: 65, coercions: 881, joins: 0/0}
$dArbitraryEff1_raJ2
  :: ArbitraryEff '[Error Int, State Int] '[Error Int, State Int]
[GblId]
$dArbitraryEff1_raJ2
  = Polysemy.Check.Arbitrary.$fArbitraryEff:r
      @ '[State Int]
      @ '[Error Int, State Int]
      @ (Error Int)
      $dArbitraryEff_raJ0
      ($dArbitraryAction4_raJf
       `cast` ((ArbitraryAction
                  (((':)
                      <*>_N
                      <()>_N
                      (Sym (Polysemy.Internal.Kind.D:R:Append[1]
                                <*>_N <'[()]>_N)))_N ; (Sym (Polysemy.Internal.Kind.D:R:Append[0]
                                                                 <*>_N
                                                                 <()>_N
                                                                 <'[]>_N
                                                                 <'[()]>_N) ; ((Polysemy.Internal.Kind.Append
                                                                                  <*>_N
                                                                                  (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[4]
                                                                                            <Generics.Kind.Field
                                                                                               ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                  Int)>_N) ; (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                                                                                       <GHC.Generics.S>_N
                                                                                                                       <'GHC.Generics.MetaSel
                                                                                                                          'Nothing
                                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                                          'GHC.Generics.DecidedLazy>_N
                                                                                                                       <Generics.Kind.Field
                                                                                                                          ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                             Int)>_N) ; Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                                                                                                                 <GHC.Generics.C>_N
                                                                                                                                                 <'GHC.Generics.MetaCons
                                                                                                                                                    "Throw"
                                                                                                                                                    'GHC.Generics.PrefixI
                                                                                                                                                    'False>_N
                                                                                                                                                 <GHC.Generics.M1
                                                                                                                                                    GHC.Generics.S
                                                                                                                                                    ('GHC.Generics.MetaSel
                                                                                                                                                       'Nothing
                                                                                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                                                                                       'GHC.Generics.DecidedLazy)
                                                                                                                                                    (Generics.Kind.Field
                                                                                                                                                       ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                          Int))>_N)))
                                                                                  (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[4]
                                                                                            <GHC.Generics.S1
                                                                                               ('GHC.Generics.MetaSel
                                                                                                  'Nothing
                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                               (Generics.Kind.Field
                                                                                                  (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
                                                                                                   'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1))
                                                                                             GHC.Generics.:*: GHC.Generics.S1
                                                                                                                ('GHC.Generics.MetaSel
                                                                                                                   'Nothing
                                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                                (Generics.Kind.Field
                                                                                                                   ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                      ((->)
                                                                                                                         Int)
                                                                                                                    'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
                                                                                                                                                                  'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)))>_N) ; Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                                                                                                                                                                                                                                              <GHC.Generics.C>_N
                                                                                                                                                                                                                                                                              <'GHC.Generics.MetaCons
                                                                                                                                                                                                                                                                                 "Catch"
                                                                                                                                                                                                                                                                                 'GHC.Generics.PrefixI
                                                                                                                                                                                                                                                                                 'False>_N
                                                                                                                                                                                                                                                                              <GHC.Generics.S1
                                                                                                                                                                                                                                                                                 ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                                                    'Nothing
                                                                                                                                                                                                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                                                 (Generics.Kind.Field
                                                                                                                                                                                                                                                                                    (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
                                                                                                                                                                                                                                                                                     'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1))
                                                                                                                                                                                                                                                                               GHC.Generics.:*: GHC.Generics.S1
                                                                                                                                                                                                                                                                                                  ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                                                                     'Nothing
                                                                                                                                                                                                                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                                                                  (Generics.Kind.Field
                                                                                                                                                                                                                                                                                                     ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                                                                                                                        ((->)
                                                                                                                                                                                                                                                                                                           Int)
                                                                                                                                                                                                                                                                                                      'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
                                                                                                                                                                                                                                                                                                                                                    'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)))>_N)))_N ; (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[1]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     <GHC.Generics.M1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        GHC.Generics.C
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ('GHC.Generics.MetaCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           "Throw"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           'GHC.Generics.PrefixI
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           'False)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (GHC.Generics.S1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              'Nothing
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (Generics.Kind.Field
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Int)))>_N
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     <GHC.Generics.M1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        GHC.Generics.C
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ('GHC.Generics.MetaCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           "Catch"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           'GHC.Generics.PrefixI
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           'False)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (GHC.Generics.S1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              'Nothing
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (Generics.Kind.Field
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         GHC.Generics.:*: GHC.Generics.S1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               'Nothing
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (Generics.Kind.Field
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ((->)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Int)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1))))>_N) ; (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
enerics.D>_N
enerics.MetaData
rror"
olysemy.Error"
polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
alse>_N
enerics.C1
enerics.MetaCons
hrow"
enerics.PrefixI
alse)
enerics.S1
enerics.MetaSel
othing
enerics.NoSourceUnpackedness
enerics.NoSourceStrictness
enerics.DecidedLazy)
enerics.Kind.Field
kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
nt)))
enerics.:+: GHC.Generics.C1
enerics.MetaCons
atch"
enerics.PrefixI
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   'False)
enerics.S1
enerics.MetaSel
othing
enerics.NoSourceUnpackedness
enerics.NoSourceStrictness
enerics.DecidedLazy)
enerics.Kind.Field
kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1))
enerics.:*: GHC.Generics.S1
enerics.MetaSel
othing
enerics.NoSourceUnpackedness
enerics.NoSourceStrictness
enerics.DecidedLazy)
enerics.Kind.Field
kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon

nt)
kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1))))>_N) ; (Polysemy.Check.Arbitrary.GTypesOf
ym (Polysemy.Check.Orphans.D:R:RepK->Error0[0]

nt>_N)))_N)))))
                  <Error Int>_N
                  <'[Error Int, State Int]>_N)_R
               :: ArbitraryAction '[(), ()] (Error Int) '[Error Int, State Int]
                  ~R# ArbitraryAction
                        (Polysemy.Check.Arbitrary.GTypesOf
                           (Generics.Kind.RepK (Error Int)))
                        (Error Int)
                        '[Error Int, State Int]))

-- RHS size: {terms: 3, types: 40, coercions: 0, joins: 0/0}
$dArbitrary1_raJ3
  :: Arbitrary (Int -> Sem '[Error Int, State Int] ())
[GblId]
$dArbitrary1_raJ3
  = Test.QuickCheck.Arbitrary.$fArbitrary->
      @ Int
      @ (Sem '[Error Int, State Int] ())
      Test.QuickCheck.Arbitrary.$fCoArbitraryInt
      $dArbitrary2_raJd

-- RHS size: {terms: 2, types: 98, coercions: 676, joins: 0/0}
$dGArbitraryK32_raJ4
  :: GArbitraryK
       (Error Int)
       (Generics.Kind.Field
          ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((->) Int)
           'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
                                                         'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)))
       '[Error Int, State Int]
       ()
[GblId]
$dGArbitraryK32_raJ4
  = Polysemy.Check.Arbitrary.$fGArbitraryKeFieldra
      @ ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((->) Int)
         'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
                                                       'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1))
      @ '[Error Int, State Int]
      @ ()
      @ (Error Int)
      ($dArbitrary1_raJ3
       `cast` ((Arbitrary
                  (Sym (kind-apply-0.3.2.0:Data.PolyKinded.Atom.D:R:Interpret[1]
                            <* -> *>_N
                            <(* -> *) -> * -> *>_N
                            <(->) Int>_N
                            <Sem '[Error Int, State Int]
                             'kind-apply-0.3.2.0:Data.PolyKinded.:&&: (()
                                                                       'kind-apply-0.3.2.0:Data.PolyKinded.:&&: 'kind-apply-0.3.2.0:Data.PolyKinded.LoT0)>_N) ((Sym (kind-apply-0.3.2.0:Data.PolyKinded.D:R:HeadLoT[0]
                                                                                                                                                                         <*
                                                                                                                                                                          -> *>_N
                                                                                                                                                                         <*
                                                                                                                                                                          -> *>_N
                                                                                                                                                                         <Sem
                                                                                                                                                                            '[Error
                                                                                                                                                                                Int,
                                                                                                                                                                              State
                                                                                                                                                                                Int]>_N
                                                                                                                                                                         <()
                                                                                                                                                                          'kind-apply-0.3.2.0:Data.PolyKinded.:&&: 'kind-apply-0.3.2.0:Data.PolyKinded.LoT0>_N) ; (Sym (kind-apply-0.3.2.0:Data.PolyKinded.Atom.D:R:InterpretVar[0]
                                                                                                                                                                                                                                                                            <*
                                                                                                                                                                                                                                                                             -> *>_N
                                                                                                                                                                                                                                                                            <*
                                                                                                                                                                                                                                                                             -> *>_N
                                                                                                                                                                                                                                                                            <Sem
                                                                                                                                                                                                                                                                               '[Error
                                                                                                                                                                                                                                                                                   Int,
                                                                                                                                                                                                                                                                                 State
                                                                                                                                                                                                                                                                                   Int]
                                                                                                                                                                                                                                                                             'kind-apply-0.3.2.0:Data.PolyKinded.:&&: (()
                                                                                                                                                                                                                                                                                                                       'kind-apply-0.3.2.0:Data.PolyKinded.:&&: 'kind-apply-0.3.2.0:Data.PolyKinded.LoT0)>_N) ; Sym (kind-apply-0.3.2.0:Data.PolyKinded.Atom.D:R:Interpret[0]
                                                                                                                                                                                                                                                                                                                                                                                                                         <(*
                                                                                                                                                                                                                                                                                                                                                                                                                           -> *)
                                                                                                                                                                                                                                                                                                                                                                                                                          -> *
                                                                                                                                                                                                                                                                                                                                                                                                                          -> *>_N
                                                                                                                                                                                                                                                                                                                                                                                                                         <*
                                                                                                                                                                                                                                                                                                                                                                                                                          -> *>_N
                                                                                                                                                                                                                                                                                                                                                                                                                         <'kind-apply-0.3.2.0:Data.PolyKinded.Atom.VZ>_N
                                                                                                                                                                                                                                                                                                                                                                                                                         <Sem
                                                                                                                                                                                                                                                                                                                                                                                                                            '[Error
                                                                                                                                                                                                                                                                                                                                                                                                                                Int,
                                                                                                                                                                                                                                                                                                                                                                                                                              State
                                                                                                                                                                                                                                                                                                                                                                                                                                Int]
                                                                                                                                                                                                                                                                                                                                                                                                                          'kind-apply-0.3.2.0:Data.PolyKinded.:&&: (()
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    'kind-apply-0.3.2.0:Data.PolyKinded.:&&: 'kind-apply-0.3.2.0:Data.PolyKinded.LoT0)>_N))) (Sym (kind-apply-0.3.2.0:Data.PolyKinded.D:R:HeadLoT[0]



kind-apply-0.3.2.0:Data.PolyKinded.LoT0>_N) ; (Sym (kind-apply-0.3.2.0:Data.PolyKinded.Atom.D:R:InterpretVar[0]


kind-apply-0.3.2.0:Data.PolyKinded.D:R:TailLoT[0]


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <*

em
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         '[Error
nt,
tate
nt]>_N

kind-apply-0.3.2.0:Data.PolyKinded.:&&: 'kind-apply-0.3.2.0:Data.PolyKinded.LoT0>_N)) ; (Sym (kind-apply-0.3.2.0:Data.PolyKinded.Atom.D:R:InterpretVar[1]





kind-apply-0.3.2.0:Data.PolyKinded.Atom.VZ>_N
em
rror
nt,
tate
nt]
kind-apply-0.3.2.0:Data.PolyKinded.:&&: (()
kind-apply-0.3.2.0:Data.PolyKinded.:&&: 'kind-apply-0.3.2.0:Data.PolyKinded.LoT0)>_N) ; Sym (kind-apply-0.3.2.0:Data.PolyKinded.Atom.D:R:Interpret[0]





kind-apply-0.3.2.0:Data.PolyKinded.Atom.VS
kind-apply-0.3.2.0:Data.PolyKinded.Atom.VZ>_N
em
rror
nt,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            State
nt]
kind-apply-0.3.2.0:Data.PolyKinded.:&&: (()
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  'kind-apply-0.3.2.0:Data.PolyKinded.:&&: 'kind-apply-0.3.2.0:Data.PolyKinded.LoT0)>_N)))) ; Sym (kind-apply-0.3.2.0:Data.PolyKinded.Atom.D:R:Interpret[2]





                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       <*>_N
kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var
kind-apply-0.3.2.0:Data.PolyKinded.Atom.VZ>_N
kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.VS
kind-apply-0.3.2.0:Data.PolyKinded.Atom.VZ)>_N
em
rror
nt,
tate
nt]
kind-apply-0.3.2.0:Data.PolyKinded.:&&: (()
kind-apply-0.3.2.0:Data.PolyKinded.:&&: 'kind-apply-0.3.2.0:Data.PolyKinded.LoT0)>_N)) ; Sym (kind-apply-0.3.2.0:Data.PolyKinded.Atom.D:R:Interpret[2]




                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     <*>_N
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     <*>_N
kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon

nt)>_N
kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1>_N
em
rror
nt,
tate
nt]
kind-apply-0.3.2.0:Data.PolyKinded.:&&: (()
kind-apply-0.3.2.0:Data.PolyKinded.:&&: 'kind-apply-0.3.2.0:Data.PolyKinded.LoT0)>_N)))_R
               :: Arbitrary (Int -> Sem '[Error Int, State Int] ())
                  ~R# Arbitrary
                        (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Interpret
                           ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((->) Int)
                            'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
                                                                          'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1))
                           (Sem '[Error Int, State Int]
                            'kind-apply-0.3.2.0:Data.PolyKinded.:&&: (()
                                                                      'kind-apply-0.3.2.0:Data.PolyKinded.:&&: 'kind-apply-0.3.2.0:Data.PolyKinded.LoT0)))))

-- RHS size: {terms: 2, types: 113, coercions: 0, joins: 0/0}
$dGArbitraryK33_raJ5
  :: GArbitraryK
       (Error Int)
       (GHC.Generics.M1
          GHC.Generics.S
          ('GHC.Generics.MetaSel
             'Nothing
             'GHC.Generics.NoSourceUnpackedness
             'GHC.Generics.NoSourceStrictness
             'GHC.Generics.DecidedLazy)
          (Generics.Kind.Field
             ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((->) Int)
              'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
                                                            'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1))))
       '[Error Int, State Int]
       ()
[GblId]
$dGArbitraryK33_raJ5
  = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
      @ (Error Int)
      @ (Generics.Kind.Field
           ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((->) Int)
            'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
                                                          'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)))
      @ '[Error Int, State Int]
      @ ()
      @ GHC.Generics.S
      @ ('GHC.Generics.MetaSel
           'Nothing
           'GHC.Generics.NoSourceUnpackedness
           'GHC.Generics.NoSourceStrictness
           'GHC.Generics.DecidedLazy)
      $dGArbitraryK32_raJ4

-- RHS size: {terms: 2, types: 70, coercions: 501, joins: 0/0}
$dGArbitraryK34_raJ6
  :: GArbitraryK
       (Error Int)
       (Generics.Kind.Field
          (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
           'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1))
       '[Error Int, State Int]
       ()
[GblId]
$dGArbitraryK34_raJ6
  = Polysemy.Check.Arbitrary.$fGArbitraryKeFieldra
      @ (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
         'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
      @ '[Error Int, State Int]
      @ ()
      @ (Error Int)
      ($dArbitrary2_raJd
       `cast` ((Arbitrary
                  ((Sym (kind-apply-0.3.2.0:Data.PolyKinded.D:R:HeadLoT[0]
                             <* -> *>_N
                             <* -> *>_N
                             <Sem '[Error Int, State Int]>_N
                             <()
                              'kind-apply-0.3.2.0:Data.PolyKinded.:&&: 'kind-apply-0.3.2.0:Data.PolyKinded.LoT0>_N) ; (Sym (kind-apply-0.3.2.0:Data.PolyKinded.Atom.D:R:InterpretVar[0]
                                                                                                                                <*
                                                                                                                                 -> *>_N
                                                                                                                                <*
                                                                                                                                 -> *>_N
                                                                                                                                <Sem
                                                                                                                                   '[Error
                                                                                                                                       Int,
                                                                                                                                     State
                                                                                                                                       Int]
                                                                                                                                 'kind-apply-0.3.2.0:Data.PolyKinded.:&&: (()
                                                                                                                                                                           'kind-apply-0.3.2.0:Data.PolyKinded.:&&: 'kind-apply-0.3.2.0:Data.PolyKinded.LoT0)>_N) ; Sym (kind-apply-0.3.2.0:Data.PolyKinded.Atom.D:R:Interpret[0]
                                                                                                                                                                                                                                                                             <(*
                                                                                                                                                                                                                                                                               -> *)
                                                                                                                                                                                                                                                                              -> *
                                                                                                                                                                                                                                                                              -> *>_N
                                                                                                                                                                                                                                                                             <*
                                                                                                                                                                                                                                                                              -> *>_N
                                                                                                                                                                                                                                                                             <'kind-apply-0.3.2.0:Data.PolyKinded.Atom.VZ>_N
                                                                                                                                                                                                                                                                             <Sem
                                                                                                                                                                                                                                                                                '[Error
                                                                                                                                                                                                                                                                                    Int,
                                                                                                                                                                                                                                                                                  State
                                                                                                                                                                                                                                                                                    Int]
                                                                                                                                                                                                                                                                              'kind-apply-0.3.2.0:Data.PolyKinded.:&&: (()
                                                                                                                                                                                                                                                                                                                        'kind-apply-0.3.2.0:Data.PolyKinded.:&&: 'kind-apply-0.3.2.0:Data.PolyKinded.LoT0)>_N))) (Sym (kind-apply-0.3.2.0:Data.PolyKinded.D:R:HeadLoT[0]
                                                                                                                                                                                                                                                                                                                                                                                                                           <*>_N
                                                                                                                                                                                                                                                                                                                                                                                                                           <*>_N
                                                                                                                                                                                                                                                                                                                                                                                                                           <()>_N
                                                                                                                                                                                                                                                                                                                                                                                                                           <'kind-apply-0.3.2.0:Data.PolyKinded.LoT0>_N) ; (Sym (kind-apply-0.3.2.0:Data.PolyKinded.Atom.D:R:InterpretVar[0]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     <*>_N
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     <*>_N
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     (kind-apply-0.3.2.0:Data.PolyKinded.D:R:TailLoT[0]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           -> *>_N
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           -> *>_N
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <Sem
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             '[Error
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Int,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               State
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Int]>_N
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <()
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           'kind-apply-0.3.2.0:Data.PolyKinded.:&&: 'kind-apply-0.3.2.0:Data.PolyKinded.LoT0>_N)) ; (Sym (kind-apply-0.3.2.0:Data.PolyKinded.Atom.D:R:InterpretVar[1]





kind-apply-0.3.2.0:Data.PolyKinded.Atom.VZ>_N
em
rror
nt,
tate
nt]
kind-apply-0.3.2.0:Data.PolyKinded.:&&: (()
kind-apply-0.3.2.0:Data.PolyKinded.:&&: 'kind-apply-0.3.2.0:Data.PolyKinded.LoT0)>_N) ; Sym (kind-apply-0.3.2.0:Data.PolyKinded.Atom.D:R:Interpret[0]





kind-apply-0.3.2.0:Data.PolyKinded.Atom.VS
kind-apply-0.3.2.0:Data.PolyKinded.Atom.VZ>_N
em
rror
nt,
tate
nt]
kind-apply-0.3.2.0:Data.PolyKinded.:&&: (()
kind-apply-0.3.2.0:Data.PolyKinded.:&&: 'kind-apply-0.3.2.0:Data.PolyKinded.LoT0)>_N)))) ; Sym (kind-apply-0.3.2.0:Data.PolyKinded.Atom.D:R:Interpret[2]






kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var
kind-apply-0.3.2.0:Data.PolyKinded.Atom.VZ>_N
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           <'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var
kind-apply-0.3.2.0:Data.PolyKinded.Atom.VS
kind-apply-0.3.2.0:Data.PolyKinded.Atom.VZ)>_N
em
rror
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Int,
tate
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Int]
kind-apply-0.3.2.0:Data.PolyKinded.:&&: (()
kind-apply-0.3.2.0:Data.PolyKinded.:&&: 'kind-apply-0.3.2.0:Data.PolyKinded.LoT0)>_N)))_R
               :: Arbitrary (Sem '[Error Int, State Int] ())
                  ~R# Arbitrary
                        (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Interpret
                           ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var
                              'kind-apply-0.3.2.0:Data.PolyKinded.Atom.VZ
                            'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var
                                                                           ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.VS
                                                                              'kind-apply-0.3.2.0:Data.PolyKinded.Atom.VZ))
                           (Sem '[Error Int, State Int]
                            'kind-apply-0.3.2.0:Data.PolyKinded.:&&: (()
                                                                      'kind-apply-0.3.2.0:Data.PolyKinded.:&&: 'kind-apply-0.3.2.0:Data.PolyKinded.LoT0)))))

-- RHS size: {terms: 2, types: 85, coercions: 0, joins: 0/0}
$dGArbitraryK35_raJ7
  :: GArbitraryK
       (Error Int)
       (GHC.Generics.M1
          GHC.Generics.S
          ('GHC.Generics.MetaSel
             'Nothing
             'GHC.Generics.NoSourceUnpackedness
             'GHC.Generics.NoSourceStrictness
             'GHC.Generics.DecidedLazy)
          (Generics.Kind.Field
             (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
              'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)))
       '[Error Int, State Int]
       ()
[GblId]
$dGArbitraryK35_raJ7
  = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
      @ (Error Int)
      @ (Generics.Kind.Field
           (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
            'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1))
      @ '[Error Int, State Int]
      @ ()
      @ GHC.Generics.S
      @ ('GHC.Generics.MetaSel
           'Nothing
           'GHC.Generics.NoSourceUnpackedness
           'GHC.Generics.NoSourceStrictness
           'GHC.Generics.DecidedLazy)
      $dGArbitraryK34_raJ6

-- RHS size: {terms: 3, types: 174, coercions: 0, joins: 0/0}
$dGArbitraryK36_raJ8
  :: GArbitraryK
       (Error Int)
       (GHC.Generics.S1
          ('GHC.Generics.MetaSel
             'Nothing
             'GHC.Generics.NoSourceUnpackedness
             'GHC.Generics.NoSourceStrictness
             'GHC.Generics.DecidedLazy)
          (Generics.Kind.Field
             (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
              'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1))
        GHC.Generics.:*: GHC.Generics.S1
                           ('GHC.Generics.MetaSel
                              'Nothing
                              'GHC.Generics.NoSourceUnpackedness
                              'GHC.Generics.NoSourceStrictness
                              'GHC.Generics.DecidedLazy)
                           (Generics.Kind.Field
                              ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((->) Int)
                               'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
                                                                             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1))))
       '[Error Int, State Int]
       ()
[GblId]
$dGArbitraryK36_raJ8
  = Polysemy.Check.Arbitrary.$fGArbitraryKe:*:ra
      @ (Error Int)
      @ (GHC.Generics.M1
           GHC.Generics.S
           ('GHC.Generics.MetaSel
              'Nothing
              'GHC.Generics.NoSourceUnpackedness
              'GHC.Generics.NoSourceStrictness
              'GHC.Generics.DecidedLazy)
           (Generics.Kind.Field
              (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
               'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)))
      @ '[Error Int, State Int]
      @ ()
      @ (GHC.Generics.M1
           GHC.Generics.S
           ('GHC.Generics.MetaSel
              'Nothing
              'GHC.Generics.NoSourceUnpackedness
              'GHC.Generics.NoSourceStrictness
              'GHC.Generics.DecidedLazy)
           (Generics.Kind.Field
              ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((->) Int)
               'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
                                                             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1))))
      $dGArbitraryK35_raJ7
      $dGArbitraryK33_raJ5

-- RHS size: {terms: 2, types: 186, coercions: 0, joins: 0/0}
$dGArbitraryK37_raJ9
  :: GArbitraryK
       (Error Int)
       (GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons "Catch" 'GHC.Generics.PrefixI 'False)
          (GHC.Generics.S1
             ('GHC.Generics.MetaSel
                'Nothing
                'GHC.Generics.NoSourceUnpackedness
                'GHC.Generics.NoSourceStrictness
                'GHC.Generics.DecidedLazy)
             (Generics.Kind.Field
                (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
                 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1))
           GHC.Generics.:*: GHC.Generics.S1
                              ('GHC.Generics.MetaSel
                                 'Nothing
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (Generics.Kind.Field
                                 ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((->) Int)
                                  'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
                                                                                'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)))))
       '[Error Int, State Int]
       ()
[GblId]
$dGArbitraryK37_raJ9
  = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
      @ (Error Int)
      @ (GHC.Generics.S1
           ('GHC.Generics.MetaSel
              'Nothing
              'GHC.Generics.NoSourceUnpackedness
              'GHC.Generics.NoSourceStrictness
              'GHC.Generics.DecidedLazy)
           (Generics.Kind.Field
              (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
               'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1))
         GHC.Generics.:*: GHC.Generics.S1
                            ('GHC.Generics.MetaSel
                               'Nothing
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (Generics.Kind.Field
                               ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((->) Int)
                                'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
                                                                              'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1))))
      @ '[Error Int, State Int]
      @ ()
      @ GHC.Generics.C
      @ ('GHC.Generics.MetaCons "Catch" 'GHC.Generics.PrefixI 'False)
      $dGArbitraryK36_raJ8

-- RHS size: {terms: 3, types: 242, coercions: 0, joins: 0/0}
$dGArbitraryK38_raJa
  :: GArbitraryK
       (Error Int)
       (GHC.Generics.C1
          ('GHC.Generics.MetaCons "Throw" 'GHC.Generics.PrefixI 'False)
          (GHC.Generics.S1
             ('GHC.Generics.MetaSel
                'Nothing
                'GHC.Generics.NoSourceUnpackedness
                'GHC.Generics.NoSourceStrictness
                'GHC.Generics.DecidedLazy)
             (Generics.Kind.Field
                ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int)))
        GHC.Generics.:+: GHC.Generics.C1
                           ('GHC.Generics.MetaCons "Catch" 'GHC.Generics.PrefixI 'False)
                           (GHC.Generics.S1
                              ('GHC.Generics.MetaSel
                                 'Nothing
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (Generics.Kind.Field
                                 (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
                                  'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1))
                            GHC.Generics.:*: GHC.Generics.S1
                                               ('GHC.Generics.MetaSel
                                                  'Nothing
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (Generics.Kind.Field
                                                  ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                     ((->) Int)
                                                   'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
                                                                                                 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)))))
       '[Error Int, State Int]
       ()
[GblId]
$dGArbitraryK38_raJa
  = Polysemy.Check.Arbitrary.$fGArbitraryKe:+:ra
      @ (Error Int)
      @ (GHC.Generics.M1
           GHC.Generics.C
           ('GHC.Generics.MetaCons "Throw" 'GHC.Generics.PrefixI 'False)
           (GHC.Generics.S1
              ('GHC.Generics.MetaSel
                 'Nothing
                 'GHC.Generics.NoSourceUnpackedness
                 'GHC.Generics.NoSourceStrictness
                 'GHC.Generics.DecidedLazy)
              (Generics.Kind.Field
                 ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int))))
      @ '[Error Int, State Int]
      @ ()
      @ (GHC.Generics.M1
           GHC.Generics.C
           ('GHC.Generics.MetaCons "Catch" 'GHC.Generics.PrefixI 'False)
           (GHC.Generics.S1
              ('GHC.Generics.MetaSel
                 'Nothing
                 'GHC.Generics.NoSourceUnpackedness
                 'GHC.Generics.NoSourceStrictness
                 'GHC.Generics.DecidedLazy)
              (Generics.Kind.Field
                 (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
                  'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1))
            GHC.Generics.:*: GHC.Generics.S1
                               ('GHC.Generics.MetaSel
                                  'Nothing
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (Generics.Kind.Field
                                  ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((->) Int)
                                   'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
                                                                                 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)))))
      $dGArbitraryK24_raIB
      $dGArbitraryK37_raJ9

-- RHS size: {terms: 2, types: 255, coercions: 0, joins: 0/0}
$dGArbitraryK39_raJb
  :: GArbitraryK
       (Error Int)
       (GHC.Generics.D1
          ('GHC.Generics.MetaData
             "Error"
             "Polysemy.Error"
             "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
             'False)
          (GHC.Generics.C1
             ('GHC.Generics.MetaCons "Throw" 'GHC.Generics.PrefixI 'False)
             (GHC.Generics.S1
                ('GHC.Generics.MetaSel
                   'Nothing
                   'GHC.Generics.NoSourceUnpackedness
                   'GHC.Generics.NoSourceStrictness
                   'GHC.Generics.DecidedLazy)
                (Generics.Kind.Field
                   ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int)))
           GHC.Generics.:+: GHC.Generics.C1
                              ('GHC.Generics.MetaCons "Catch" 'GHC.Generics.PrefixI 'False)
                              (GHC.Generics.S1
                                 ('GHC.Generics.MetaSel
                                    'Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (Generics.Kind.Field
                                    (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
                                     'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1))
                               GHC.Generics.:*: GHC.Generics.S1
                                                  ('GHC.Generics.MetaSel
                                                     'Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (Generics.Kind.Field
                                                     ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                        ((->) Int)
                                                      'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
                                                                                                    'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1))))))
       '[Error Int, State Int]
       ()
[GblId]
$dGArbitraryK39_raJb
  = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
      @ (Error Int)
      @ (GHC.Generics.C1
           ('GHC.Generics.MetaCons "Throw" 'GHC.Generics.PrefixI 'False)
           (GHC.Generics.S1
              ('GHC.Generics.MetaSel
                 'Nothing
                 'GHC.Generics.NoSourceUnpackedness
                 'GHC.Generics.NoSourceStrictness
                 'GHC.Generics.DecidedLazy)
              (Generics.Kind.Field
                 ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int)))
         GHC.Generics.:+: GHC.Generics.C1
                            ('GHC.Generics.MetaCons "Catch" 'GHC.Generics.PrefixI 'False)
                            (GHC.Generics.S1
                               ('GHC.Generics.MetaSel
                                  'Nothing
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (Generics.Kind.Field
                                  (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
                                   'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1))
                             GHC.Generics.:*: GHC.Generics.S1
                                                ('GHC.Generics.MetaSel
                                                   'Nothing
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (Generics.Kind.Field
                                                   ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                      ((->) Int)
                                                    'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
                                                                                                  'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)))))
      @ '[Error Int, State Int]
      @ ()
      @ GHC.Generics.D
      @ ('GHC.Generics.MetaData
           "Error"
           "Polysemy.Error"
           "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
           'False)
      $dGArbitraryK38_raJa

-- RHS size: {terms: 9, types: 69, coercions: 139, joins: 0/0}
$dArbitraryEffOfType1_raJc
  :: ArbitraryEffOfType
       () '[Error Int, State Int] '[Error Int, State Int]
[GblId]
$dArbitraryEffOfType1_raJc
  = Polysemy.Check.Arbitrary.$fArbitraryEffOfTypea:r
      @ ()
      @ (Error Int)
      @ '[Error Int, State Int]
      @ '[State Int]
      ghc-prim-0.5.3:GHC.Classes.$fEq()
      GHC.Show.$fShow()
      $dShow3_raIO
      $dArbitraryEffOfType_raJ1
      (Polysemy.Check.Orphans.$fGenericK->Error0 @ * @ Int)
      ($dGArbitraryK39_raJb
       `cast` ((GArbitraryK
                  <Error Int>_N
                  (Sym (Polysemy.Check.Orphans.D:R:RepK->Error0[0] <*>_N <Int>_N))
                  <'[Error Int, State Int]>_N
                  <()>_N)_R
               :: GArbitraryK
                    (Error Int)
                    (GHC.Generics.D1
                       ('GHC.Generics.MetaData
                          "Error"
                          "Polysemy.Error"
                          "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                          'False)
                       (GHC.Generics.C1
                          ('GHC.Generics.MetaCons "Throw" 'GHC.Generics.PrefixI 'False)
                          (GHC.Generics.S1
                             ('GHC.Generics.MetaSel
                                'Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (Generics.Kind.Field
                                ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int)))
                        GHC.Generics.:+: GHC.Generics.C1
                                           ('GHC.Generics.MetaCons
                                              "Catch" 'GHC.Generics.PrefixI 'False)
                                           (GHC.Generics.S1
                                              ('GHC.Generics.MetaSel
                                                 'Nothing
                                                 'GHC.Generics.NoSourceUnpackedness
                                                 'GHC.Generics.NoSourceStrictness
                                                 'GHC.Generics.DecidedLazy)
                                              (Generics.Kind.Field
                                                 (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
                                                  'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1))
                                            GHC.Generics.:*: GHC.Generics.S1
                                                               ('GHC.Generics.MetaSel
                                                                  'Nothing
                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                  'GHC.Generics.NoSourceStrictness
                                                                  'GHC.Generics.DecidedLazy)
                                                               (Generics.Kind.Field
                                                                  ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                     ((->) Int)
                                                                   'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
                                                                                                                 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1))))))
                    '[Error Int, State Int]
                    ()
                  ~R# GArbitraryK
                        (Error Int)
                        (Generics.Kind.RepK (Error Int))
                        '[Error Int, State Int]
                        ()))
      Test.QuickCheck.Arbitrary.$fCoArbitrary()
      ($d(%,%)3_raIV
       `cast` ((ghc-prim-0.5.3:GHC.Classes.(%,%)
                  <Polysemy.Internal.Union.Find
                     (Error Int) '[Error Int, State Int]>_N
                  ((~)
                     <()>_N
                     (Sym (Polysemy.Internal.Union.D:R:LocateEffect[1]
                               <(* -> *) -> * -> *>_N <Error Int>_N <'[State Int]>_N))
                     <'()>_N)_N)_R
               :: (Polysemy.Internal.Union.Find
                     (Error Int) '[Error Int, State Int],
                   '() ~ '())
                  ~R# (Polysemy.Internal.Union.Find
                         (Error Int) '[Error Int, State Int],
                       Polysemy.Internal.Union.LocateEffect
                         (Error Int) '[Error Int, State Int]
                       ~ '())))

-- RHS size: {terms: 4, types: 38, coercions: 0, joins: 0/0}
$dArbitrary2_raJd :: Arbitrary (Sem '[Error Int, State Int] ())
[GblId]
$dArbitrary2_raJd
  = Polysemy.Check.Arbitrary.$fArbitrarySem
      @ ()
      @ '[Error Int, State Int]
      Test.QuickCheck.Arbitrary.$fArbitrary()
      $dArbitraryEff1_raJ2
      $dArbitraryEffOfType1_raJc

-- RHS size: {terms: 9, types: 89, coercions: 132, joins: 0/0}
$dArbitraryAction3_raJe
  :: ArbitraryAction '[()] (Error Int) '[Error Int, State Int]
[GblId]
$dArbitraryAction3_raJe
  = Polysemy.Check.Arbitrary.$fArbitraryAction:er
      @ '[]
      @ (Error Int)
      @ '[Error Int, State Int]
      @ ()
      (Polysemy.Check.Arbitrary.$fArbitraryAction[]er
         @ (Error Int) @ '[Error Int, State Int])
      ghc-prim-0.5.3:GHC.Classes.$fEq()
      GHC.Show.$fShow()
      ($d(%,%)3_raIV
       `cast` ((ghc-prim-0.5.3:GHC.Classes.(%,%)
                  <Polysemy.Internal.Union.Find
                     (Error Int) '[Error Int, State Int]>_N
                  ((~)
                     <()>_N
                     (Sym (Polysemy.Internal.Union.D:R:LocateEffect[1]
                               <(* -> *) -> * -> *>_N <Error Int>_N <'[State Int]>_N))
                     <'()>_N)_N)_R
               :: (Polysemy.Internal.Union.Find
                     (Error Int) '[Error Int, State Int],
                   '() ~ '())
                  ~R# (Polysemy.Internal.Union.Find
                         (Error Int) '[Error Int, State Int],
                       Polysemy.Internal.Union.LocateEffect
                         (Error Int) '[Error Int, State Int]
                       ~ '())))
      $dShow3_raIO
      (Polysemy.Check.Orphans.$fGenericK->Error0 @ * @ Int)
      Test.QuickCheck.Arbitrary.$fCoArbitrary()
      ($dGArbitraryK39_raJb
       `cast` ((GArbitraryK
                  <Error Int>_N
                  (Sym (Polysemy.Check.Orphans.D:R:RepK->Error0[0] <*>_N <Int>_N))
                  <'[Error Int, State Int]>_N
                  <()>_N)_R
               :: GArbitraryK
                    (Error Int)
                    (GHC.Generics.D1
                       ('GHC.Generics.MetaData
                          "Error"
                          "Polysemy.Error"
                          "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                          'False)
                       (GHC.Generics.C1
                          ('GHC.Generics.MetaCons "Throw" 'GHC.Generics.PrefixI 'False)
                          (GHC.Generics.S1
                             ('GHC.Generics.MetaSel
                                'Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (Generics.Kind.Field
                                ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int)))
                        GHC.Generics.:+: GHC.Generics.C1
                                           ('GHC.Generics.MetaCons
                                              "Catch" 'GHC.Generics.PrefixI 'False)
                                           (GHC.Generics.S1
                                              ('GHC.Generics.MetaSel
                                                 'Nothing
                                                 'GHC.Generics.NoSourceUnpackedness
                                                 'GHC.Generics.NoSourceStrictness
                                                 'GHC.Generics.DecidedLazy)
                                              (Generics.Kind.Field
                                                 (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
                                                  'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1))
                                            GHC.Generics.:*: GHC.Generics.S1
                                                               ('GHC.Generics.MetaSel
                                                                  'Nothing
                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                  'GHC.Generics.NoSourceStrictness
                                                                  'GHC.Generics.DecidedLazy)
                                                               (Generics.Kind.Field
                                                                  ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                     ((->) Int)
                                                                   'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
                                                                                                                 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1))))))
                    '[Error Int, State Int]
                    ()
                  ~R# GArbitraryK
                        (Error Int)
                        (Generics.Kind.RepK (Error Int))
                        '[Error Int, State Int]
                        ()))

-- RHS size: {terms: 9, types: 52, coercions: 132, joins: 0/0}
$dArbitraryAction4_raJf
  :: ArbitraryAction '[(), ()] (Error Int) '[Error Int, State Int]
[GblId]
$dArbitraryAction4_raJf
  = Polysemy.Check.Arbitrary.$fArbitraryAction:er
      @ '[()]
      @ (Error Int)
      @ '[Error Int, State Int]
      @ ()
      $dArbitraryAction3_raJe
      ghc-prim-0.5.3:GHC.Classes.$fEq()
      GHC.Show.$fShow()
      ($d(%,%)3_raIV
       `cast` ((ghc-prim-0.5.3:GHC.Classes.(%,%)
                  <Polysemy.Internal.Union.Find
                     (Error Int) '[Error Int, State Int]>_N
                  ((~)
                     <()>_N
                     (Sym (Polysemy.Internal.Union.D:R:LocateEffect[1]
                               <(* -> *) -> * -> *>_N <Error Int>_N <'[State Int]>_N))
                     <'()>_N)_N)_R
               :: (Polysemy.Internal.Union.Find
                     (Error Int) '[Error Int, State Int],
                   '() ~ '())
                  ~R# (Polysemy.Internal.Union.Find
                         (Error Int) '[Error Int, State Int],
                       Polysemy.Internal.Union.LocateEffect
                         (Error Int) '[Error Int, State Int]
                       ~ '())))
      $dShow3_raIO
      (Polysemy.Check.Orphans.$fGenericK->Error0 @ * @ Int)
      Test.QuickCheck.Arbitrary.$fCoArbitrary()
      ($dGArbitraryK39_raJb
       `cast` ((GArbitraryK
                  <Error Int>_N
                  (Sym (Polysemy.Check.Orphans.D:R:RepK->Error0[0] <*>_N <Int>_N))
                  <'[Error Int, State Int]>_N
                  <()>_N)_R
               :: GArbitraryK
                    (Error Int)
                    (GHC.Generics.D1
                       ('GHC.Generics.MetaData
                          "Error"
                          "Polysemy.Error"
                          "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                          'False)
                       (GHC.Generics.C1
                          ('GHC.Generics.MetaCons "Throw" 'GHC.Generics.PrefixI 'False)
                          (GHC.Generics.S1
                             ('GHC.Generics.MetaSel
                                'Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (Generics.Kind.Field
                                ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int)))
                        GHC.Generics.:+: GHC.Generics.C1
                                           ('GHC.Generics.MetaCons
                                              "Catch" 'GHC.Generics.PrefixI 'False)
                                           (GHC.Generics.S1
                                              ('GHC.Generics.MetaSel
                                                 'Nothing
                                                 'GHC.Generics.NoSourceUnpackedness
                                                 'GHC.Generics.NoSourceStrictness
                                                 'GHC.Generics.DecidedLazy)
                                              (Generics.Kind.Field
                                                 (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
                                                  'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1))
                                            GHC.Generics.:*: GHC.Generics.S1
                                                               ('GHC.Generics.MetaSel
                                                                  'Nothing
                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                  'GHC.Generics.NoSourceStrictness
                                                                  'GHC.Generics.DecidedLazy)
                                                               (Generics.Kind.Field
                                                                  ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                     ((->) Int)
                                                                   'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
                                                                                                                 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1))))))
                    '[Error Int, State Int]
                    ()
                  ~R# GArbitraryK
                        (Error Int)
                        (Generics.Kind.RepK (Error Int))
                        '[Error Int, State Int]
                        ()))
end Rec }

-- RHS size: {terms: 3, types: 84, coercions: 881, joins: 0/0}
$dArbitraryEff2_raJg
  :: ArbitraryEff '[Error Int] '[Error Int, State Int]
[GblId]
$dArbitraryEff2_raJg
  = Polysemy.Check.Arbitrary.$fArbitraryEff:r
      @ '[]
      @ '[Error Int, State Int]
      @ (Error Int)
      (Polysemy.Check.Arbitrary.$fArbitraryEff[]r
         @ '[Error Int, State Int])
      ($dArbitraryAction4_raJf
       `cast` ((ArbitraryAction
                  (((':)
                      <*>_N
                      <()>_N
                      (Sym (Polysemy.Internal.Kind.D:R:Append[1]
                                <*>_N <'[()]>_N)))_N ; (Sym (Polysemy.Internal.Kind.D:R:Append[0]
                                                                 <*>_N
                                                                 <()>_N
                                                                 <'[]>_N
                                                                 <'[()]>_N) ; ((Polysemy.Internal.Kind.Append
                                                                                  <*>_N
                                                                                  (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[4]
                                                                                            <Generics.Kind.Field
                                                                                               ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                  Int)>_N) ; (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                                                                                       <GHC.Generics.S>_N
                                                                                                                       <'GHC.Generics.MetaSel
                                                                                                                          'Nothing
                                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                                          'GHC.Generics.DecidedLazy>_N
                                                                                                                       <Generics.Kind.Field
                                                                                                                          ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                             Int)>_N) ; Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                                                                                                                 <GHC.Generics.C>_N
                                                                                                                                                 <'GHC.Generics.MetaCons
                                                                                                                                                    "Throw"
                                                                                                                                                    'GHC.Generics.PrefixI
                                                                                                                                                    'False>_N
                                                                                                                                                 <GHC.Generics.M1
                                                                                                                                                    GHC.Generics.S
                                                                                                                                                    ('GHC.Generics.MetaSel
                                                                                                                                                       'Nothing
                                                                                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                                                                                       'GHC.Generics.DecidedLazy)
                                                                                                                                                    (Generics.Kind.Field
                                                                                                                                                       ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                          Int))>_N)))
                                                                                  (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[4]
                                                                                            <GHC.Generics.S1
                                                                                               ('GHC.Generics.MetaSel
                                                                                                  'Nothing
                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                               (Generics.Kind.Field
                                                                                                  (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
                                                                                                   'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1))
                                                                                             GHC.Generics.:*: GHC.Generics.S1
                                                                                                                ('GHC.Generics.MetaSel
                                                                                                                   'Nothing
                                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                                (Generics.Kind.Field
                                                                                                                   ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                      ((->)
                                                                                                                         Int)
                                                                                                                    'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
                                                                                                                                                                  'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)))>_N) ; Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                                                                                                                                                                                                                                              <GHC.Generics.C>_N
                                                                                                                                                                                                                                                                              <'GHC.Generics.MetaCons
                                                                                                                                                                                                                                                                                 "Catch"
                                                                                                                                                                                                                                                                                 'GHC.Generics.PrefixI
                                                                                                                                                                                                                                                                                 'False>_N
                                                                                                                                                                                                                                                                              <GHC.Generics.S1
                                                                                                                                                                                                                                                                                 ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                                                    'Nothing
                                                                                                                                                                                                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                                                 (Generics.Kind.Field
                                                                                                                                                                                                                                                                                    (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
                                                                                                                                                                                                                                                                                     'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1))
                                                                                                                                                                                                                                                                               GHC.Generics.:*: GHC.Generics.S1
                                                                                                                                                                                                                                                                                                  ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                                                                     'Nothing
                                                                                                                                                                                                                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                                                                  (Generics.Kind.Field
                                                                                                                                                                                                                                                                                                     ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                                                                                                                        ((->)
                                                                                                                                                                                                                                                                                                           Int)
                                                                                                                                                                                                                                                                                                      'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
                                                                                                                                                                                                                                                                                                                                                    'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)))>_N)))_N ; (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[1]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     <GHC.Generics.M1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        GHC.Generics.C
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ('GHC.Generics.MetaCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           "Throw"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           'GHC.Generics.PrefixI
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           'False)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (GHC.Generics.S1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              'Nothing
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (Generics.Kind.Field
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Int)))>_N
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     <GHC.Generics.M1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        GHC.Generics.C
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ('GHC.Generics.MetaCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           "Catch"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           'GHC.Generics.PrefixI
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           'False)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (GHC.Generics.S1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              'Nothing
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (Generics.Kind.Field
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         GHC.Generics.:*: GHC.Generics.S1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               'Nothing
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (Generics.Kind.Field
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ((->)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Int)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1))))>_N) ; (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
enerics.D>_N
enerics.MetaData
rror"
olysemy.Error"
polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
alse>_N
enerics.C1
enerics.MetaCons
hrow"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  'GHC.Generics.PrefixI
alse)
enerics.S1
enerics.MetaSel
othing
enerics.NoSourceUnpackedness
enerics.NoSourceStrictness
enerics.DecidedLazy)
enerics.Kind.Field
kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
nt)))
enerics.:+: GHC.Generics.C1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ('GHC.Generics.MetaCons
atch"
enerics.PrefixI
alse)
enerics.S1
enerics.MetaSel
othing
enerics.NoSourceUnpackedness
enerics.NoSourceStrictness
enerics.DecidedLazy)
enerics.Kind.Field
kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GHC.Generics.:*: GHC.Generics.S1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ('GHC.Generics.MetaSel
othing
enerics.NoSourceUnpackedness
enerics.NoSourceStrictness
enerics.DecidedLazy)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    (Generics.Kind.Field
kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon

nt)
kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var0
kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1))))>_N) ; (Polysemy.Check.Arbitrary.GTypesOf
ym (Polysemy.Check.Orphans.D:R:RepK->Error0[0]

nt>_N)))_N)))))
                  <Error Int>_N
                  <'[Error Int, State Int]>_N)_R
               :: ArbitraryAction '[(), ()] (Error Int) '[Error Int, State Int]
                  ~R# ArbitraryAction
                        (Polysemy.Check.Arbitrary.GTypesOf
                           (Generics.Kind.RepK (Error Int)))
                        (Error Int)
                        '[Error Int, State Int]))

-- RHS size: {terms: 9, types: 92, coercions: 172, joins: 0/0}
$dArbitraryAction5_raJh
  :: ArbitraryAction '[()] (State Int) '[State Int, Trace, State Int]
[GblId]
$dArbitraryAction5_raJh
  = Polysemy.Check.Arbitrary.$fArbitraryAction:er
      @ '[]
      @ (State Int)
      @ '[State Int, Trace, State Int]
      @ ()
      (Polysemy.Check.Arbitrary.$fArbitraryAction[]er
         @ (State Int) @ '[State Int, Trace, State Int])
      ghc-prim-0.5.3:GHC.Classes.$fEq()
      GHC.Show.$fShow()
      ($d(%,%)4_raIW
       `cast` ((ghc-prim-0.5.3:GHC.Classes.(%,%)
                  <Polysemy.Internal.Union.Find
                     (State Int) '[State Int, Trace, State Int]>_N
                  ((~)
                     <()>_N
                     (Sym (Polysemy.Internal.Union.D:R:LocateEffect[1]
                               <(* -> *) -> * -> *>_N <State Int>_N <'[Trace, State Int]>_N))
                     <'()>_N)_N)_R
               :: (Polysemy.Internal.Union.Find
                     (State Int) '[State Int, Trace, State Int],
                   '() ~ '())
                  ~R# (Polysemy.Internal.Union.Find
                         (State Int) '[State Int, Trace, State Int],
                       Polysemy.Internal.Union.LocateEffect
                         (State Int) '[State Int, Trace, State Int]
                       ~ '())))
      $dShow4_raIP
      (Polysemy.Check.Orphans.$fGenericK->State0 @ (* -> *) @ Int)
      Test.QuickCheck.Arbitrary.$fCoArbitrary()
      ($dGArbitraryK31_raII
       `cast` ((GArbitraryK
                  <State Int>_N
                  (Sym (Polysemy.Check.Orphans.D:R:RepK->State0[0]
                            <* -> *>_N <Int>_N))
                  <'[State Int, Trace, State Int]>_N
                  <()>_N)_R
               :: GArbitraryK
                    (State Int)
                    (GHC.Generics.D1
                       ('GHC.Generics.MetaData
                          "State"
                          "Polysemy.State"
                          "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                          'False)
                       (GHC.Generics.C1
                          ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
                          (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
                            'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                           Generics.Kind.:=>: GHC.Generics.U1)
                        GHC.Generics.:+: GHC.Generics.C1
                                           ('GHC.Generics.MetaCons
                                              "Put" 'GHC.Generics.PrefixI 'False)
                                           ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                                              'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                            ())
                                            Generics.Kind.:=>: GHC.Generics.S1
                                                                 ('GHC.Generics.MetaSel
                                                                    'Nothing
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (Generics.Kind.Field
                                                                    ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                       Int)))))
                    '[State Int, Trace, State Int]
                    ()
                  ~R# GArbitraryK
                        (State Int)
                        (Generics.Kind.RepK (State Int))
                        '[State Int, Trace, State Int]
                        ()))

-- RHS size: {terms: 9, types: 52, coercions: 172, joins: 0/0}
$dArbitraryAction6_raJi
  :: ArbitraryAction
       '[Int, ()] (State Int) '[State Int, Trace, State Int]
[GblId]
$dArbitraryAction6_raJi
  = Polysemy.Check.Arbitrary.$fArbitraryAction:er
      @ '[()]
      @ (State Int)
      @ '[State Int, Trace, State Int]
      @ Int
      $dArbitraryAction5_raJh
      ghc-prim-0.5.3:GHC.Classes.$fEqInt
      GHC.Show.$fShowInt
      ($d(%,%)4_raIW
       `cast` ((ghc-prim-0.5.3:GHC.Classes.(%,%)
                  <Polysemy.Internal.Union.Find
                     (State Int) '[State Int, Trace, State Int]>_N
                  ((~)
                     <()>_N
                     (Sym (Polysemy.Internal.Union.D:R:LocateEffect[1]
                               <(* -> *) -> * -> *>_N <State Int>_N <'[Trace, State Int]>_N))
                     <'()>_N)_N)_R
               :: (Polysemy.Internal.Union.Find
                     (State Int) '[State Int, Trace, State Int],
                   '() ~ '())
                  ~R# (Polysemy.Internal.Union.Find
                         (State Int) '[State Int, Trace, State Int],
                       Polysemy.Internal.Union.LocateEffect
                         (State Int) '[State Int, Trace, State Int]
                       ~ '())))
      $dShow_raIJ
      (Polysemy.Check.Orphans.$fGenericK->State0 @ (* -> *) @ Int)
      Test.QuickCheck.Arbitrary.$fCoArbitraryInt
      ($dGArbitraryK15_raIq
       `cast` ((GArbitraryK
                  <State Int>_N
                  (Sym (Polysemy.Check.Orphans.D:R:RepK->State0[0]
                            <* -> *>_N <Int>_N))
                  <'[State Int, Trace, State Int]>_N
                  <Int>_N)_R
               :: GArbitraryK
                    (State Int)
                    (GHC.Generics.D1
                       ('GHC.Generics.MetaData
                          "State"
                          "Polysemy.State"
                          "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                          'False)
                       (GHC.Generics.C1
                          ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
                          (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
                            'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                           Generics.Kind.:=>: GHC.Generics.U1)
                        GHC.Generics.:+: GHC.Generics.C1
                                           ('GHC.Generics.MetaCons
                                              "Put" 'GHC.Generics.PrefixI 'False)
                                           ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                                              'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                            ())
                                            Generics.Kind.:=>: GHC.Generics.S1
                                                                 ('GHC.Generics.MetaSel
                                                                    'Nothing
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (Generics.Kind.Field
                                                                    ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                       Int)))))
                    '[State Int, Trace, State Int]
                    Int
                  ~R# GArbitraryK
                        (State Int)
                        (Generics.Kind.RepK (State Int))
                        '[State Int, Trace, State Int]
                        Int))

-- RHS size: {terms: 3, types: 88, coercions: 271, joins: 0/0}
$dArbitraryEff3_raJj :: ArbitraryEff '[Trace] TestEffs
[GblId]
$dArbitraryEff3_raJj
  = Polysemy.Check.Arbitrary.$fArbitraryEff:r
      @ '[]
      @ '[State Int, Trace, State Int]
      @ Trace
      (Polysemy.Check.Arbitrary.$fArbitraryEff[]r
         @ '[State Int, Trace, State Int])
      ($dArbitraryAction_raIX
       `cast` ((ArbitraryAction
                  (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[2]
                            <()>_N
                            <GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  'Nothing
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (Generics.Kind.Field
                                  ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                     [Char]))>_N) ; (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                              <GHC.Generics.C>_N
                                                              <'GHC.Generics.MetaCons
                                                                 "Trace"
                                                                 'GHC.Generics.PrefixI
                                                                 'False>_N
                                                              <(('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                   (~~)
                                                                 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                               ())
                                                               Generics.Kind.:=>: GHC.Generics.S1
                                                                                    ('GHC.Generics.MetaSel
                                                                                       'Nothing
                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                       'GHC.Generics.DecidedLazy)
                                                                                    (Generics.Kind.Field
                                                                                       ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                          [Char]))>_N) ; (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                                                                                   <GHC.Generics.D>_N
                                                                                                                   <'GHC.Generics.MetaData
                                                                                                                      "Trace"
                                                                                                                      "Polysemy.Trace"
                                                                                                                      "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                                                                                                                      'False>_N
                                                                                                                   <GHC.Generics.M1
                                                                                                                      GHC.Generics.C
                                                                                                                      ('GHC.Generics.MetaCons
                                                                                                                         "Trace"
                                                                                                                         'GHC.Generics.PrefixI
                                                                                                                         'False)
                                                                                                                      ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                           (~~)
                                                                                                                         'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                        'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                       ())
                                                                                                                       Generics.Kind.:=>: GHC.Generics.S1
                                                                                                                                            ('GHC.Generics.MetaSel
                                                                                                                                               'Nothing
                                                                                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                                                                                               'GHC.Generics.NoSourceStrictness
                                                                                                                                               'GHC.Generics.DecidedLazy)
                                                                                                                                            (Generics.Kind.Field
                                                                                                                                               ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                  [Char])))>_N) ; (Polysemy.Check.Arbitrary.GTypesOf
                                                                                                                                                                     (Sym (Polysemy.Check.Orphans.D:R:RepK->Trace[0]
                                                                                                                                                                               <*
                                                                                                                                                                                -> *>_N)))_N)))
                  <Trace>_N
                  <'[State Int, Trace, State Int]>_N)_R
               :: ArbitraryAction '[()] Trace '[State Int, Trace, State Int]
                  ~R# ArbitraryAction
                        (Polysemy.Check.Arbitrary.GTypesOf (Generics.Kind.RepK Trace))
                        Trace
                        '[State Int, Trace, State Int]))

-- RHS size: {terms: 3, types: 89, coercions: 528, joins: 0/0}
$dArbitraryEff4_raJk
  :: ArbitraryEff '[State Int] '[State Int, Trace, State Int]
[GblId]
$dArbitraryEff4_raJk
  = Polysemy.Check.Arbitrary.$fArbitraryEff:r
      @ '[]
      @ '[State Int, Trace, State Int]
      @ (State Int)
      (Polysemy.Check.Arbitrary.$fArbitraryEff[]r
         @ '[State Int, Trace, State Int])
      ($dArbitraryAction6_raJi
       `cast` ((ArbitraryAction
                  (((':)
                      <*>_N
                      <Int>_N
                      (Sym (Polysemy.Internal.Kind.D:R:Append[1]
                                <*>_N <'[()]>_N)))_N ; (Sym (Polysemy.Internal.Kind.D:R:Append[0]
                                                                 <*>_N
                                                                 <Int>_N
                                                                 <'[]>_N
                                                                 <'[()]>_N) ; ((Polysemy.Internal.Kind.Append
                                                                                  <*>_N
                                                                                  (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[3]
                                                                                            <Int>_N
                                                                                            <GHC.Generics.U1>_N) ; Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                                                                                            <GHC.Generics.C>_N
                                                                                                                            <'GHC.Generics.MetaCons
                                                                                                                               "Get"
                                                                                                                               'GHC.Generics.PrefixI
                                                                                                                               'False>_N
                                                                                                                            <('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                ((~~)
                                                                                                                                   Int)
                                                                                                                              'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                             Generics.Kind.:=>: GHC.Generics.U1>_N))
                                                                                  (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[2]
                                                                                            <()>_N
                                                                                            <GHC.Generics.M1
                                                                                               GHC.Generics.S
                                                                                               ('GHC.Generics.MetaSel
                                                                                                  'Nothing
                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                               (Generics.Kind.Field
                                                                                                  ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                     Int))>_N) ; Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                                                                                          <GHC.Generics.C>_N
                                                                                                                          <'GHC.Generics.MetaCons
                                                                                                                             "Put"
                                                                                                                             'GHC.Generics.PrefixI
                                                                                                                             'False>_N
                                                                                                                          <(('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                               (~~)
                                                                                                                             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                            'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                           ())
                                                                                                                           Generics.Kind.:=>: GHC.Generics.S1
                                                                                                                                                ('GHC.Generics.MetaSel
                                                                                                                                                   'Nothing
                                                                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                                                                (Generics.Kind.Field
                                                                                                                                                   ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                      Int))>_N)))_N ; (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[1]
                                                                                                                                                                                <GHC.Generics.M1
                                                                                                                                                                                   GHC.Generics.C
                                                                                                                                                                                   ('GHC.Generics.MetaCons
                                                                                                                                                                                      "Get"
                                                                                                                                                                                      'GHC.Generics.PrefixI
                                                                                                                                                                                      'False)
                                                                                                                                                                                   (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                       ((~~)
                                                                                                                                                                                          Int)
                                                                                                                                                                                     'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                                                                                    Generics.Kind.:=>: GHC.Generics.U1)>_N
                                                                                                                                                                                <GHC.Generics.M1
                                                                                                                                                                                   GHC.Generics.C
                                                                                                                                                                                   ('GHC.Generics.MetaCons
                                                                                                                                                                                      "Put"
                                                                                                                                                                                      'GHC.Generics.PrefixI
                                                                                                                                                                                      'False)
                                                                                                                                                                                   ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                        (~~)
                                                                                                                                                                                      'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                                                                                     'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                                                    ())
                                                                                                                                                                                    Generics.Kind.:=>: GHC.Generics.S1
                                                                                                                                                                                                         ('GHC.Generics.MetaSel
                                                                                                                                                                                                            'Nothing
                                                                                                                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                         (Generics.Kind.Field
                                                                                                                                                                                                            ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                               Int)))>_N) ; (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                                                                                                                                                                                                      <GHC.Generics.D>_N
                                                                                                                                                                                                                                      <'GHC.Generics.MetaData
                                                                                                                                                                                                                                         "State"
                                                                                                                                                                                                                                         "Polysemy.State"
                                                                                                                                                                                                                                         "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                                                                                                                                                                                                                                         'False>_N
                                                                                                                                                                                                                                      <GHC.Generics.C1
                                                                                                                                                                                                                                         ('GHC.Generics.MetaCons
                                                                                                                                                                                                                                            "Get"
                                                                                                                                                                                                                                            'GHC.Generics.PrefixI
                                                                                                                                                                                                                                            'False)
                                                                                                                                                                                                                                         (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                                                             ((~~)
                                                                                                                                                                                                                                                Int)
                                                                                                                                                                                                                                           'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                                                                                                                                          Generics.Kind.:=>: GHC.Generics.U1)
                                                                                                                                                                                                                                       GHC.Generics.:+: GHC.Generics.C1
                                                                                                                                                                                                                                                          ('GHC.Generics.MetaCons
                                                                                                                                                                                                                                                             "Put"
                                                                                                                                                                                                                                                             'GHC.Generics.PrefixI
                                                                                                                                                                                                                                                             'False)
                                                                                                                                                                                                                                                          ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                                                                               (~~)
                                                                                                                                                                                                                                                             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                                                                                                                                                            'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                                                                                                                           ())
                                                                                                                                                                                                                                                           Generics.Kind.:=>: GHC.Generics.S1
                                                                                                                                                                                                                                                                                ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                                                   'Nothing
                                                                                                                                                                                                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                                                (Generics.Kind.Field
                                                                                                                                                                                                                                                                                   ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                                                                                                      Int)))>_N) ; (Polysemy.Check.Arbitrary.GTypesOf
                                                                                                                                                                                                                                                                                                      (Sym (Polysemy.Check.Orphans.D:R:RepK->State0[0]
                                                                                                                                                                                                                                                                                                                <*
                                                                                                                                                                                                                                                                                                                 -> *>_N
                                                                                                                                                                                                                                                                                                                <Int>_N)))_N)))))
                  <State Int>_N
                  <'[State Int, Trace, State Int]>_N)_R
               :: ArbitraryAction
                    '[Int, ()] (State Int) '[State Int, Trace, State Int]
                  ~R# ArbitraryAction
                        (Polysemy.Check.Arbitrary.GTypesOf
                           (Generics.Kind.RepK (State Int)))
                        (State Int)
                        '[State Int, Trace, State Int]))

-- RHS size: {terms: 3, types: 60, coercions: 271, joins: 0/0}
$dArbitraryEff5_raJl
  :: ArbitraryEff '[Trace, State Int] '[State Int, Trace, State Int]
[GblId]
$dArbitraryEff5_raJl
  = Polysemy.Check.Arbitrary.$fArbitraryEff:r
      @ '[State Int]
      @ '[State Int, Trace, State Int]
      @ Trace
      $dArbitraryEff4_raJk
      ($dArbitraryAction_raIX
       `cast` ((ArbitraryAction
                  (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[2]
                            <()>_N
                            <GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  'Nothing
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (Generics.Kind.Field
                                  ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                     [Char]))>_N) ; (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                              <GHC.Generics.C>_N
                                                              <'GHC.Generics.MetaCons
                                                                 "Trace"
                                                                 'GHC.Generics.PrefixI
                                                                 'False>_N
                                                              <(('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                   (~~)
                                                                 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                               ())
                                                               Generics.Kind.:=>: GHC.Generics.S1
                                                                                    ('GHC.Generics.MetaSel
                                                                                       'Nothing
                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                       'GHC.Generics.DecidedLazy)
                                                                                    (Generics.Kind.Field
                                                                                       ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                          [Char]))>_N) ; (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                                                                                   <GHC.Generics.D>_N
                                                                                                                   <'GHC.Generics.MetaData
                                                                                                                      "Trace"
                                                                                                                      "Polysemy.Trace"
                                                                                                                      "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                                                                                                                      'False>_N
                                                                                                                   <GHC.Generics.M1
                                                                                                                      GHC.Generics.C
                                                                                                                      ('GHC.Generics.MetaCons
                                                                                                                         "Trace"
                                                                                                                         'GHC.Generics.PrefixI
                                                                                                                         'False)
                                                                                                                      ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                           (~~)
                                                                                                                         'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                        'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                       ())
                                                                                                                       Generics.Kind.:=>: GHC.Generics.S1
                                                                                                                                            ('GHC.Generics.MetaSel
                                                                                                                                               'Nothing
                                                                                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                                                                                               'GHC.Generics.NoSourceStrictness
                                                                                                                                               'GHC.Generics.DecidedLazy)
                                                                                                                                            (Generics.Kind.Field
                                                                                                                                               ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                  [Char])))>_N) ; (Polysemy.Check.Arbitrary.GTypesOf
                                                                                                                                                                     (Sym (Polysemy.Check.Orphans.D:R:RepK->Trace[0]
                                                                                                                                                                               <*
                                                                                                                                                                                -> *>_N)))_N)))
                  <Trace>_N
                  <'[State Int, Trace, State Int]>_N)_R
               :: ArbitraryAction '[()] Trace '[State Int, Trace, State Int]
                  ~R# ArbitraryAction
                        (Polysemy.Check.Arbitrary.GTypesOf (Generics.Kind.RepK Trace))
                        Trace
                        '[State Int, Trace, State Int]))

-- RHS size: {terms: 3, types: 71, coercions: 528, joins: 0/0}
$dArbitraryEff6_raJm :: ArbitraryEff TestEffs TestEffs
[GblId]
$dArbitraryEff6_raJm
  = Polysemy.Check.Arbitrary.$fArbitraryEff:r
      @ '[Trace, State Int]
      @ '[State Int, Trace, State Int]
      @ (State Int)
      $dArbitraryEff5_raJl
      ($dArbitraryAction6_raJi
       `cast` ((ArbitraryAction
                  (((':)
                      <*>_N
                      <Int>_N
                      (Sym (Polysemy.Internal.Kind.D:R:Append[1]
                                <*>_N <'[()]>_N)))_N ; (Sym (Polysemy.Internal.Kind.D:R:Append[0]
                                                                 <*>_N
                                                                 <Int>_N
                                                                 <'[]>_N
                                                                 <'[()]>_N) ; ((Polysemy.Internal.Kind.Append
                                                                                  <*>_N
                                                                                  (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[3]
                                                                                            <Int>_N
                                                                                            <GHC.Generics.U1>_N) ; Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                                                                                            <GHC.Generics.C>_N
                                                                                                                            <'GHC.Generics.MetaCons
                                                                                                                               "Get"
                                                                                                                               'GHC.Generics.PrefixI
                                                                                                                               'False>_N
                                                                                                                            <('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                ((~~)
                                                                                                                                   Int)
                                                                                                                              'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                             Generics.Kind.:=>: GHC.Generics.U1>_N))
                                                                                  (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[2]
                                                                                            <()>_N
                                                                                            <GHC.Generics.M1
                                                                                               GHC.Generics.S
                                                                                               ('GHC.Generics.MetaSel
                                                                                                  'Nothing
                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                               (Generics.Kind.Field
                                                                                                  ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                     Int))>_N) ; Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                                                                                          <GHC.Generics.C>_N
                                                                                                                          <'GHC.Generics.MetaCons
                                                                                                                             "Put"
                                                                                                                             'GHC.Generics.PrefixI
                                                                                                                             'False>_N
                                                                                                                          <(('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                               (~~)
                                                                                                                             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                            'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                           ())
                                                                                                                           Generics.Kind.:=>: GHC.Generics.S1
                                                                                                                                                ('GHC.Generics.MetaSel
                                                                                                                                                   'Nothing
                                                                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                                                                (Generics.Kind.Field
                                                                                                                                                   ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                      Int))>_N)))_N ; (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[1]
                                                                                                                                                                                <GHC.Generics.M1
                                                                                                                                                                                   GHC.Generics.C
                                                                                                                                                                                   ('GHC.Generics.MetaCons
                                                                                                                                                                                      "Get"
                                                                                                                                                                                      'GHC.Generics.PrefixI
                                                                                                                                                                                      'False)
                                                                                                                                                                                   (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                       ((~~)
                                                                                                                                                                                          Int)
                                                                                                                                                                                     'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                                                                                    Generics.Kind.:=>: GHC.Generics.U1)>_N
                                                                                                                                                                                <GHC.Generics.M1
                                                                                                                                                                                   GHC.Generics.C
                                                                                                                                                                                   ('GHC.Generics.MetaCons
                                                                                                                                                                                      "Put"
                                                                                                                                                                                      'GHC.Generics.PrefixI
                                                                                                                                                                                      'False)
                                                                                                                                                                                   ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                        (~~)
                                                                                                                                                                                      'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                                                                                     'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                                                    ())
                                                                                                                                                                                    Generics.Kind.:=>: GHC.Generics.S1
                                                                                                                                                                                                         ('GHC.Generics.MetaSel
                                                                                                                                                                                                            'Nothing
                                                                                                                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                         (Generics.Kind.Field
                                                                                                                                                                                                            ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                               Int)))>_N) ; (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                                                                                                                                                                                                      <GHC.Generics.D>_N
                                                                                                                                                                                                                                      <'GHC.Generics.MetaData
                                                                                                                                                                                                                                         "State"
                                                                                                                                                                                                                                         "Polysemy.State"
                                                                                                                                                                                                                                         "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                                                                                                                                                                                                                                         'False>_N
                                                                                                                                                                                                                                      <GHC.Generics.C1
                                                                                                                                                                                                                                         ('GHC.Generics.MetaCons
                                                                                                                                                                                                                                            "Get"
                                                                                                                                                                                                                                            'GHC.Generics.PrefixI
                                                                                                                                                                                                                                            'False)
                                                                                                                                                                                                                                         (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                                                             ((~~)
                                                                                                                                                                                                                                                Int)
                                                                                                                                                                                                                                           'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                                                                                                                                          Generics.Kind.:=>: GHC.Generics.U1)
                                                                                                                                                                                                                                       GHC.Generics.:+: GHC.Generics.C1
                                                                                                                                                                                                                                                          ('GHC.Generics.MetaCons
                                                                                                                                                                                                                                                             "Put"
                                                                                                                                                                                                                                                             'GHC.Generics.PrefixI
                                                                                                                                                                                                                                                             'False)
                                                                                                                                                                                                                                                          ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                                                                               (~~)
                                                                                                                                                                                                                                                             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                                                                                                                                                            'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                                                                                                                           ())
                                                                                                                                                                                                                                                           Generics.Kind.:=>: GHC.Generics.S1
                                                                                                                                                                                                                                                                                ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                                                   'Nothing
                                                                                                                                                                                                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                                                (Generics.Kind.Field
                                                                                                                                                                                                                                                                                   ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                                                                                                      Int)))>_N) ; (Polysemy.Check.Arbitrary.GTypesOf
                                                                                                                                                                                                                                                                                                      (Sym (Polysemy.Check.Orphans.D:R:RepK->State0[0]
                                                                                                                                                                                                                                                                                                                <*
                                                                                                                                                                                                                                                                                                                 -> *>_N
                                                                                                                                                                                                                                                                                                                <Int>_N)))_N)))))
                  <State Int>_N
                  <'[State Int, Trace, State Int]>_N)_R
               :: ArbitraryAction
                    '[Int, ()] (State Int) '[State Int, Trace, State Int]
                  ~R# ArbitraryAction
                        (Polysemy.Check.Arbitrary.GTypesOf
                           (Generics.Kind.RepK (State Int)))
                        (State Int)
                        '[State Int, Trace, State Int]))

-- RHS size: {terms: 10, types: 16, coercions: 0, joins: 0/0}
df4_raJn
  :: forall a. Eq a => Eq (Compose ((,) Int) ((,) [String]) a)
[GblId, Arity=1, Unf=OtherCon []]
df4_raJn
  = \ (@ a_aaCm) ($dEq_aaCn :: Eq a_aaCm) ->
      Data.Functor.Compose.$fEqCompose
        @ ((,) Int)
        @ ((,) [String])
        @ a_aaCm
        (Data.Functor.Classes.$fEq1(,)
           @ Int ghc-prim-0.5.3:GHC.Classes.$fEqInt)
        (Data.Functor.Classes.$fEq1(,)
           @ [String]
           (ghc-prim-0.5.3:GHC.Classes.$fEq[]
              @ [Char]
              (ghc-prim-0.5.3:GHC.Classes.$fEq[]
                 @ Char ghc-prim-0.5.3:GHC.Classes.$fEqChar)))
        $dEq_aaCn

-- RHS size: {terms: 10, types: 16, coercions: 0, joins: 0/0}
df5_raJo
  :: forall a. Show a => Show (Compose ((,) Int) ((,) [String]) a)
[GblId, Arity=1, Unf=OtherCon []]
df5_raJo
  = \ (@ a_aaCi) ($dShow5_aaCj :: Show a_aaCi) ->
      Data.Functor.Compose.$fShowCompose
        @ ((,) Int)
        @ ((,) [String])
        @ a_aaCi
        (Data.Functor.Classes.$fShow1(,) @ Int GHC.Show.$fShowInt)
        (Data.Functor.Classes.$fShow1(,)
           @ [String]
           (GHC.Show.$fShow[]
              @ [Char] (GHC.Show.$fShow[] @ Char GHC.Show.$fShowChar)))
        $dShow5_aaCj

-- RHS size: {terms: 20, types: 3, coercions: 0, joins: 0/0}
$dIP5_raJp :: GHC.Stack.Types.CallStack
[GblId]
$dIP5_raJp
  = GHC.Stack.Types.pushCallStack
      (ghc-prim-0.5.3:GHC.CString.unpackCString# "prop"#,
       GHC.Stack.Types.SrcLoc
         (ghc-prim-0.5.3:GHC.CString.unpackCString# "main"#)
         (ghc-prim-0.5.3:GHC.CString.unpackCString# "CommutativeSpec"#)
         (ghc-prim-0.5.3:GHC.CString.unpackCString#
            "/home/sandy/prj/polysemy-quickcheck-state-machine/test/CommutativeSpec.hs"#)
         (ghc-prim-0.5.3:GHC.Types.I# 21#)
         (ghc-prim-0.5.3:GHC.Types.I# 3#)
         (ghc-prim-0.5.3:GHC.Types.I# 21#)
         (ghc-prim-0.5.3:GHC.Types.I# 35#))
      GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 389,
              types: 13,273,
              coercions: 5,227,
              joins: 0/62}
spec :: Spec
[GblId]
spec
  = break<35>()
    >>
      @ (hspec-core-2.7.6:Test.Hspec.Core.Spec.Monad.SpecM ())
      (hspec-core-2.7.6:Test.Hspec.Core.Spec.Monad.$fMonadSpecM @ ())
      @ ()
      @ ()
      (break<8>()
       $ @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
         @ Property
         @ (hspec-core-2.7.6:Test.Hspec.Core.Spec.Monad.SpecM () ())
         (break<6>()
          prop
            @ Property
            ($dIP5_raJp
             `cast` (Sym (ghc-prim-0.5.3:GHC.Classes.N:IP[0]
                              <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                     :: GHC.Stack.Types.CallStack
                        ~R# (?callStack::GHC.Stack.Types.CallStack)))
            Test.QuickCheck.Property.$fTestableProperty
            (ghc-prim-0.5.3:GHC.CString.unpackCString#
               "State commutes with Trace"#))
         (break<7>()
          $ @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
            @ (forall a.
               Sem TestEffs a -> IO (Compose ((,) Int) ((,) [String]) a))
            @ Property
            (prepropCommutative
               @ '[State Int]
               @ '[Trace]
               @ TestEffs
               @ (Compose ((,) Int) ((,) [String]))
               df5_raJo
               df4_raJn
               $dArbitraryEff6_raJm
               $dArbitraryEff4_raJk
               $dArbitraryEff3_raJj)
            runTestEffs))
      (>>
         @ (hspec-core-2.7.6:Test.Hspec.Core.Spec.Monad.SpecM ())
         (hspec-core-2.7.6:Test.Hspec.Core.Spec.Monad.$fMonadSpecM @ ())
         @ ()
         @ ()
         (break<12>()
          $ @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
            @ Property
            @ (hspec-core-2.7.6:Test.Hspec.Core.Spec.Monad.SpecM () ())
            (break<9>()
             prop
               @ Property
               ($dIP4_raIe
                `cast` (Sym (ghc-prim-0.5.3:GHC.Classes.N:IP[0]
                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                        :: GHC.Stack.Types.CallStack
                           ~R# (?callStack::GHC.Stack.Types.CallStack)))
               Test.QuickCheck.Property.$fTestableProperty
               (ghc-prim-0.5.3:GHC.CString.unpackCString#
                  "State does not commute with itself"#))
            (break<11>()
             $ @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
               @ Property
               @ Property
               (expectFailure
                  @ Property Test.QuickCheck.Property.$fTestableProperty)
               (break<10>()
                $ @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
                  @ (forall a.
                     Sem TestEffs a -> IO (Compose ((,) Int) ((,) [String]) a))
                  @ Property
                  (prepropCommutative
                     @ '[State Int]
                     @ '[State Int]
                     @ TestEffs
                     @ (Compose ((,) Int) ((,) [String]))
                     df2_raIK
                     df_raIr
                     $dArbitraryEff6_raJm
                     $dArbitraryEff4_raJk
                     $dArbitraryEff4_raJk)
                  runTestEffs)))
         (>>
            @ (hspec-core-2.7.6:Test.Hspec.Core.Spec.Monad.SpecM ())
            (hspec-core-2.7.6:Test.Hspec.Core.Spec.Monad.$fMonadSpecM @ ())
            @ ()
            @ ()
            (break<20>()
             $ @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
               @ Property
               @ (hspec-core-2.7.6:Test.Hspec.Core.Spec.Monad.SpecM () ())
               (break<13>()
                prop
                  @ Property
                  ($dIP3_raId
                   `cast` (Sym (ghc-prim-0.5.3:GHC.Classes.N:IP[0]
                                    <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                           :: GHC.Stack.Types.CallStack
                              ~R# (?callStack::GHC.Stack.Types.CallStack)))
                  Test.QuickCheck.Property.$fTestableProperty
                  (ghc-prim-0.5.3:GHC.CString.unpackCString#
                     "Error does not commute with State (really: we can do Arbitrary stuff on Error)"#))
               (break<19>()
                $ @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
                  @ Property
                  @ Property
                  (expectFailure
                     @ Property Test.QuickCheck.Property.$fTestableProperty)
                  (break<18>()
                   $ @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
                     @ (forall a.
                        Sem '[Error Int, State Int] a
                        -> IO (Compose ((,) Int) (Either Int) a))
                     @ Property
                     (prepropCommutative
                        @ '[Error Int]
                        @ '[State Int]
                        @ '[Error Int, State Int]
                        @ (Compose ((,) Int) (Either Int))
                        df3_raIL
                        df1_raIs
                        $dArbitraryEff1_raJ2
                        $dArbitraryEff2_raJg
                        $dArbitraryEff_raJ0)
                     (\ (@ a_a8Ik) ->
                        . @ (Compose ((,) Int) (Either Int) a_a8Ik)
                          @ (IO (Compose ((,) Int) (Either Int) a_a8Ik))
                          @ (Sem '[Error Int, State Int] a_a8Ik)
                          (pure
                             @ IO
                             GHC.Base.$fApplicativeIO
                             @ (Compose ((,) Int) (Either Int) a_a8Ik))
                          (break<17>()
                           . @ (Int, Either Int a_a8Ik)
                             @ (Compose ((,) Int) (Either Int) a_a8Ik)
                             @ (Sem '[Error Int, State Int] a_a8Ik)
                             ((\ (v_B1 :: (Int, Either Int a_a8Ik)) -> v_B1)
                              `cast` (<(Int, Either Int a_a8Ik)>_R
                                      ->_R Sym (Data.Functor.Compose.N:Compose[0]
                                                    <*>_N
                                                    <*>_N
                                                    <(,) Int>_R
                                                    <Either Int>_N
                                                    <a_a8Ik>_N)
                                      :: ((Int, Either Int a_a8Ik) -> (Int, Either Int a_a8Ik))
                                         ~R# ((Int, Either Int a_a8Ik)
                                              -> Compose ((,) Int) (Either Int) a_a8Ik)))
                             (break<16>()
                              . @ (Sem '[] (Int, Either Int a_a8Ik))
                                @ (Int, Either Int a_a8Ik)
                                @ (Sem '[Error Int, State Int] a_a8Ik)
                                (run @ (Int, Either Int a_a8Ik))
                                (break<15>()
                                 . @ (Sem '[State Int] (Either Int a_a8Ik))
                                   @ (Sem '[] (Int, Either Int a_a8Ik))
                                   @ (Sem '[Error Int, State Int] a_a8Ik)
                                   (break<14>()
                                    runState
                                      @ Int
                                      @ '[]
                                      @ (Either Int a_a8Ik)
                                      (ghc-prim-0.5.3:GHC.Types.I# 0#))
                                   (runError @ Int @ '[State Int] @ a_a8Ik))))))))
            (let {
               all_commutative_tests_a6Yf :: [Property]
               [LclId]
               all_commutative_tests_a6Yf
                 = let {
                     $dGArbitraryK40_a9s8
                       :: GArbitraryK
                            (State Int)
                            (GHC.Generics.M1
                               GHC.Generics.C
                               ('GHC.Generics.MetaCons "Put" 'GHC.Generics.PrefixI 'False)
                               ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                                  'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                ())
                                Generics.Kind.:=>: GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        'Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (Generics.Kind.Field
                                                        ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                           Int))))
                            '[State Int, Input Int, Output Bool, Trace]
                            Int
                     [LclId]
                     $dGArbitraryK40_a9s8
                       = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
                           @ (State Int)
                           @ ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                                'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                               'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                              ())
                              Generics.Kind.:=>: GHC.Generics.S1
                                                   ('GHC.Generics.MetaSel
                                                      'Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (Generics.Kind.Field
                                                      ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                         Int)))
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ Int
                           @ GHC.Generics.C
                           @ ('GHC.Generics.MetaCons "Put" 'GHC.Generics.PrefixI 'False)
                           (Polysemy.Check.Arbitrary.$fGArbitraryKe:=>:ra
                              @ *
                              @ (State Int)
                              @ ()
                              @ (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (Generics.Kind.Field
                                      ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int)))
                              @ '[State Int, Input Int, Output Bool, Trace]
                              @ Int) } in
                   let {
                     $dGArbitraryK41_a9s9
                       :: GArbitraryK
                            (State Int)
                            (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
                              'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                             Generics.Kind.:=>: GHC.Generics.U1)
                            '[State Int, Input Int, Output Bool, Trace]
                            Int
                     [LclId]
                     $dGArbitraryK41_a9s9
                       = Polysemy.Check.Arbitrary.$fGArbitraryKe:=>:ra2
                           @ (State Int)
                           @ GHC.Generics.U1
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ Int
                           (Polysemy.Check.Arbitrary.$fGArbitraryKeU1ra
                              @ (State Int)
                              @ '[State Int, Input Int, Output Bool, Trace]
                              @ Int) } in
                   let {
                     $dGArbitraryK42_a9s7
                       :: GArbitraryK
                            (State Int)
                            (GHC.Generics.M1
                               GHC.Generics.C
                               ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
                               (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
                                 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                Generics.Kind.:=>: GHC.Generics.U1))
                            '[State Int, Input Int, Output Bool, Trace]
                            Int
                     [LclId]
                     $dGArbitraryK42_a9s7
                       = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
                           @ (State Int)
                           @ (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
                               'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                              Generics.Kind.:=>: GHC.Generics.U1)
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ Int
                           @ GHC.Generics.C
                           @ ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
                           $dGArbitraryK41_a9s9 } in
                   let {
                     $dGArbitraryK43_a9s6
                       :: GArbitraryK
                            (State Int)
                            (GHC.Generics.C1
                               ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
                               (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
                                 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                Generics.Kind.:=>: GHC.Generics.U1)
                             GHC.Generics.:+: GHC.Generics.C1
                                                ('GHC.Generics.MetaCons
                                                   "Put" 'GHC.Generics.PrefixI 'False)
                                                ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                                                   'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                  'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                 ())
                                                 Generics.Kind.:=>: GHC.Generics.S1
                                                                      ('GHC.Generics.MetaSel
                                                                         'Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (Generics.Kind.Field
                                                                         ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                            Int))))
                            '[State Int, Input Int, Output Bool, Trace]
                            Int
                     [LclId]
                     $dGArbitraryK43_a9s6
                       = Polysemy.Check.Arbitrary.$fGArbitraryKe:+:ra
                           @ (State Int)
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
                                (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
                                  'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                 Generics.Kind.:=>: GHC.Generics.U1))
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ Int
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons "Put" 'GHC.Generics.PrefixI 'False)
                                ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                                   'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                  'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                 ())
                                 Generics.Kind.:=>: GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         'Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (Generics.Kind.Field
                                                         ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                            Int))))
                           $dGArbitraryK42_a9s7
                           $dGArbitraryK40_a9s8 } in
                   let {
                     $dGArbitraryK44_a9s5
                       :: GArbitraryK
                            (State Int)
                            (GHC.Generics.D1
                               ('GHC.Generics.MetaData
                                  "State"
                                  "Polysemy.State"
                                  "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                                  'False)
                               (GHC.Generics.C1
                                  ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
                                  (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
                                    'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                   Generics.Kind.:=>: GHC.Generics.U1)
                                GHC.Generics.:+: GHC.Generics.C1
                                                   ('GHC.Generics.MetaCons
                                                      "Put" 'GHC.Generics.PrefixI 'False)
                                                   ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                        (~~)
                                                      'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                     'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                    ())
                                                    Generics.Kind.:=>: GHC.Generics.S1
                                                                         ('GHC.Generics.MetaSel
                                                                            'Nothing
                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                            'GHC.Generics.NoSourceStrictness
                                                                            'GHC.Generics.DecidedLazy)
                                                                         (Generics.Kind.Field
                                                                            ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                               Int)))))
                            '[State Int, Input Int, Output Bool, Trace]
                            Int
                     [LclId]
                     $dGArbitraryK44_a9s5
                       = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
                           @ (State Int)
                           @ (GHC.Generics.C1
                                ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
                                (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
                                  'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                 Generics.Kind.:=>: GHC.Generics.U1)
                              GHC.Generics.:+: GHC.Generics.C1
                                                 ('GHC.Generics.MetaCons
                                                    "Put" 'GHC.Generics.PrefixI 'False)
                                                 ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                      (~~)
                                                    'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                   'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                  ())
                                                  Generics.Kind.:=>: GHC.Generics.S1
                                                                       ('GHC.Generics.MetaSel
                                                                          'Nothing
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy)
                                                                       (Generics.Kind.Field
                                                                          ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                             Int))))
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ Int
                           @ GHC.Generics.D
                           @ ('GHC.Generics.MetaData
                                "State"
                                "Polysemy.State"
                                "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                                'False)
                           $dGArbitraryK43_a9s6 } in
                   let {
                     $dGArbitraryK45_a9s2
                       :: GArbitraryK
                            (State Int)
                            (Generics.Kind.Field
                               ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int))
                            '[State Int, Input Int, Output Bool, Trace]
                            ()
                     [LclId]
                     $dGArbitraryK45_a9s2
                       = Polysemy.Check.Arbitrary.$fGArbitraryKeFieldra
                           @ ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int)
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ ()
                           @ (State Int)
                           (Test.QuickCheck.Arbitrary.$fArbitraryInt
                            `cast` ((Arbitrary
                                       (Sym (kind-apply-0.3.2.0:Data.PolyKinded.Atom.D:R:Interpret[1]
                                                 <*>_N
                                                 <(* -> *) -> * -> *>_N
                                                 <Int>_N
                                                 <Sem '[State Int, Input Int, Output Bool, Trace]
                                                  'kind-apply-0.3.2.0:Data.PolyKinded.:&&: (()
                                                                                            'kind-apply-0.3.2.0:Data.PolyKinded.:&&: 'kind-apply-0.3.2.0:Data.PolyKinded.LoT0)>_N)))_R
                                    :: Arbitrary Int
                                       ~R# Arbitrary
                                             (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Interpret
                                                ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int)
                                                (Sem '[State Int, Input Int, Output Bool, Trace]
                                                 'kind-apply-0.3.2.0:Data.PolyKinded.:&&: (()
                                                                                           'kind-apply-0.3.2.0:Data.PolyKinded.:&&: 'kind-apply-0.3.2.0:Data.PolyKinded.LoT0))))) } in
                   let {
                     $dGArbitraryK46_a9s1
                       :: GArbitraryK
                            (State Int)
                            (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  'Nothing
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (Generics.Kind.Field
                                  ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int)))
                            '[State Int, Input Int, Output Bool, Trace]
                            ()
                     [LclId]
                     $dGArbitraryK46_a9s1
                       = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
                           @ (State Int)
                           @ (Generics.Kind.Field
                                ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int))
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ ()
                           @ GHC.Generics.S
                           @ ('GHC.Generics.MetaSel
                                'Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                           $dGArbitraryK45_a9s2 } in
                   let {
                     $dGArbitraryK47_a9s0
                       :: GArbitraryK
                            (State Int)
                            ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                               'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                              'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                             ())
                             Generics.Kind.:=>: GHC.Generics.S1
                                                  ('GHC.Generics.MetaSel
                                                     'Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (Generics.Kind.Field
                                                     ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                        Int)))
                            '[State Int, Input Int, Output Bool, Trace]
                            ()
                     [LclId]
                     $dGArbitraryK47_a9s0
                       = Polysemy.Check.Arbitrary.$fGArbitraryKe:=>:ra1
                           @ (State Int)
                           @ (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (Generics.Kind.Field
                                   ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Int)))
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ ()
                           $dGArbitraryK46_a9s1 } in
                   let {
                     $dGArbitraryK48_a9rY
                       :: GArbitraryK
                            (State Int)
                            (GHC.Generics.M1
                               GHC.Generics.C
                               ('GHC.Generics.MetaCons "Put" 'GHC.Generics.PrefixI 'False)
                               ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                                  'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                ())
                                Generics.Kind.:=>: GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        'Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (Generics.Kind.Field
                                                        ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                           Int))))
                            '[State Int, Input Int, Output Bool, Trace]
                            ()
                     [LclId]
                     $dGArbitraryK48_a9rY
                       = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
                           @ (State Int)
                           @ ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                                'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                               'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                              ())
                              Generics.Kind.:=>: GHC.Generics.S1
                                                   ('GHC.Generics.MetaSel
                                                      'Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (Generics.Kind.Field
                                                      ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                         Int)))
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ ()
                           @ GHC.Generics.C
                           @ ('GHC.Generics.MetaCons "Put" 'GHC.Generics.PrefixI 'False)
                           $dGArbitraryK47_a9s0 } in
                   let {
                     $dGArbitraryK49_a9rX
                       :: GArbitraryK
                            (State Int)
                            (GHC.Generics.M1
                               GHC.Generics.C
                               ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
                               (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
                                 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                Generics.Kind.:=>: GHC.Generics.U1))
                            '[State Int, Input Int, Output Bool, Trace]
                            ()
                     [LclId]
                     $dGArbitraryK49_a9rX
                       = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
                           @ (State Int)
                           @ (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
                               'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                              Generics.Kind.:=>: GHC.Generics.U1)
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ ()
                           @ GHC.Generics.C
                           @ ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
                           (Polysemy.Check.Arbitrary.$fGArbitraryKe:=>:ra0
                              @ *
                              @ (State Int)
                              @ Int
                              @ GHC.Generics.U1
                              @ '[State Int, Input Int, Output Bool, Trace]
                              @ ()) } in
                   let {
                     $dGArbitraryK50_a9rR
                       :: GArbitraryK
                            (State Int)
                            (GHC.Generics.C1
                               ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
                               (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
                                 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                Generics.Kind.:=>: GHC.Generics.U1)
                             GHC.Generics.:+: GHC.Generics.C1
                                                ('GHC.Generics.MetaCons
                                                   "Put" 'GHC.Generics.PrefixI 'False)
                                                ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                                                   'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                  'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                 ())
                                                 Generics.Kind.:=>: GHC.Generics.S1
                                                                      ('GHC.Generics.MetaSel
                                                                         'Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (Generics.Kind.Field
                                                                         ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                            Int))))
                            '[State Int, Input Int, Output Bool, Trace]
                            ()
                     [LclId]
                     $dGArbitraryK50_a9rR
                       = Polysemy.Check.Arbitrary.$fGArbitraryKe:+:ra
                           @ (State Int)
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
                                (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
                                  'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                 Generics.Kind.:=>: GHC.Generics.U1))
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ ()
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons "Put" 'GHC.Generics.PrefixI 'False)
                                ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                                   'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                  'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                 ())
                                 Generics.Kind.:=>: GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         'Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (Generics.Kind.Field
                                                         ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                            Int))))
                           $dGArbitraryK49_a9rX
                           $dGArbitraryK48_a9rY } in
                   let {
                     $dGArbitraryK51_a9rQ
                       :: GArbitraryK
                            (State Int)
                            (GHC.Generics.D1
                               ('GHC.Generics.MetaData
                                  "State"
                                  "Polysemy.State"
                                  "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                                  'False)
                               (GHC.Generics.C1
                                  ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
                                  (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
                                    'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                   Generics.Kind.:=>: GHC.Generics.U1)
                                GHC.Generics.:+: GHC.Generics.C1
                                                   ('GHC.Generics.MetaCons
                                                      "Put" 'GHC.Generics.PrefixI 'False)
                                                   ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                        (~~)
                                                      'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                     'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                    ())
                                                    Generics.Kind.:=>: GHC.Generics.S1
                                                                         ('GHC.Generics.MetaSel
                                                                            'Nothing
                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                            'GHC.Generics.NoSourceStrictness
                                                                            'GHC.Generics.DecidedLazy)
                                                                         (Generics.Kind.Field
                                                                            ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                               Int)))))
                            '[State Int, Input Int, Output Bool, Trace]
                            ()
                     [LclId]
                     $dGArbitraryK51_a9rQ
                       = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
                           @ (State Int)
                           @ (GHC.Generics.C1
                                ('GHC.Generics.MetaCons "Get" 'GHC.Generics.PrefixI 'False)
                                (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
                                  'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                 Generics.Kind.:=>: GHC.Generics.U1)
                              GHC.Generics.:+: GHC.Generics.C1
                                                 ('GHC.Generics.MetaCons
                                                    "Put" 'GHC.Generics.PrefixI 'False)
                                                 ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                      (~~)
                                                    'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                   'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                  ())
                                                  Generics.Kind.:=>: GHC.Generics.S1
                                                                       ('GHC.Generics.MetaSel
                                                                          'Nothing
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy)
                                                                       (Generics.Kind.Field
                                                                          ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                             Int))))
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ ()
                           @ GHC.Generics.D
                           @ ('GHC.Generics.MetaData
                                "State"
                                "Polysemy.State"
                                "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                                'False)
                           $dGArbitraryK50_a9rR } in
                   let {
                     $dGArbitraryK52_a9r9
                       :: GArbitraryK
                            (Input Int)
                            (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
                              'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                             Generics.Kind.:=>: GHC.Generics.U1)
                            '[State Int, Input Int, Output Bool, Trace]
                            Int
                     [LclId]
                     $dGArbitraryK52_a9r9
                       = Polysemy.Check.Arbitrary.$fGArbitraryKe:=>:ra2
                           @ (Input Int)
                           @ GHC.Generics.U1
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ Int
                           (Polysemy.Check.Arbitrary.$fGArbitraryKeU1ra
                              @ (Input Int)
                              @ '[State Int, Input Int, Output Bool, Trace]
                              @ Int) } in
                   let {
                     $dGArbitraryK53_a9r8
                       :: GArbitraryK
                            (Input Int)
                            (GHC.Generics.M1
                               GHC.Generics.C
                               ('GHC.Generics.MetaCons "Input" 'GHC.Generics.PrefixI 'False)
                               (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
                                 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                Generics.Kind.:=>: GHC.Generics.U1))
                            '[State Int, Input Int, Output Bool, Trace]
                            Int
                     [LclId]
                     $dGArbitraryK53_a9r8
                       = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
                           @ (Input Int)
                           @ (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
                               'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                              Generics.Kind.:=>: GHC.Generics.U1)
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ Int
                           @ GHC.Generics.C
                           @ ('GHC.Generics.MetaCons "Input" 'GHC.Generics.PrefixI 'False)
                           $dGArbitraryK52_a9r9 } in
                   let {
                     $dGArbitraryK54_a9r7
                       :: GArbitraryK
                            (Input Int)
                            (GHC.Generics.D1
                               ('GHC.Generics.MetaData
                                  "Input"
                                  "Polysemy.Input"
                                  "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                                  'False)
                               (GHC.Generics.C1
                                  ('GHC.Generics.MetaCons "Input" 'GHC.Generics.PrefixI 'False)
                                  (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
                                    'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                   Generics.Kind.:=>: GHC.Generics.U1)))
                            '[State Int, Input Int, Output Bool, Trace]
                            Int
                     [LclId]
                     $dGArbitraryK54_a9r7
                       = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
                           @ (Input Int)
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons "Input" 'GHC.Generics.PrefixI 'False)
                                (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon ((~~) Int)
                                  'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                 Generics.Kind.:=>: GHC.Generics.U1))
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ Int
                           @ GHC.Generics.D
                           @ ('GHC.Generics.MetaData
                                "Input"
                                "Polysemy.Input"
                                "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                                'False)
                           $dGArbitraryK53_a9r8 } in
                   let {
                     $dFind3_a9qS
                       :: Polysemy.Internal.Union.Find
                            (Input Int) '[State Int, Input Int, Output Bool, Trace]
                     [LclId]
                     $dFind3_a9qS
                       = Polysemy.Internal.Union.$fFindat:
                           @ ((* -> *) -> * -> *)
                           @ (Input Int)
                           @ '[Input Int, Output Bool, Trace]
                           @ (State Int)
                           (Polysemy.Internal.Union.$fFindat:0
                              @ ((* -> *) -> * -> *) @ (Input Int) @ '[Output Bool, Trace]) } in
                   let {
                     $dShow5_a9rC
                       :: Show
                            (State Int (Sem '[State Int, Input Int, Output Bool, Trace]) ())
                     [LclId]
                     $dShow5_a9rC
                       = Polysemy.Check.Orphans.$fShowState
                           @ Int
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ ()
                           GHC.Show.$fShowInt } in
                   let {
                     $dShow6_a9rx
                       :: Show
                            (State Int (Sem '[State Int, Input Int, Output Bool, Trace]) Int)
                     [LclId]
                     $dShow6_a9rx
                       = Polysemy.Check.Orphans.$fShowState
                           @ Int
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ Int
                           GHC.Show.$fShowInt } in
                   let {
                     df6_a8LV
                       :: forall a.
                          Eq a =>
                          Eq (Compose (Compose ((,) [String]) ((,) [Bool])) ((,) Int) a)
                     [LclId, Arity=1, Unf=OtherCon []]
                     df6_a8LV
                       = \ (@ a_a9sn) ($dEq_a9so :: Eq a_a9sn) ->
                           Data.Functor.Compose.$fEqCompose
                             @ (Compose ((,) [String]) ((,) [Bool]))
                             @ ((,) Int)
                             @ a_a9sn
                             (Data.Functor.Compose.$fEq1Compose
                                @ ((,) [String])
                                @ ((,) [Bool])
                                (Data.Functor.Classes.$fEq1(,)
                                   @ [String]
                                   (ghc-prim-0.5.3:GHC.Classes.$fEq[]
                                      @ [Char]
                                      (ghc-prim-0.5.3:GHC.Classes.$fEq[]
                                         @ Char ghc-prim-0.5.3:GHC.Classes.$fEqChar)))
                                (Data.Functor.Classes.$fEq1(,)
                                   @ [Bool]
                                   (ghc-prim-0.5.3:GHC.Classes.$fEq[]
                                      @ Bool ghc-prim-0.5.3:GHC.Classes.$fEqBool)))
                             (Data.Functor.Classes.$fEq1(,)
                                @ Int ghc-prim-0.5.3:GHC.Classes.$fEqInt)
                             $dEq_a9so } in
                   let {
                     $dGArbitraryK55_a9qt
                       :: GArbitraryK
                            (Output Bool)
                            (Generics.Kind.Field
                               ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Bool))
                            '[State Int, Input Int, Output Bool, Trace]
                            ()
                     [LclId]
                     $dGArbitraryK55_a9qt
                       = Polysemy.Check.Arbitrary.$fGArbitraryKeFieldra
                           @ ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Bool)
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ ()
                           @ (Output Bool)
                           (Test.QuickCheck.Arbitrary.$fArbitraryBool
                            `cast` ((Arbitrary
                                       (Sym (kind-apply-0.3.2.0:Data.PolyKinded.Atom.D:R:Interpret[1]
                                                 <*>_N
                                                 <(* -> *) -> * -> *>_N
                                                 <Bool>_N
                                                 <Sem '[State Int, Input Int, Output Bool, Trace]
                                                  'kind-apply-0.3.2.0:Data.PolyKinded.:&&: (()
                                                                                            'kind-apply-0.3.2.0:Data.PolyKinded.:&&: 'kind-apply-0.3.2.0:Data.PolyKinded.LoT0)>_N)))_R
                                    :: Arbitrary Bool
                                       ~R# Arbitrary
                                             (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Interpret
                                                ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Bool)
                                                (Sem '[State Int, Input Int, Output Bool, Trace]
                                                 'kind-apply-0.3.2.0:Data.PolyKinded.:&&: (()
                                                                                           'kind-apply-0.3.2.0:Data.PolyKinded.:&&: 'kind-apply-0.3.2.0:Data.PolyKinded.LoT0))))) } in
                   let {
                     $dGArbitraryK56_a9qs
                       :: GArbitraryK
                            (Output Bool)
                            (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  'Nothing
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (Generics.Kind.Field
                                  ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Bool)))
                            '[State Int, Input Int, Output Bool, Trace]
                            ()
                     [LclId]
                     $dGArbitraryK56_a9qs
                       = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
                           @ (Output Bool)
                           @ (Generics.Kind.Field
                                ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Bool))
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ ()
                           @ GHC.Generics.S
                           @ ('GHC.Generics.MetaSel
                                'Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                           $dGArbitraryK55_a9qt } in
                   let {
                     $dGArbitraryK57_a9qr
                       :: GArbitraryK
                            (Output Bool)
                            ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                               'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                              'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                             ())
                             Generics.Kind.:=>: GHC.Generics.S1
                                                  ('GHC.Generics.MetaSel
                                                     'Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (Generics.Kind.Field
                                                     ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                        Bool)))
                            '[State Int, Input Int, Output Bool, Trace]
                            ()
                     [LclId]
                     $dGArbitraryK57_a9qr
                       = Polysemy.Check.Arbitrary.$fGArbitraryKe:=>:ra1
                           @ (Output Bool)
                           @ (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (Generics.Kind.Field
                                   ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon Bool)))
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ ()
                           $dGArbitraryK56_a9qs } in
                   let {
                     $dGArbitraryK58_a9qq
                       :: GArbitraryK
                            (Output Bool)
                            (GHC.Generics.M1
                               GHC.Generics.C
                               ('GHC.Generics.MetaCons "Output" 'GHC.Generics.PrefixI 'False)
                               ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                                  'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                ())
                                Generics.Kind.:=>: GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        'Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (Generics.Kind.Field
                                                        ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                           Bool))))
                            '[State Int, Input Int, Output Bool, Trace]
                            ()
                     [LclId]
                     $dGArbitraryK58_a9qq
                       = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
                           @ (Output Bool)
                           @ ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                                'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                               'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                              ())
                              Generics.Kind.:=>: GHC.Generics.S1
                                                   ('GHC.Generics.MetaSel
                                                      'Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (Generics.Kind.Field
                                                      ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                         Bool)))
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ ()
                           @ GHC.Generics.C
                           @ ('GHC.Generics.MetaCons "Output" 'GHC.Generics.PrefixI 'False)
                           $dGArbitraryK57_a9qr } in
                   let {
                     $dGArbitraryK59_a9qp
                       :: GArbitraryK
                            (Output Bool)
                            (GHC.Generics.D1
                               ('GHC.Generics.MetaData
                                  "Output"
                                  "Polysemy.Output"
                                  "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                                  'False)
                               (GHC.Generics.C1
                                  ('GHC.Generics.MetaCons "Output" 'GHC.Generics.PrefixI 'False)
                                  ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                                     'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                    'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                   ())
                                   Generics.Kind.:=>: GHC.Generics.S1
                                                        ('GHC.Generics.MetaSel
                                                           'Nothing
                                                           'GHC.Generics.NoSourceUnpackedness
                                                           'GHC.Generics.NoSourceStrictness
                                                           'GHC.Generics.DecidedLazy)
                                                        (Generics.Kind.Field
                                                           ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                              Bool)))))
                            '[State Int, Input Int, Output Bool, Trace]
                            ()
                     [LclId]
                     $dGArbitraryK59_a9qp
                       = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
                           @ (Output Bool)
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons "Output" 'GHC.Generics.PrefixI 'False)
                                ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                                   'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                  'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                 ())
                                 Generics.Kind.:=>: GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         'Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (Generics.Kind.Field
                                                         ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                            Bool))))
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ ()
                           @ GHC.Generics.D
                           @ ('GHC.Generics.MetaData
                                "Output"
                                "Polysemy.Output"
                                "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                                'False)
                           $dGArbitraryK58_a9qq } in
                   let {
                     df7_a8LU
                       :: forall a.
                          Show a =>
                          Show (Compose (Compose ((,) [String]) ((,) [Bool])) ((,) Int) a)
                     [LclId, Arity=1, Unf=OtherCon []]
                     df7_a8LU
                       = \ (@ a_a9sj) ($dShow7_a9sk :: Show a_a9sj) ->
                           Data.Functor.Compose.$fShowCompose
                             @ (Compose ((,) [String]) ((,) [Bool]))
                             @ ((,) Int)
                             @ a_a9sj
                             (Data.Functor.Compose.$fShow1Compose
                                @ ((,) [String])
                                @ ((,) [Bool])
                                (Data.Functor.Classes.$fShow1(,)
                                   @ [String]
                                   (GHC.Show.$fShow[]
                                      @ [Char] (GHC.Show.$fShow[] @ Char GHC.Show.$fShowChar)))
                                (Data.Functor.Classes.$fShow1(,)
                                   @ [Bool] (GHC.Show.$fShow[] @ Bool GHC.Show.$fShowBool)))
                             (Data.Functor.Classes.$fShow1(,) @ Int GHC.Show.$fShowInt)
                             $dShow7_a9sk } in
                   let {
                     $dShow7_a9q8
                       :: Show
                            (Output Bool (Sem '[State Int, Input Int, Output Bool, Trace]) ())
                     [LclId]
                     $dShow7_a9q8
                       = Polysemy.Check.Orphans.$fShowOutput
                           @ Bool
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ ()
                           GHC.Show.$fShowBool } in
                   let {
                     $dFind4_a9qd
                       :: Polysemy.Internal.Union.Find
                            (Output Bool) '[Input Int, Output Bool, Trace]
                     [LclId]
                     $dFind4_a9qd
                       = Polysemy.Internal.Union.$fFindat:
                           @ ((* -> *) -> * -> *)
                           @ (Output Bool)
                           @ '[Output Bool, Trace]
                           @ (Input Int)
                           (Polysemy.Internal.Union.$fFindat:0
                              @ ((* -> *) -> * -> *) @ (Output Bool) @ '[Trace]) } in
                   let {
                     $dFind5_a9qc
                       :: Polysemy.Internal.Union.Find
                            (Output Bool) '[State Int, Input Int, Output Bool, Trace]
                     [LclId]
                     $dFind5_a9qc
                       = Polysemy.Internal.Union.$fFindat:
                           @ ((* -> *) -> * -> *)
                           @ (Output Bool)
                           @ '[Input Int, Output Bool, Trace]
                           @ (State Int)
                           $dFind4_a9qd } in
                   let {
                     $dArbitrary3_a9pX :: Arbitrary [Char]
                     [LclId]
                     $dArbitrary3_a9pX
                       = Test.QuickCheck.Arbitrary.$fArbitrary[]
                           @ Char Test.QuickCheck.Arbitrary.$fArbitraryChar } in
                   let {
                     $dGArbitraryK60_a9p7
                       :: GArbitraryK
                            Trace
                            (Generics.Kind.Field
                               ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon [Char]))
                            '[State Int, Input Int, Output Bool, Trace]
                            ()
                     [LclId]
                     $dGArbitraryK60_a9p7
                       = Polysemy.Check.Arbitrary.$fGArbitraryKeFieldra
                           @ ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon [Char])
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ ()
                           @ Trace
                           ($dArbitrary3_a9pX
                            `cast` ((Arbitrary
                                       (Sym (kind-apply-0.3.2.0:Data.PolyKinded.Atom.D:R:Interpret[1]
                                                 <*>_N
                                                 <(* -> *) -> * -> *>_N
                                                 <[Char]>_N
                                                 <Sem '[State Int, Input Int, Output Bool, Trace]
                                                  'kind-apply-0.3.2.0:Data.PolyKinded.:&&: (()
                                                                                            'kind-apply-0.3.2.0:Data.PolyKinded.:&&: 'kind-apply-0.3.2.0:Data.PolyKinded.LoT0)>_N)))_R
                                    :: Arbitrary [Char]
                                       ~R# Arbitrary
                                             (kind-apply-0.3.2.0:Data.PolyKinded.Atom.Interpret
                                                ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                   [Char])
                                                (Sem '[State Int, Input Int, Output Bool, Trace]
                                                 'kind-apply-0.3.2.0:Data.PolyKinded.:&&: (()
                                                                                           'kind-apply-0.3.2.0:Data.PolyKinded.:&&: 'kind-apply-0.3.2.0:Data.PolyKinded.LoT0))))) } in
                   let {
                     $dGArbitraryK61_a9p6
                       :: GArbitraryK
                            Trace
                            (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  'Nothing
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (Generics.Kind.Field
                                  ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon [Char])))
                            '[State Int, Input Int, Output Bool, Trace]
                            ()
                     [LclId]
                     $dGArbitraryK61_a9p6
                       = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
                           @ Trace
                           @ (Generics.Kind.Field
                                ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon [Char]))
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ ()
                           @ GHC.Generics.S
                           @ ('GHC.Generics.MetaSel
                                'Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                           $dGArbitraryK60_a9p7 } in
                   let {
                     $dGArbitraryK62_a9oA
                       :: GArbitraryK
                            Trace
                            ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                               'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                              'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                             ())
                             Generics.Kind.:=>: GHC.Generics.S1
                                                  ('GHC.Generics.MetaSel
                                                     'Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (Generics.Kind.Field
                                                     ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                        [Char])))
                            '[State Int, Input Int, Output Bool, Trace]
                            ()
                     [LclId]
                     $dGArbitraryK62_a9oA
                       = Polysemy.Check.Arbitrary.$fGArbitraryKe:=>:ra1
                           @ Trace
                           @ (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (Generics.Kind.Field
                                   ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon [Char])))
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ ()
                           $dGArbitraryK61_a9p6 } in
                   let {
                     $dGArbitraryK63_a9oz
                       :: GArbitraryK
                            Trace
                            (GHC.Generics.M1
                               GHC.Generics.C
                               ('GHC.Generics.MetaCons "Trace" 'GHC.Generics.PrefixI 'False)
                               ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                                  'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                ())
                                Generics.Kind.:=>: GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        'Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (Generics.Kind.Field
                                                        ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                           [Char]))))
                            '[State Int, Input Int, Output Bool, Trace]
                            ()
                     [LclId]
                     $dGArbitraryK63_a9oz
                       = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
                           @ Trace
                           @ ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                                'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                               'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                              ())
                              Generics.Kind.:=>: GHC.Generics.S1
                                                   ('GHC.Generics.MetaSel
                                                      'Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (Generics.Kind.Field
                                                      ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                         [Char])))
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ ()
                           @ GHC.Generics.C
                           @ ('GHC.Generics.MetaCons "Trace" 'GHC.Generics.PrefixI 'False)
                           $dGArbitraryK62_a9oA } in
                   let {
                     $dGArbitraryK64_a9os
                       :: GArbitraryK
                            Trace
                            (GHC.Generics.D1
                               ('GHC.Generics.MetaData
                                  "Trace"
                                  "Polysemy.Trace"
                                  "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                                  'False)
                               (GHC.Generics.C1
                                  ('GHC.Generics.MetaCons "Trace" 'GHC.Generics.PrefixI 'False)
                                  ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                                     'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                    'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                   ())
                                   Generics.Kind.:=>: GHC.Generics.S1
                                                        ('GHC.Generics.MetaSel
                                                           'Nothing
                                                           'GHC.Generics.NoSourceUnpackedness
                                                           'GHC.Generics.NoSourceStrictness
                                                           'GHC.Generics.DecidedLazy)
                                                        (Generics.Kind.Field
                                                           ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                              [Char])))))
                            '[State Int, Input Int, Output Bool, Trace]
                            ()
                     [LclId]
                     $dGArbitraryK64_a9os
                       = Polysemy.Check.Arbitrary.$fGArbitraryKeM1ra
                           @ Trace
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons "Trace" 'GHC.Generics.PrefixI 'False)
                                ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                                   'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                  'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                 ())
                                 Generics.Kind.:=>: GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         'Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (Generics.Kind.Field
                                                         ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                            [Char]))))
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ ()
                           @ GHC.Generics.D
                           @ ('GHC.Generics.MetaData
                                "Trace"
                                "Polysemy.Trace"
                                "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                                'False)
                           $dGArbitraryK63_a9oz } in
                   let {
                     $dFind6_a9ol
                       :: Polysemy.Internal.Union.Find Trace '[Output Bool, Trace]
                     [LclId]
                     $dFind6_a9ol
                       = Polysemy.Internal.Union.$fFindat:
                           @ ((* -> *) -> * -> *)
                           @ Trace
                           @ '[Trace]
                           @ (Output Bool)
                           (Polysemy.Internal.Union.$fFindat:0
                              @ ((* -> *) -> * -> *) @ Trace @ '[]) } in
                   let {
                     $dFind7_a9ok
                       :: Polysemy.Internal.Union.Find
                            Trace '[Input Int, Output Bool, Trace]
                     [LclId]
                     $dFind7_a9ok
                       = Polysemy.Internal.Union.$fFindat:
                           @ ((* -> *) -> * -> *)
                           @ Trace
                           @ '[Output Bool, Trace]
                           @ (Input Int)
                           $dFind6_a9ol } in
                   let {
                     $dFind8_a9oa
                       :: Polysemy.Internal.Union.Find
                            Trace '[State Int, Input Int, Output Bool, Trace]
                     [LclId]
                     $dFind8_a9oa
                       = Polysemy.Internal.Union.$fFindat:
                           @ ((* -> *) -> * -> *)
                           @ Trace
                           @ '[Input Int, Output Bool, Trace]
                           @ (State Int)
                           $dFind7_a9ok } in
                   let {
                     $d~1_a9ob :: '() ~ '()
                     [LclId, Unf=OtherCon []]
                     $d~1_a9ob
                       = ghc-prim-0.5.3:GHC.Types.Eq#
                           @ ()
                           @ '()
                           @ '()
                           @~ (<'()>_N :: '() ghc-prim-0.5.3:GHC.Prim.~# '()) } in
                   let {
                     $d(%,%)5_a9qb
                       :: (Polysemy.Internal.Union.Find
                             (Output Bool) '[State Int, Input Int, Output Bool, Trace],
                           '() ~ '())
                     [LclId, Unf=OtherCon []]
                     $d(%,%)5_a9qb = ($dFind5_a9qc, $d~1_a9ob) } in
                   let {
                     $d(%,%)6_a9qR
                       :: (Polysemy.Internal.Union.Find
                             (Input Int) '[State Int, Input Int, Output Bool, Trace],
                           '() ~ '())
                     [LclId, Unf=OtherCon []]
                     $d(%,%)6_a9qR = ($dFind3_a9qS, $d~1_a9ob) } in
                   let {
                     $dArbitraryAction7_a9qI
                       :: ArbitraryAction
                            '[Int] (Input Int) '[State Int, Input Int, Output Bool, Trace]
                     [LclId]
                     $dArbitraryAction7_a9qI
                       = Polysemy.Check.Arbitrary.$fArbitraryAction:er
                           @ '[]
                           @ (Input Int)
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ Int
                           (Polysemy.Check.Arbitrary.$fArbitraryAction[]er
                              @ (Input Int) @ '[State Int, Input Int, Output Bool, Trace])
                           ghc-prim-0.5.3:GHC.Classes.$fEqInt
                           GHC.Show.$fShowInt
                           ($d(%,%)6_a9qR
                            `cast` ((ghc-prim-0.5.3:GHC.Classes.(%,%)
                                       <Polysemy.Internal.Union.Find
                                          (Input Int) '[State Int, Input Int, Output Bool, Trace]>_N
                                       ((~)
                                          <()>_N
                                          (Sym (Polysemy.Internal.Union.D:R:LocateEffect[1]
                                                    <(* -> *) -> * -> *>_N
                                                    <Input Int>_N
                                                    <'[Output Bool,
                                                       Trace]>_N) ; Sym (Polysemy.Internal.Union.D:R:LocateEffect[2]
                                                                             <(* -> *) -> * -> *>_N
                                                                             <Input Int>_N
                                                                             <State Int>_N
                                                                             <'[Input Int,
                                                                                Output Bool,
                                                                                Trace]>_N))
                                          <'()>_N)_N)_R
                                    :: (Polysemy.Internal.Union.Find
                                          (Input Int) '[State Int, Input Int, Output Bool, Trace],
                                        '() ~ '())
                                       ~R# (Polysemy.Internal.Union.Find
                                              (Input Int)
                                              '[State Int, Input Int, Output Bool, Trace],
                                            Polysemy.Internal.Union.LocateEffect
                                              (Input Int)
                                              '[State Int, Input Int, Output Bool, Trace]
                                            ~ '())))
                           (Polysemy.Check.Orphans.$fShowInput
                              @ * @ Int @ '[State Int, Input Int, Output Bool, Trace] @ Int)
                           (Polysemy.Check.Orphans.$fGenericK->Input0 @ * @ (* -> *) @ Int)
                           Test.QuickCheck.Arbitrary.$fCoArbitraryInt
                           ($dGArbitraryK54_a9r7
                            `cast` ((GArbitraryK
                                       <Input Int>_N
                                       (Sym (Polysemy.Check.Orphans.D:R:RepK->Input0[0]
                                                 <*>_N <* -> *>_N <Int>_N))
                                       <'[State Int, Input Int, Output Bool, Trace]>_N
                                       <Int>_N)_R
                                    :: GArbitraryK
                                         (Input Int)
                                         (GHC.Generics.D1
                                            ('GHC.Generics.MetaData
                                               "Input"
                                               "Polysemy.Input"
                                               "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                                               'False)
                                            (GHC.Generics.C1
                                               ('GHC.Generics.MetaCons
                                                  "Input" 'GHC.Generics.PrefixI 'False)
                                               (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                   ((~~) Int)
                                                 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                Generics.Kind.:=>: GHC.Generics.U1)))
                                         '[State Int, Input Int, Output Bool, Trace]
                                         Int
                                       ~R# GArbitraryK
                                             (Input Int)
                                             (Generics.Kind.RepK (Input Int))
                                             '[State Int, Input Int, Output Bool, Trace]
                                             Int)) } in
                   let {
                     $d(%,%)7_a9rF
                       :: (Polysemy.Internal.Union.Find
                             (State Int) '[State Int, Input Int, Output Bool, Trace],
                           '() ~ '())
                     [LclId, Unf=OtherCon []]
                     $d(%,%)7_a9rF
                       = (Polysemy.Internal.Union.$fFindat:0
                            @ ((* -> *) -> * -> *)
                            @ (State Int)
                            @ '[Input Int, Output Bool, Trace],
                          $d~1_a9ob) } in
                   let {
                     $d(%,%)8_a9o9
                       :: (Polysemy.Internal.Union.Find
                             Trace '[State Int, Input Int, Output Bool, Trace],
                           '() ~ '())
                     [LclId, Unf=OtherCon []]
                     $d(%,%)8_a9o9 = ($dFind8_a9oa, $d~1_a9ob) } in
                   let {
                     $d(%,%)9_a9sD
                       :: ((Polysemy.Internal.Union.Find
                              Trace '[State Int, Input Int, Output Bool, Trace],
                            '() ~ '()),
                           () :: Constraint)
                     [LclId, Unf=OtherCon []]
                     $d(%,%)9_a9sD
                       = ($d(%,%)8_a9o9, ghc-prim-0.5.3:GHC.Classes.C:(%%)) } in
                   let {
                     $d(%,%)10_a9sC
                       :: ((Polysemy.Internal.Union.Find
                              (Output Bool) '[State Int, Input Int, Output Bool, Trace],
                            '() ~ '()),
                           ((Polysemy.Internal.Union.Find
                               Trace '[State Int, Input Int, Output Bool, Trace],
                             '() ~ '()),
                            () :: Constraint))
                     [LclId, Unf=OtherCon []]
                     $d(%,%)10_a9sC = ($d(%,%)5_a9qb, $d(%,%)9_a9sD) } in
                   let {
                     $d(%,%)11_a9sB
                       :: ((Polysemy.Internal.Union.Find
                              (Input Int) '[State Int, Input Int, Output Bool, Trace],
                            '() ~ '()),
                           ((Polysemy.Internal.Union.Find
                               (Output Bool) '[State Int, Input Int, Output Bool, Trace],
                             '() ~ '()),
                            ((Polysemy.Internal.Union.Find
                                Trace '[State Int, Input Int, Output Bool, Trace],
                              '() ~ '()),
                             () :: Constraint)))
                     [LclId, Unf=OtherCon []]
                     $d(%,%)11_a9sB = ($d(%,%)6_a9qR, $d(%,%)10_a9sC) } in
                   let {
                     $d(%,%)12_a9sA
                       :: ((Polysemy.Internal.Union.Find
                              (State Int) '[State Int, Input Int, Output Bool, Trace],
                            '() ~ '()),
                           ((Polysemy.Internal.Union.Find
                               (Input Int) '[State Int, Input Int, Output Bool, Trace],
                             '() ~ '()),
                            ((Polysemy.Internal.Union.Find
                                (Output Bool) '[State Int, Input Int, Output Bool, Trace],
                              '() ~ '()),
                             ((Polysemy.Internal.Union.Find
                                 Trace '[State Int, Input Int, Output Bool, Trace],
                               '() ~ '()),
                              () :: Constraint))))
                     [LclId, Unf=OtherCon []]
                     $d(%,%)12_a9sA = ($d(%,%)7_a9rF, $d(%,%)11_a9sB) } in
                   let {
                     $dArbitraryAction8_a9q5
                       :: ArbitraryAction
                            '[()] (Output Bool) '[State Int, Input Int, Output Bool, Trace]
                     [LclId]
                     $dArbitraryAction8_a9q5
                       = Polysemy.Check.Arbitrary.$fArbitraryAction:er
                           @ '[]
                           @ (Output Bool)
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ ()
                           (Polysemy.Check.Arbitrary.$fArbitraryAction[]er
                              @ (Output Bool) @ '[State Int, Input Int, Output Bool, Trace])
                           ghc-prim-0.5.3:GHC.Classes.$fEq()
                           GHC.Show.$fShow()
                           ($d(%,%)5_a9qb
                            `cast` ((ghc-prim-0.5.3:GHC.Classes.(%,%)
                                       <Polysemy.Internal.Union.Find
                                          (Output Bool)
                                          '[State Int, Input Int, Output Bool, Trace]>_N
                                       ((~)
                                          <()>_N
                                          (Sym (Polysemy.Internal.Union.D:R:LocateEffect[1]
                                                    <(* -> *) -> * -> *>_N
                                                    <Output Bool>_N
                                                    <'[Trace]>_N) ; (Sym (Polysemy.Internal.Union.D:R:LocateEffect[2]
                                                                              <(* -> *) -> * -> *>_N
                                                                              <Output Bool>_N
                                                                              <Input Int>_N
                                                                              <'[Output Bool,
                                                                                 Trace]>_N) ; Sym (Polysemy.Internal.Union.D:R:LocateEffect[2]
                                                                                                       <(*
                                                                                                         -> *)
                                                                                                        -> *
                                                                                                        -> *>_N
                                                                                                       <Output
                                                                                                          Bool>_N
                                                                                                       <State
                                                                                                          Int>_N
                                                                                                       <'[Input
                                                                                                            Int,
                                                                                                          Output
                                                                                                            Bool,
                                                                                                          Trace]>_N)))
                                          <'()>_N)_N)_R
                                    :: (Polysemy.Internal.Union.Find
                                          (Output Bool) '[State Int, Input Int, Output Bool, Trace],
                                        '() ~ '())
                                       ~R# (Polysemy.Internal.Union.Find
                                              (Output Bool)
                                              '[State Int, Input Int, Output Bool, Trace],
                                            Polysemy.Internal.Union.LocateEffect
                                              (Output Bool)
                                              '[State Int, Input Int, Output Bool, Trace]
                                            ~ '())))
                           $dShow7_a9q8
                           (Polysemy.Check.Orphans.$fGenericK->Output0 @ (* -> *) @ Bool)
                           Test.QuickCheck.Arbitrary.$fCoArbitrary()
                           ($dGArbitraryK59_a9qp
                            `cast` ((GArbitraryK
                                       <Output Bool>_N
                                       (Sym (Polysemy.Check.Orphans.D:R:RepK->Output0[0]
                                                 <* -> *>_N <Bool>_N))
                                       <'[State Int, Input Int, Output Bool, Trace]>_N
                                       <()>_N)_R
                                    :: GArbitraryK
                                         (Output Bool)
                                         (GHC.Generics.D1
                                            ('GHC.Generics.MetaData
                                               "Output"
                                               "Polysemy.Output"
                                               "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                                               'False)
                                            (GHC.Generics.C1
                                               ('GHC.Generics.MetaCons
                                                  "Output" 'GHC.Generics.PrefixI 'False)
                                               ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                                                  'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                ())
                                                Generics.Kind.:=>: GHC.Generics.S1
                                                                     ('GHC.Generics.MetaSel
                                                                        'Nothing
                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                        'GHC.Generics.NoSourceStrictness
                                                                        'GHC.Generics.DecidedLazy)
                                                                     (Generics.Kind.Field
                                                                        ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                           Bool)))))
                                         '[State Int, Input Int, Output Bool, Trace]
                                         ()
                                       ~R# GArbitraryK
                                             (Output Bool)
                                             (Generics.Kind.RepK (Output Bool))
                                             '[State Int, Input Int, Output Bool, Trace]
                                             ())) } in
                   let {
                     $dArbitraryAction9_a9rv
                       :: ArbitraryAction
                            '[()] (State Int) '[State Int, Input Int, Output Bool, Trace]
                     [LclId]
                     $dArbitraryAction9_a9rv
                       = Polysemy.Check.Arbitrary.$fArbitraryAction:er
                           @ '[]
                           @ (State Int)
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ ()
                           (Polysemy.Check.Arbitrary.$fArbitraryAction[]er
                              @ (State Int) @ '[State Int, Input Int, Output Bool, Trace])
                           ghc-prim-0.5.3:GHC.Classes.$fEq()
                           GHC.Show.$fShow()
                           ($d(%,%)7_a9rF
                            `cast` ((ghc-prim-0.5.3:GHC.Classes.(%,%)
                                       <Polysemy.Internal.Union.Find
                                          (State Int) '[State Int, Input Int, Output Bool, Trace]>_N
                                       ((~)
                                          <()>_N
                                          (Sym (Polysemy.Internal.Union.D:R:LocateEffect[1]
                                                    <(* -> *) -> * -> *>_N
                                                    <State Int>_N
                                                    <'[Input Int, Output Bool, Trace]>_N))
                                          <'()>_N)_N)_R
                                    :: (Polysemy.Internal.Union.Find
                                          (State Int) '[State Int, Input Int, Output Bool, Trace],
                                        '() ~ '())
                                       ~R# (Polysemy.Internal.Union.Find
                                              (State Int)
                                              '[State Int, Input Int, Output Bool, Trace],
                                            Polysemy.Internal.Union.LocateEffect
                                              (State Int)
                                              '[State Int, Input Int, Output Bool, Trace]
                                            ~ '())))
                           $dShow5_a9rC
                           (Polysemy.Check.Orphans.$fGenericK->State0 @ (* -> *) @ Int)
                           Test.QuickCheck.Arbitrary.$fCoArbitrary()
                           ($dGArbitraryK51_a9rQ
                            `cast` ((GArbitraryK
                                       <State Int>_N
                                       (Sym (Polysemy.Check.Orphans.D:R:RepK->State0[0]
                                                 <* -> *>_N <Int>_N))
                                       <'[State Int, Input Int, Output Bool, Trace]>_N
                                       <()>_N)_R
                                    :: GArbitraryK
                                         (State Int)
                                         (GHC.Generics.D1
                                            ('GHC.Generics.MetaData
                                               "State"
                                               "Polysemy.State"
                                               "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                                               'False)
                                            (GHC.Generics.C1
                                               ('GHC.Generics.MetaCons
                                                  "Get" 'GHC.Generics.PrefixI 'False)
                                               (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                   ((~~) Int)
                                                 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                Generics.Kind.:=>: GHC.Generics.U1)
                                             GHC.Generics.:+: GHC.Generics.C1
                                                                ('GHC.Generics.MetaCons
                                                                   "Put"
                                                                   'GHC.Generics.PrefixI
                                                                   'False)
                                                                ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                     (~~)
                                                                   'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                  'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                 ())
                                                                 Generics.Kind.:=>: GHC.Generics.S1
                                                                                      ('GHC.Generics.MetaSel
                                                                                         'Nothing
                                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                                         'GHC.Generics.NoSourceStrictness
                                                                                         'GHC.Generics.DecidedLazy)
                                                                                      (Generics.Kind.Field
                                                                                         ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                            Int)))))
                                         '[State Int, Input Int, Output Bool, Trace]
                                         ()
                                       ~R# GArbitraryK
                                             (State Int)
                                             (Generics.Kind.RepK (State Int))
                                             '[State Int, Input Int, Output Bool, Trace]
                                             ())) } in
                   let {
                     $dArbitraryAction10_a9ru
                       :: ArbitraryAction
                            '[Int, ()] (State Int) '[State Int, Input Int, Output Bool, Trace]
                     [LclId]
                     $dArbitraryAction10_a9ru
                       = Polysemy.Check.Arbitrary.$fArbitraryAction:er
                           @ '[()]
                           @ (State Int)
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ Int
                           $dArbitraryAction9_a9rv
                           ghc-prim-0.5.3:GHC.Classes.$fEqInt
                           GHC.Show.$fShowInt
                           ($d(%,%)7_a9rF
                            `cast` ((ghc-prim-0.5.3:GHC.Classes.(%,%)
                                       <Polysemy.Internal.Union.Find
                                          (State Int) '[State Int, Input Int, Output Bool, Trace]>_N
                                       ((~)
                                          <()>_N
                                          (Sym (Polysemy.Internal.Union.D:R:LocateEffect[1]
                                                    <(* -> *) -> * -> *>_N
                                                    <State Int>_N
                                                    <'[Input Int, Output Bool, Trace]>_N))
                                          <'()>_N)_N)_R
                                    :: (Polysemy.Internal.Union.Find
                                          (State Int) '[State Int, Input Int, Output Bool, Trace],
                                        '() ~ '())
                                       ~R# (Polysemy.Internal.Union.Find
                                              (State Int)
                                              '[State Int, Input Int, Output Bool, Trace],
                                            Polysemy.Internal.Union.LocateEffect
                                              (State Int)
                                              '[State Int, Input Int, Output Bool, Trace]
                                            ~ '())))
                           $dShow6_a9rx
                           (Polysemy.Check.Orphans.$fGenericK->State0 @ (* -> *) @ Int)
                           Test.QuickCheck.Arbitrary.$fCoArbitraryInt
                           ($dGArbitraryK44_a9s5
                            `cast` ((GArbitraryK
                                       <State Int>_N
                                       (Sym (Polysemy.Check.Orphans.D:R:RepK->State0[0]
                                                 <* -> *>_N <Int>_N))
                                       <'[State Int, Input Int, Output Bool, Trace]>_N
                                       <Int>_N)_R
                                    :: GArbitraryK
                                         (State Int)
                                         (GHC.Generics.D1
                                            ('GHC.Generics.MetaData
                                               "State"
                                               "Polysemy.State"
                                               "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                                               'False)
                                            (GHC.Generics.C1
                                               ('GHC.Generics.MetaCons
                                                  "Get" 'GHC.Generics.PrefixI 'False)
                                               (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                   ((~~) Int)
                                                 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                Generics.Kind.:=>: GHC.Generics.U1)
                                             GHC.Generics.:+: GHC.Generics.C1
                                                                ('GHC.Generics.MetaCons
                                                                   "Put"
                                                                   'GHC.Generics.PrefixI
                                                                   'False)
                                                                ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                     (~~)
                                                                   'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                  'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                 ())
                                                                 Generics.Kind.:=>: GHC.Generics.S1
                                                                                      ('GHC.Generics.MetaSel
                                                                                         'Nothing
                                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                                         'GHC.Generics.NoSourceStrictness
                                                                                         'GHC.Generics.DecidedLazy)
                                                                                      (Generics.Kind.Field
                                                                                         ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                            Int)))))
                                         '[State Int, Input Int, Output Bool, Trace]
                                         Int
                                       ~R# GArbitraryK
                                             (State Int)
                                             (Generics.Kind.RepK (State Int))
                                             '[State Int, Input Int, Output Bool, Trace]
                                             Int)) } in
                   let {
                     $dArbitraryAction11_a8U6
                       :: ArbitraryAction
                            '[()] Trace '[State Int, Input Int, Output Bool, Trace]
                     [LclId]
                     $dArbitraryAction11_a8U6
                       = Polysemy.Check.Arbitrary.$fArbitraryAction:er
                           @ '[]
                           @ Trace
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ ()
                           (Polysemy.Check.Arbitrary.$fArbitraryAction[]er
                              @ Trace @ '[State Int, Input Int, Output Bool, Trace])
                           ghc-prim-0.5.3:GHC.Classes.$fEq()
                           GHC.Show.$fShow()
                           ($d(%,%)8_a9o9
                            `cast` ((ghc-prim-0.5.3:GHC.Classes.(%,%)
                                       <Polysemy.Internal.Union.Find
                                          Trace '[State Int, Input Int, Output Bool, Trace]>_N
                                       ((~)
                                          <()>_N
                                          (Sym (Polysemy.Internal.Union.D:R:LocateEffect[1]
                                                    <(* -> *) -> * -> *>_N
                                                    <Trace>_N
                                                    <'[]>_N) ; (Sym (Polysemy.Internal.Union.D:R:LocateEffect[2]
                                                                         <(* -> *) -> * -> *>_N
                                                                         <Trace>_N
                                                                         <Output Bool>_N
                                                                         <'[Trace]>_N) ; (Sym (Polysemy.Internal.Union.D:R:LocateEffect[2]
                                                                                                   <(*
                                                                                                     -> *)
                                                                                                    -> *
                                                                                                    -> *>_N
                                                                                                   <Trace>_N
                                                                                                   <Input
                                                                                                      Int>_N
                                                                                                   <'[Output
                                                                                                        Bool,
                                                                                                      Trace]>_N) ; Sym (Polysemy.Internal.Union.D:R:LocateEffect[2]
                                                                                                                            <(*
                                                                                                                              -> *)
                                                                                                                             -> *
                                                                                                                             -> *>_N
                                                                                                                            <Trace>_N
                                                                                                                            <State
                                                                                                                               Int>_N
                                                                                                                            <'[Input
                                                                                                                                 Int,
                                                                                                                               Output
                                                                                                                                 Bool,
                                                                                                                               Trace]>_N))))
                                          <'()>_N)_N)_R
                                    :: (Polysemy.Internal.Union.Find
                                          Trace '[State Int, Input Int, Output Bool, Trace],
                                        '() ~ '())
                                       ~R# (Polysemy.Internal.Union.Find
                                              Trace '[State Int, Input Int, Output Bool, Trace],
                                            Polysemy.Internal.Union.LocateEffect
                                              Trace '[State Int, Input Int, Output Bool, Trace]
                                            ~ '())))
                           (Polysemy.Check.Orphans.$fShowTrace
                              @ '[State Int, Input Int, Output Bool, Trace] @ ())
                           (Polysemy.Check.Orphans.$fGenericK->Trace @ (* -> *))
                           Test.QuickCheck.Arbitrary.$fCoArbitrary()
                           ($dGArbitraryK64_a9os
                            `cast` ((GArbitraryK
                                       <Trace>_N
                                       (Sym (Polysemy.Check.Orphans.D:R:RepK->Trace[0] <* -> *>_N))
                                       <'[State Int, Input Int, Output Bool, Trace]>_N
                                       <()>_N)_R
                                    :: GArbitraryK
                                         Trace
                                         (GHC.Generics.D1
                                            ('GHC.Generics.MetaData
                                               "Trace"
                                               "Polysemy.Trace"
                                               "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                                               'False)
                                            (GHC.Generics.C1
                                               ('GHC.Generics.MetaCons
                                                  "Trace" 'GHC.Generics.PrefixI 'False)
                                               ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon (~~)
                                                  'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                ())
                                                Generics.Kind.:=>: GHC.Generics.S1
                                                                     ('GHC.Generics.MetaSel
                                                                        'Nothing
                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                        'GHC.Generics.NoSourceStrictness
                                                                        'GHC.Generics.DecidedLazy)
                                                                     (Generics.Kind.Field
                                                                        ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                           [Char])))))
                                         '[State Int, Input Int, Output Bool, Trace]
                                         ()
                                       ~R# GArbitraryK
                                             Trace
                                             (Generics.Kind.RepK Trace)
                                             '[State Int, Input Int, Output Bool, Trace]
                                             ())) } in
                   let {
                     $dArbitraryEff7_a8Na
                       :: ArbitraryEff
                            '[State Int] '[State Int, Input Int, Output Bool, Trace]
                     [LclId]
                     $dArbitraryEff7_a8Na
                       = Polysemy.Check.Arbitrary.$fArbitraryEff:r
                           @ '[]
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ (State Int)
                           (Polysemy.Check.Arbitrary.$fArbitraryEff[]r
                              @ '[State Int, Input Int, Output Bool, Trace])
                           ($dArbitraryAction10_a9ru
                            `cast` ((ArbitraryAction
                                       (((':)
                                           <*>_N
                                           <Int>_N
                                           (Sym (Polysemy.Internal.Kind.D:R:Append[1]
                                                     <*>_N
                                                     <'[()]>_N)))_N ; (Sym (Polysemy.Internal.Kind.D:R:Append[0]
                                                                                <*>_N
                                                                                <Int>_N
                                                                                <'[]>_N
                                                                                <'[()]>_N) ; ((Polysemy.Internal.Kind.Append
                                                                                                 <*>_N
                                                                                                 (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[3]
                                                                                                           <Int>_N
                                                                                                           <GHC.Generics.U1>_N) ; Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                                                                                                           <GHC.Generics.C>_N
                                                                                                                                           <'GHC.Generics.MetaCons
                                                                                                                                              "Get"
                                                                                                                                              'GHC.Generics.PrefixI
                                                                                                                                              'False>_N
                                                                                                                                           <('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                               ((~~)
                                                                                                                                                  Int)
                                                                                                                                             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                                            Generics.Kind.:=>: GHC.Generics.U1>_N))
                                                                                                 (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[2]
                                                                                                           <()>_N
                                                                                                           <GHC.Generics.M1
                                                                                                              GHC.Generics.S
                                                                                                              ('GHC.Generics.MetaSel
                                                                                                                 'Nothing
                                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                                 'GHC.Generics.DecidedLazy)
                                                                                                              (Generics.Kind.Field
                                                                                                                 ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                    Int))>_N) ; Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                                                                                                         <GHC.Generics.C>_N
                                                                                                                                         <'GHC.Generics.MetaCons
                                                                                                                                            "Put"
                                                                                                                                            'GHC.Generics.PrefixI
                                                                                                                                            'False>_N
                                                                                                                                         <(('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                              (~~)
                                                                                                                                            'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                                           'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                          ())
                                                                                                                                          Generics.Kind.:=>: GHC.Generics.S1
                                                                                                                                                               ('GHC.Generics.MetaSel
                                                                                                                                                                  'Nothing
                                                                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                                                                               (Generics.Kind.Field
                                                                                                                                                                  ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                     Int))>_N)))_N ; (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[1]
                                                                                                                                                                                               <GHC.Generics.M1
                                                                                                                                                                                                  GHC.Generics.C
                                                                                                                                                                                                  ('GHC.Generics.MetaCons
                                                                                                                                                                                                     "Get"
                                                                                                                                                                                                     'GHC.Generics.PrefixI
                                                                                                                                                                                                     'False)
                                                                                                                                                                                                  (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                      ((~~)
                                                                                                                                                                                                         Int)
                                                                                                                                                                                                    'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                                                                                                   Generics.Kind.:=>: GHC.Generics.U1)>_N
                                                                                                                                                                                               <GHC.Generics.M1
                                                                                                                                                                                                  GHC.Generics.C
                                                                                                                                                                                                  ('GHC.Generics.MetaCons
                                                                                                                                                                                                     "Put"
                                                                                                                                                                                                     'GHC.Generics.PrefixI
                                                                                                                                                                                                     'False)
                                                                                                                                                                                                  ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                       (~~)
                                                                                                                                                                                                     'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                                                                                                    'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                                                                   ())
                                                                                                                                                                                                   Generics.Kind.:=>: GHC.Generics.S1
                                                                                                                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                                                                                                                           'Nothing
                                                                                                                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                        (Generics.Kind.Field
                                                                                                                                                                                                                           ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                                              Int)))>_N) ; (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                                                                                                                                                                                                                     <GHC.Generics.D>_N
                                                                                                                                                                                                                                                     <'GHC.Generics.MetaData
                                                                                                                                                                                                                                                        "State"
                                                                                                                                                                                                                                                        "Polysemy.State"
                                                                                                                                                                                                                                                        "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                                                                                                                                                                                                                                                        'False>_N
                                                                                                                                                                                                                                                     <GHC.Generics.C1
                                                                                                                                                                                                                                                        ('GHC.Generics.MetaCons
                                                                                                                                                                                                                                                           "Get"
                                                                                                                                                                                                                                                           'GHC.Generics.PrefixI
                                                                                                                                                                                                                                                           'False)
                                                                                                                                                                                                                                                        (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                                                                            ((~~)
                                                                                                                                                                                                                                                               Int)
                                                                                                                                                                                                                                                          'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                                                                                                                                                         Generics.Kind.:=>: GHC.Generics.U1)
                                                                                                                                                                                                                                                      GHC.Generics.:+: GHC.Generics.C1
                                                                                                                                                                                                                                                                         ('GHC.Generics.MetaCons
                                                                                                                                                                                                                                                                            "Put"
                                                                                                                                                                                                                                                                            'GHC.Generics.PrefixI
                                                                                                                                                                                                                                                                            'False)
                                                                                                                                                                                                                                                                         ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                                                                                              (~~)
                                                                                                                                                                                                                                                                            'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                                                                                                                                                                           'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                                                                                                                                          ())
                                                                                                                                                                                                                                                                          Generics.Kind.:=>: GHC.Generics.S1
                                                                                                                                                                                                                                                                                               ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                                                                  'Nothing
                                                                                                                                                                                                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                                                               (Generics.Kind.Field
                                                                                                                                                                                                                                                                                                  ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                                                                                                                     Int)))>_N) ; (Polysemy.Check.Arbitrary.GTypesOf
                                                                                                                                                                                                                                                                                                                     (Sym (Polysemy.Check.Orphans.D:R:RepK->State0[0]
                                                                                                                                                                                                                                                                                                                               <*
                                                                                                                                                                                                                                                                                                                                -> *>_N
                                                                                                                                                                                                                                                                                                                               <Int>_N)))_N)))))
                                       <State Int>_N
                                       <'[State Int, Input Int, Output Bool, Trace]>_N)_R
                                    :: ArbitraryAction
                                         '[Int, ()]
                                         (State Int)
                                         '[State Int, Input Int, Output Bool, Trace]
                                       ~R# ArbitraryAction
                                             (Polysemy.Check.Arbitrary.GTypesOf
                                                (Generics.Kind.RepK (State Int)))
                                             (State Int)
                                             '[State Int, Input Int, Output Bool, Trace])) } in
                   let {
                     $dArbitraryEff8_a9sd
                       :: ArbitraryEff
                            '[Input Int] '[State Int, Input Int, Output Bool, Trace]
                     [LclId]
                     $dArbitraryEff8_a9sd
                       = Polysemy.Check.Arbitrary.$fArbitraryEff:r
                           @ '[]
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ (Input Int)
                           (Polysemy.Check.Arbitrary.$fArbitraryEff[]r
                              @ '[State Int, Input Int, Output Bool, Trace])
                           ($dArbitraryAction7_a9qI
                            `cast` ((ArbitraryAction
                                       (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[3]
                                                 <Int>_N
                                                 <GHC.Generics.U1>_N) ; (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                                                  <GHC.Generics.C>_N
                                                                                  <'GHC.Generics.MetaCons
                                                                                     "Input"
                                                                                     'GHC.Generics.PrefixI
                                                                                     'False>_N
                                                                                  <('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                      ((~~) Int)
                                                                                    'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                   Generics.Kind.:=>: GHC.Generics.U1>_N) ; (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                                                                                                      <GHC.Generics.D>_N
                                                                                                                                      <'GHC.Generics.MetaData
                                                                                                                                         "Input"
                                                                                                                                         "Polysemy.Input"
                                                                                                                                         "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                                                                                                                                         'False>_N
                                                                                                                                      <GHC.Generics.M1
                                                                                                                                         GHC.Generics.C
                                                                                                                                         ('GHC.Generics.MetaCons
                                                                                                                                            "Input"
                                                                                                                                            'GHC.Generics.PrefixI
                                                                                                                                            'False)
                                                                                                                                         (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                             ((~~)
                                                                                                                                                Int)
                                                                                                                                           'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                                          Generics.Kind.:=>: GHC.Generics.U1)>_N) ; (Polysemy.Check.Arbitrary.GTypesOf
                                                                                                                                                                                       (Sym (Polysemy.Check.Orphans.D:R:RepK->Input0[0]
                                                                                                                                                                                                 <*>_N
                                                                                                                                                                                                 <*
                                                                                                                                                                                                  -> *>_N
                                                                                                                                                                                                 <Int>_N)))_N)))
                                       <Input Int>_N
                                       <'[State Int, Input Int, Output Bool, Trace]>_N)_R
                                    :: ArbitraryAction
                                         '[Int]
                                         (Input Int)
                                         '[State Int, Input Int, Output Bool, Trace]
                                       ~R# ArbitraryAction
                                             (Polysemy.Check.Arbitrary.GTypesOf
                                                (Generics.Kind.RepK (Input Int)))
                                             (Input Int)
                                             '[State Int, Input Int, Output Bool, Trace])) } in
                   let {
                     $dArbitraryEff9_a9sg
                       :: ArbitraryEff
                            '[Output Bool] '[State Int, Input Int, Output Bool, Trace]
                     [LclId]
                     $dArbitraryEff9_a9sg
                       = Polysemy.Check.Arbitrary.$fArbitraryEff:r
                           @ '[]
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ (Output Bool)
                           (Polysemy.Check.Arbitrary.$fArbitraryEff[]r
                              @ '[State Int, Input Int, Output Bool, Trace])
                           ($dArbitraryAction8_a9q5
                            `cast` ((ArbitraryAction
                                       (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[2]
                                                 <()>_N
                                                 <GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (Generics.Kind.Field
                                                       ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                          Bool))>_N) ; (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                                                 <GHC.Generics.C>_N
                                                                                 <'GHC.Generics.MetaCons
                                                                                    "Output"
                                                                                    'GHC.Generics.PrefixI
                                                                                    'False>_N
                                                                                 <(('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                      (~~)
                                                                                    'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                   'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                  ())
                                                                                  Generics.Kind.:=>: GHC.Generics.S1
                                                                                                       ('GHC.Generics.MetaSel
                                                                                                          'Nothing
                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                       (Generics.Kind.Field
                                                                                                          ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                             Bool))>_N) ; (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                                                                                                    <GHC.Generics.D>_N
                                                                                                                                    <'GHC.Generics.MetaData
                                                                                                                                       "Output"
                                                                                                                                       "Polysemy.Output"
                                                                                                                                       "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                                                                                                                                       'False>_N
                                                                                                                                    <GHC.Generics.M1
                                                                                                                                       GHC.Generics.C
                                                                                                                                       ('GHC.Generics.MetaCons
                                                                                                                                          "Output"
                                                                                                                                          'GHC.Generics.PrefixI
                                                                                                                                          'False)
                                                                                                                                       ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                            (~~)
                                                                                                                                          'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                                         'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                        ())
                                                                                                                                        Generics.Kind.:=>: GHC.Generics.S1
                                                                                                                                                             ('GHC.Generics.MetaSel
                                                                                                                                                                'Nothing
                                                                                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                                                                                'GHC.Generics.DecidedLazy)
                                                                                                                                                             (Generics.Kind.Field
                                                                                                                                                                ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                   Bool)))>_N) ; (Polysemy.Check.Arbitrary.GTypesOf
                                                                                                                                                                                    (Sym (Polysemy.Check.Orphans.D:R:RepK->Output0[0]
                                                                                                                                                                                              <*
                                                                                                                                                                                               -> *>_N
                                                                                                                                                                                              <Bool>_N)))_N)))
                                       <Output Bool>_N
                                       <'[State Int, Input Int, Output Bool, Trace]>_N)_R
                                    :: ArbitraryAction
                                         '[()]
                                         (Output Bool)
                                         '[State Int, Input Int, Output Bool, Trace]
                                       ~R# ArbitraryAction
                                             (Polysemy.Check.Arbitrary.GTypesOf
                                                (Generics.Kind.RepK (Output Bool)))
                                             (Output Bool)
                                             '[State Int, Input Int, Output Bool, Trace])) } in
                   let {
                     $dArbitraryEff10_a8Nr
                       :: ArbitraryEff
                            '[Trace] '[State Int, Input Int, Output Bool, Trace]
                     [LclId]
                     $dArbitraryEff10_a8Nr
                       = Polysemy.Check.Arbitrary.$fArbitraryEff:r
                           @ '[]
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ Trace
                           (Polysemy.Check.Arbitrary.$fArbitraryEff[]r
                              @ '[State Int, Input Int, Output Bool, Trace])
                           ($dArbitraryAction11_a8U6
                            `cast` ((ArbitraryAction
                                       (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[2]
                                                 <()>_N
                                                 <GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (Generics.Kind.Field
                                                       ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                          [Char]))>_N) ; (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                                                   <GHC.Generics.C>_N
                                                                                   <'GHC.Generics.MetaCons
                                                                                      "Trace"
                                                                                      'GHC.Generics.PrefixI
                                                                                      'False>_N
                                                                                   <(('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                        (~~)
                                                                                      'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                     'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                    ())
                                                                                    Generics.Kind.:=>: GHC.Generics.S1
                                                                                                         ('GHC.Generics.MetaSel
                                                                                                            'Nothing
                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                         (Generics.Kind.Field
                                                                                                            ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                               [Char]))>_N) ; (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                                                                                                        <GHC.Generics.D>_N
                                                                                                                                        <'GHC.Generics.MetaData
                                                                                                                                           "Trace"
                                                                                                                                           "Polysemy.Trace"
                                                                                                                                           "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                                                                                                                                           'False>_N
                                                                                                                                        <GHC.Generics.M1
                                                                                                                                           GHC.Generics.C
                                                                                                                                           ('GHC.Generics.MetaCons
                                                                                                                                              "Trace"
                                                                                                                                              'GHC.Generics.PrefixI
                                                                                                                                              'False)
                                                                                                                                           ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                (~~)
                                                                                                                                              'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                                             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                            ())
                                                                                                                                            Generics.Kind.:=>: GHC.Generics.S1
                                                                                                                                                                 ('GHC.Generics.MetaSel
                                                                                                                                                                    'Nothing
                                                                                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                                                                                 (Generics.Kind.Field
                                                                                                                                                                    ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                       [Char])))>_N) ; (Polysemy.Check.Arbitrary.GTypesOf
                                                                                                                                                                                          (Sym (Polysemy.Check.Orphans.D:R:RepK->Trace[0]
                                                                                                                                                                                                    <*
                                                                                                                                                                                                     -> *>_N)))_N)))
                                       <Trace>_N
                                       <'[State Int, Input Int, Output Bool, Trace]>_N)_R
                                    :: ArbitraryAction
                                         '[()] Trace '[State Int, Input Int, Output Bool, Trace]
                                       ~R# ArbitraryAction
                                             (Polysemy.Check.Arbitrary.GTypesOf
                                                (Generics.Kind.RepK Trace))
                                             Trace
                                             '[State Int, Input Int, Output Bool, Trace])) } in
                   let {
                     $dArbitraryEff11_a8Np
                       :: ArbitraryEff
                            '[Output Bool, Trace] '[State Int, Input Int, Output Bool, Trace]
                     [LclId]
                     $dArbitraryEff11_a8Np
                       = Polysemy.Check.Arbitrary.$fArbitraryEff:r
                           @ '[Trace]
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ (Output Bool)
                           $dArbitraryEff10_a8Nr
                           ($dArbitraryAction8_a9q5
                            `cast` ((ArbitraryAction
                                       (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[2]
                                                 <()>_N
                                                 <GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (Generics.Kind.Field
                                                       ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                          Bool))>_N) ; (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                                                 <GHC.Generics.C>_N
                                                                                 <'GHC.Generics.MetaCons
                                                                                    "Output"
                                                                                    'GHC.Generics.PrefixI
                                                                                    'False>_N
                                                                                 <(('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                      (~~)
                                                                                    'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                   'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                  ())
                                                                                  Generics.Kind.:=>: GHC.Generics.S1
                                                                                                       ('GHC.Generics.MetaSel
                                                                                                          'Nothing
                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                       (Generics.Kind.Field
                                                                                                          ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                             Bool))>_N) ; (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                                                                                                    <GHC.Generics.D>_N
                                                                                                                                    <'GHC.Generics.MetaData
                                                                                                                                       "Output"
                                                                                                                                       "Polysemy.Output"
                                                                                                                                       "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                                                                                                                                       'False>_N
                                                                                                                                    <GHC.Generics.M1
                                                                                                                                       GHC.Generics.C
                                                                                                                                       ('GHC.Generics.MetaCons
                                                                                                                                          "Output"
                                                                                                                                          'GHC.Generics.PrefixI
                                                                                                                                          'False)
                                                                                                                                       ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                            (~~)
                                                                                                                                          'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                                         'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                        ())
                                                                                                                                        Generics.Kind.:=>: GHC.Generics.S1
                                                                                                                                                             ('GHC.Generics.MetaSel
                                                                                                                                                                'Nothing
                                                                                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                                                                                'GHC.Generics.DecidedLazy)
                                                                                                                                                             (Generics.Kind.Field
                                                                                                                                                                ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                   Bool)))>_N) ; (Polysemy.Check.Arbitrary.GTypesOf
                                                                                                                                                                                    (Sym (Polysemy.Check.Orphans.D:R:RepK->Output0[0]
                                                                                                                                                                                              <*
                                                                                                                                                                                               -> *>_N
                                                                                                                                                                                              <Bool>_N)))_N)))
                                       <Output Bool>_N
                                       <'[State Int, Input Int, Output Bool, Trace]>_N)_R
                                    :: ArbitraryAction
                                         '[()]
                                         (Output Bool)
                                         '[State Int, Input Int, Output Bool, Trace]
                                       ~R# ArbitraryAction
                                             (Polysemy.Check.Arbitrary.GTypesOf
                                                (Generics.Kind.RepK (Output Bool)))
                                             (Output Bool)
                                             '[State Int, Input Int, Output Bool, Trace])) } in
                   let {
                     $dArbitraryEff12_a8Nl
                       :: ArbitraryEff
                            '[Input Int, Output Bool, Trace]
                            '[State Int, Input Int, Output Bool, Trace]
                     [LclId]
                     $dArbitraryEff12_a8Nl
                       = Polysemy.Check.Arbitrary.$fArbitraryEff:r
                           @ '[Output Bool, Trace]
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ (Input Int)
                           $dArbitraryEff11_a8Np
                           ($dArbitraryAction7_a9qI
                            `cast` ((ArbitraryAction
                                       (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[3]
                                                 <Int>_N
                                                 <GHC.Generics.U1>_N) ; (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                                                  <GHC.Generics.C>_N
                                                                                  <'GHC.Generics.MetaCons
                                                                                     "Input"
                                                                                     'GHC.Generics.PrefixI
                                                                                     'False>_N
                                                                                  <('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                      ((~~) Int)
                                                                                    'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                   Generics.Kind.:=>: GHC.Generics.U1>_N) ; (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                                                                                                      <GHC.Generics.D>_N
                                                                                                                                      <'GHC.Generics.MetaData
                                                                                                                                         "Input"
                                                                                                                                         "Polysemy.Input"
                                                                                                                                         "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                                                                                                                                         'False>_N
                                                                                                                                      <GHC.Generics.M1
                                                                                                                                         GHC.Generics.C
                                                                                                                                         ('GHC.Generics.MetaCons
                                                                                                                                            "Input"
                                                                                                                                            'GHC.Generics.PrefixI
                                                                                                                                            'False)
                                                                                                                                         (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                             ((~~)
                                                                                                                                                Int)
                                                                                                                                           'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                                          Generics.Kind.:=>: GHC.Generics.U1)>_N) ; (Polysemy.Check.Arbitrary.GTypesOf
                                                                                                                                                                                       (Sym (Polysemy.Check.Orphans.D:R:RepK->Input0[0]
                                                                                                                                                                                                 <*>_N
                                                                                                                                                                                                 <*
                                                                                                                                                                                                  -> *>_N
                                                                                                                                                                                                 <Int>_N)))_N)))
                                       <Input Int>_N
                                       <'[State Int, Input Int, Output Bool, Trace]>_N)_R
                                    :: ArbitraryAction
                                         '[Int]
                                         (Input Int)
                                         '[State Int, Input Int, Output Bool, Trace]
                                       ~R# ArbitraryAction
                                             (Polysemy.Check.Arbitrary.GTypesOf
                                                (Generics.Kind.RepK (Input Int)))
                                             (Input Int)
                                             '[State Int, Input Int, Output Bool, Trace])) } in
                   let {
                     $dArbitraryEff13_a8N8
                       :: ArbitraryEff
                            '[State Int, Input Int, Output Bool, Trace]
                            '[State Int, Input Int, Output Bool, Trace]
                     [LclId]
                     $dArbitraryEff13_a8N8
                       = Polysemy.Check.Arbitrary.$fArbitraryEff:r
                           @ '[Input Int, Output Bool, Trace]
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ (State Int)
                           $dArbitraryEff12_a8Nl
                           ($dArbitraryAction10_a9ru
                            `cast` ((ArbitraryAction
                                       (((':)
                                           <*>_N
                                           <Int>_N
                                           (Sym (Polysemy.Internal.Kind.D:R:Append[1]
                                                     <*>_N
                                                     <'[()]>_N)))_N ; (Sym (Polysemy.Internal.Kind.D:R:Append[0]
                                                                                <*>_N
                                                                                <Int>_N
                                                                                <'[]>_N
                                                                                <'[()]>_N) ; ((Polysemy.Internal.Kind.Append
                                                                                                 <*>_N
                                                                                                 (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[3]
                                                                                                           <Int>_N
                                                                                                           <GHC.Generics.U1>_N) ; Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                                                                                                           <GHC.Generics.C>_N
                                                                                                                                           <'GHC.Generics.MetaCons
                                                                                                                                              "Get"
                                                                                                                                              'GHC.Generics.PrefixI
                                                                                                                                              'False>_N
                                                                                                                                           <('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                               ((~~)
                                                                                                                                                  Int)
                                                                                                                                             'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                                            Generics.Kind.:=>: GHC.Generics.U1>_N))
                                                                                                 (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[2]
                                                                                                           <()>_N
                                                                                                           <GHC.Generics.M1
                                                                                                              GHC.Generics.S
                                                                                                              ('GHC.Generics.MetaSel
                                                                                                                 'Nothing
                                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                                 'GHC.Generics.DecidedLazy)
                                                                                                              (Generics.Kind.Field
                                                                                                                 ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                    Int))>_N) ; Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                                                                                                         <GHC.Generics.C>_N
                                                                                                                                         <'GHC.Generics.MetaCons
                                                                                                                                            "Put"
                                                                                                                                            'GHC.Generics.PrefixI
                                                                                                                                            'False>_N
                                                                                                                                         <(('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                              (~~)
                                                                                                                                            'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                                           'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                          ())
                                                                                                                                          Generics.Kind.:=>: GHC.Generics.S1
                                                                                                                                                               ('GHC.Generics.MetaSel
                                                                                                                                                                  'Nothing
                                                                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                                                                               (Generics.Kind.Field
                                                                                                                                                                  ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                     Int))>_N)))_N ; (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[1]
                                                                                                                                                                                               <GHC.Generics.M1
                                                                                                                                                                                                  GHC.Generics.C
                                                                                                                                                                                                  ('GHC.Generics.MetaCons
                                                                                                                                                                                                     "Get"
                                                                                                                                                                                                     'GHC.Generics.PrefixI
                                                                                                                                                                                                     'False)
                                                                                                                                                                                                  (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                      ((~~)
                                                                                                                                                                                                         Int)
                                                                                                                                                                                                    'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                                                                                                   Generics.Kind.:=>: GHC.Generics.U1)>_N
                                                                                                                                                                                               <GHC.Generics.M1
                                                                                                                                                                                                  GHC.Generics.C
                                                                                                                                                                                                  ('GHC.Generics.MetaCons
                                                                                                                                                                                                     "Put"
                                                                                                                                                                                                     'GHC.Generics.PrefixI
                                                                                                                                                                                                     'False)
                                                                                                                                                                                                  ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                       (~~)
                                                                                                                                                                                                     'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                                                                                                    'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                                                                   ())
                                                                                                                                                                                                   Generics.Kind.:=>: GHC.Generics.S1
                                                                                                                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                                                                                                                           'Nothing
                                                                                                                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                        (Generics.Kind.Field
                                                                                                                                                                                                                           ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                                              Int)))>_N) ; (Sym (Polysemy.Check.Arbitrary.D:R:GTypesOf[0]
                                                                                                                                                                                                                                                     <GHC.Generics.D>_N
                                                                                                                                                                                                                                                     <'GHC.Generics.MetaData
                                                                                                                                                                                                                                                        "State"
                                                                                                                                                                                                                                                        "Polysemy.State"
                                                                                                                                                                                                                                                        "polysemy-1.6.0.0-H9lMWZVCgmPEDMyTqgKzhb"
                                                                                                                                                                                                                                                        'False>_N
                                                                                                                                                                                                                                                     <GHC.Generics.C1
                                                                                                                                                                                                                                                        ('GHC.Generics.MetaCons
                                                                                                                                                                                                                                                           "Get"
                                                                                                                                                                                                                                                           'GHC.Generics.PrefixI
                                                                                                                                                                                                                                                           'False)
                                                                                                                                                                                                                                                        (('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                                                                            ((~~)
                                                                                                                                                                                                                                                               Int)
                                                                                                                                                                                                                                                          'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                                                                                                                                                         Generics.Kind.:=>: GHC.Generics.U1)
                                                                                                                                                                                                                                                      GHC.Generics.:+: GHC.Generics.C1
                                                                                                                                                                                                                                                                         ('GHC.Generics.MetaCons
                                                                                                                                                                                                                                                                            "Put"
                                                                                                                                                                                                                                                                            'GHC.Generics.PrefixI
                                                                                                                                                                                                                                                                            'False)
                                                                                                                                                                                                                                                                         ((('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                                                                                              (~~)
                                                                                                                                                                                                                                                                            'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: kind-apply-0.3.2.0:Data.PolyKinded.Atom.Var1)
                                                                                                                                                                                                                                                                           'kind-apply-0.3.2.0:Data.PolyKinded.Atom.:@: 'kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                                                                                                                                          ())
                                                                                                                                                                                                                                                                          Generics.Kind.:=>: GHC.Generics.S1
                                                                                                                                                                                                                                                                                               ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                                                                  'Nothing
                                                                                                                                                                                                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                                                               (Generics.Kind.Field
                                                                                                                                                                                                                                                                                                  ('kind-apply-0.3.2.0:Data.PolyKinded.Atom.Kon
                                                                                                                                                                                                                                                                                                     Int)))>_N) ; (Polysemy.Check.Arbitrary.GTypesOf
                                                                                                                                                                                                                                                                                                                     (Sym (Polysemy.Check.Orphans.D:R:RepK->State0[0]
                                                                                                                                                                                                                                                                                                                               <*
                                                                                                                                                                                                                                                                                                                                -> *>_N
                                                                                                                                                                                                                                                                                                                               <Int>_N)))_N)))))
                                       <State Int>_N
                                       <'[State Int, Input Int, Output Bool, Trace]>_N)_R
                                    :: ArbitraryAction
                                         '[Int, ()]
                                         (State Int)
                                         '[State Int, Input Int, Output Bool, Trace]
                                       ~R# ArbitraryAction
                                             (Polysemy.Check.Arbitrary.GTypesOf
                                                (Generics.Kind.RepK (State Int)))
                                             (State Int)
                                             '[State Int, Input Int, Output Bool, Trace])) } in
                   let {
                     $dAllCommutative_a9se
                       :: Polysemy.Check.AllCommutative
                            '[Output Bool, Trace] '[State Int, Input Int, Output Bool, Trace]
                     [LclId]
                     $dAllCommutative_a9se
                       = Polysemy.Check.$fAllCommutative:r
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ '[Trace]
                           @ (Output Bool)
                           $dArbitraryEff13_a8N8
                           $dArbitraryEff10_a8Nr
                           $dArbitraryEff9_a9sg
                           (Polysemy.Check.$fAllCommutative:r0
                              @ Trace @ '[State Int, Input Int, Output Bool, Trace]) } in
                   let {
                     $dAllCommutative1_a8Nb
                       :: Polysemy.Check.AllCommutative
                            '[Input Int, Output Bool, Trace]
                            '[State Int, Input Int, Output Bool, Trace]
                     [LclId]
                     $dAllCommutative1_a8Nb
                       = Polysemy.Check.$fAllCommutative:r
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ '[Output Bool, Trace]
                           @ (Input Int)
                           $dArbitraryEff13_a8N8
                           $dArbitraryEff11_a8Np
                           $dArbitraryEff8_a9sd
                           $dAllCommutative_a9se } in
                   let {
                     $dAllCommutative2_a8LS
                       :: Polysemy.Check.AllCommutative BigEffs BigEffs
                     [LclId]
                     $dAllCommutative2_a8LS
                       = Polysemy.Check.$fAllCommutative:r
                           @ '[State Int, Input Int, Output Bool, Trace]
                           @ '[Input Int, Output Bool, Trace]
                           @ (State Int)
                           $dArbitraryEff13_a8N8
                           $dArbitraryEff12_a8Nl
                           $dArbitraryEff7_a8Na
                           $dAllCommutative1_a8Nb } in
                   break<29>()
                   $ @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
                     @ (forall a.
                        Sem BigEffs a
                        -> IO (Compose (Compose ((,) [String]) ((,) [Bool])) ((,) Int) a))
                     @ [Property]
                     (($dAllCommutative2_a8LS
                       `cast` (Polysemy.Check.N:AllCommutative[0] <BigEffs>_N <BigEffs>_N
                               :: Polysemy.Check.AllCommutative BigEffs BigEffs
                                  ~R# (forall (f :: * -> *).
                                       (forall a. Show a => Show (f a), forall a. Eq a => Eq (f a),
                                        Members BigEffs BigEffs) =>
                                       (forall a. Sem BigEffs a -> IO (f a)) -> [Property])))
                        @ (Compose (Compose ((,) [String]) ((,) [Bool])) ((,) Int))
                        df7_a8LU
                        df6_a8LV
                        ($d(%,%)12_a9sA
                         `cast` ((ghc-prim-0.5.3:GHC.Classes.(%,%)
                                    (ghc-prim-0.5.3:GHC.Classes.(%,%)
                                       <Polysemy.Internal.Union.Find
                                          (State Int) '[State Int, Input Int, Output Bool, Trace]>_N
                                       ((~)
                                          <()>_N
                                          (Sym (Polysemy.Internal.Union.D:R:LocateEffect[1]
                                                    <(* -> *) -> * -> *>_N
                                                    <State Int>_N
                                                    <'[Input Int, Output Bool, Trace]>_N))
                                          <'()>_N)_N)_N
                                    ((ghc-prim-0.5.3:GHC.Classes.(%,%)
                                        (ghc-prim-0.5.3:GHC.Classes.(%,%)
                                           <Polysemy.Internal.Union.Find
                                              (Input Int)
                                              '[State Int, Input Int, Output Bool, Trace]>_N
                                           ((~)
                                              <()>_N
                                              (Sym (Polysemy.Internal.Union.D:R:LocateEffect[1]
                                                        <(* -> *) -> * -> *>_N
                                                        <Input Int>_N
                                                        <'[Output Bool,
                                                           Trace]>_N) ; Sym (Polysemy.Internal.Union.D:R:LocateEffect[2]
                                                                                 <(* -> *)
                                                                                  -> * -> *>_N
                                                                                 <Input Int>_N
                                                                                 <State Int>_N
                                                                                 <'[Input Int,
                                                                                    Output Bool,
                                                                                    Trace]>_N))
                                              <'()>_N)_N)_N
                                        ((ghc-prim-0.5.3:GHC.Classes.(%,%)
                                            (ghc-prim-0.5.3:GHC.Classes.(%,%)
                                               <Polysemy.Internal.Union.Find
                                                  (Output Bool)
                                                  '[State Int, Input Int, Output Bool, Trace]>_N
                                               ((~)
                                                  <()>_N
                                                  (Sym (Polysemy.Internal.Union.D:R:LocateEffect[1]
                                                            <(* -> *) -> * -> *>_N
                                                            <Output Bool>_N
                                                            <'[Trace]>_N) ; (Sym (Polysemy.Internal.Union.D:R:LocateEffect[2]
                                                                                      <(* -> *)
                                                                                       -> * -> *>_N
                                                                                      <Output
                                                                                         Bool>_N
                                                                                      <Input Int>_N
                                                                                      <'[Output
                                                                                           Bool,
                                                                                         Trace]>_N) ; Sym (Polysemy.Internal.Union.D:R:LocateEffect[2]
                                                                                                               <(*
                                                                                                                 -> *)
                                                                                                                -> *
                                                                                                                -> *>_N
                                                                                                               <Output
                                                                                                                  Bool>_N
                                                                                                               <State
                                                                                                                  Int>_N
                                                                                                               <'[Input
                                                                                                                    Int,
                                                                                                                  Output
                                                                                                                    Bool,
                                                                                                                  Trace]>_N)))
                                                  <'()>_N)_N)_N
                                            ((ghc-prim-0.5.3:GHC.Classes.(%,%)
                                                (ghc-prim-0.5.3:GHC.Classes.(%,%)
                                                   <Polysemy.Internal.Union.Find
                                                      Trace
                                                      '[State Int, Input Int, Output Bool, Trace]>_N
                                                   ((~)
                                                      <()>_N
                                                      (Sym (Polysemy.Internal.Union.D:R:LocateEffect[1]
                                                                <(* -> *) -> * -> *>_N
                                                                <Trace>_N
                                                                <'[]>_N) ; (Sym (Polysemy.Internal.Union.D:R:LocateEffect[2]
                                                                                     <(* -> *)
                                                                                      -> * -> *>_N
                                                                                     <Trace>_N
                                                                                     <Output Bool>_N
                                                                                     <'[Trace]>_N) ; (Sym (Polysemy.Internal.Union.D:R:LocateEffect[2]
                                                                                                               <(*
                                                                                                                 -> *)
                                                                                                                -> *
                                                                                                                -> *>_N
                                                                                                               <Trace>_N
                                                                                                               <Input
                                                                                                                  Int>_N
                                                                                                               <'[Output
                                                                                                                    Bool,
                                                                                                                  Trace]>_N) ; Sym (Polysemy.Internal.Union.D:R:LocateEffect[2]
                                                                                                                                        <(*
                                                                                                                                          -> *)
                                                                                                                                         -> *
                                                                                                                                         -> *>_N
                                                                                                                                        <Trace>_N
                                                                                                                                        <State
                                                                                                                                           Int>_N
                                                                                                                                        <'[Input
                                                                                                                                             Int,
                                                                                                                                           Output
                                                                                                                                             Bool,
                                                                                                                                           Trace]>_N))))
                                                      <'()>_N)_N)_N
                                                (Sym (Polysemy.Internal.D:R:Members[0]
                                                          <(* -> *) -> * -> *>_N
                                                          <'[State Int, Input Int, Output Bool,
                                                             Trace]>_N)))_N ; Sym (Polysemy.Internal.D:R:Members[1]
                                                                                       <(* -> *)
                                                                                        -> * -> *>_N
                                                                                       <Trace>_N
                                                                                       <'[]>_N
                                                                                       <'[State Int,
                                                                                          Input Int,
                                                                                          Output
                                                                                            Bool,
                                                                                          Trace]>_N)))_N ; Sym (Polysemy.Internal.D:R:Members[1]
                                                                                                                    <(*
                                                                                                                      -> *)
                                                                                                                     -> *
                                                                                                                     -> *>_N
                                                                                                                    <Output
                                                                                                                       Bool>_N
                                                                                                                    <'[Trace]>_N
                                                                                                                    <'[State
                                                                                                                         Int,
                                                                                                                       Input
                                                                                                                         Int,
                                                                                                                       Output
                                                                                                                         Bool,
                                                                                                                       Trace]>_N)))_N ; Sym (Polysemy.Internal.D:R:Members[1]
                                                                                                                                                 <(*
                                                                                                                                                   -> *)
                                                                                                                                                  -> *
                                                                                                                                                  -> *>_N
                                                                                                                                                 <Input
                                                                                                                                                    Int>_N
                                                                                                                                                 <'[Output
                                                                                                                                                      Bool,
                                                                                                                                                    Trace]>_N
                                                                                                                                                 <'[State
                                                                                                                                                      Int,
                                                                                                                                                    Input
                                                                                                                                                      Int,
                                                                                                                                                    Output
                                                                                                                                                      Bool,
                                                                                                                                                    Trace]>_N)))_R ; Sub (Sym (Polysemy.Internal.D:R:Members[1]
                                                                                                                                                                                   <(*
                                                                                                                                                                                     -> *)
                                                                                                                                                                                    -> *
                                                                                                                                                                                    -> *>_N
                                                                                                                                                                                   <State
                                                                                                                                                                                      Int>_N
                                                                                                                                                                                   <'[Input
                                                                                                                                                                                        Int,
                                                                                                                                                                                      Output
                                                                                                                                                                                        Bool,
                                                                                                                                                                                      Trace]>_N
                                                                                                                                                                                   <'[State
                                                                                                                                                                                        Int,
                                                                                                                                                                                      Input
                                                                                                                                                                                        Int,
                                                                                                                                                                                      Output
                                                                                                                                                                                        Bool,
                                                                                                                                                                                      Trace]>_N))
                                 :: ((Polysemy.Internal.Union.Find
                                        (State Int) '[State Int, Input Int, Output Bool, Trace],
                                      '() ~ '()),
                                     ((Polysemy.Internal.Union.Find
                                         (Input Int) '[State Int, Input Int, Output Bool, Trace],
                                       '() ~ '()),
                                      ((Polysemy.Internal.Union.Find
                                          (Output Bool) '[State Int, Input Int, Output Bool, Trace],
                                        '() ~ '()),
                                       ((Polysemy.Internal.Union.Find
                                           Trace '[State Int, Input Int, Output Bool, Trace],
                                         '() ~ '()),
                                        () :: Constraint))))
                                    ~R# Members
                                          '[State Int, Input Int, Output Bool, Trace]
                                          '[State Int, Input Int, Output Bool, Trace])))
                     (\ (@ a_a8LY) ->
                        . @ (Compose
                               (Compose ((,) [String]) ((,) [Bool])) ((,) Int) a_a8LY)
                          @ (IO
                               (Compose (Compose ((,) [String]) ((,) [Bool])) ((,) Int) a_a8LY))
                          @ (Sem '[State Int, Input Int, Output Bool, Trace] a_a8LY)
                          (pure
                             @ IO
                             GHC.Base.$fApplicativeIO
                             @ (Compose (Compose ((,) [String]) ((,) [Bool])) ((,) Int) a_a8LY))
                          (break<28>()
                           . @ (Compose ((,) [String]) ((,) [Bool]) (Int, a_a8LY))
                             @ (Compose (Compose ((,) [String]) ((,) [Bool])) ((,) Int) a_a8LY)
                             @ (Sem '[State Int, Input Int, Output Bool, Trace] a_a8LY)
                             ((\ (v_B1 :: Compose ((,) [String]) ((,) [Bool]) (Int, a_a8LY)) ->
                                 v_B1)
                              `cast` (<Compose ((,) [String]) ((,) [Bool]) (Int, a_a8LY)>_R
                                      ->_R Sym (Data.Functor.Compose.N:Compose[0]
                                                    <*>_N
                                                    <*>_N
                                                    <Compose ((,) [String]) ((,) [Bool])>_R
                                                    <(,) Int>_N
                                                    <a_a8LY>_N)
                                      :: (Compose ((,) [String]) ((,) [Bool]) (Int, a_a8LY)
                                          -> Compose ((,) [String]) ((,) [Bool]) (Int, a_a8LY))
                                         ~R# (Compose ((,) [String]) ((,) [Bool]) (Int, a_a8LY)
                                              -> Compose
                                                   (Compose ((,) [String]) ((,) [Bool]))
                                                   ((,) Int)
                                                   a_a8LY)))
                             (break<27>()
                              . @ ([String], ([Bool], (Int, a_a8LY)))
                                @ (Compose ((,) [String]) ((,) [Bool]) (Int, a_a8LY))
                                @ (Sem '[State Int, Input Int, Output Bool, Trace] a_a8LY)
                                ((\ (v_B1 :: ([String], ([Bool], (Int, a_a8LY)))) -> v_B1)
                                 `cast` (<([String], ([Bool], (Int, a_a8LY)))>_R
                                         ->_R Sym (Data.Functor.Compose.N:Compose[0]
                                                       <*>_N
                                                       <*>_N
                                                       <(,) [String]>_R
                                                       <(,) [Bool]>_N
                                                       <(Int, a_a8LY)>_N)
                                         :: (([String], ([Bool], (Int, a_a8LY)))
                                             -> ([String], ([Bool], (Int, a_a8LY))))
                                            ~R# (([String], ([Bool], (Int, a_a8LY)))
                                                 -> Compose
                                                      ((,) [String]) ((,) [Bool]) (Int, a_a8LY))))
                                (break<26>()
                                 . @ (Sem '[] ([String], ([Bool], (Int, a_a8LY))))
                                   @ ([String], ([Bool], (Int, a_a8LY)))
                                   @ (Sem '[State Int, Input Int, Output Bool, Trace] a_a8LY)
                                   (run @ ([String], ([Bool], (Int, a_a8LY))))
                                   (break<25>()
                                    . @ (Sem '[Trace] ([Bool], (Int, a_a8LY)))
                                      @ (Sem '[] ([String], ([Bool], (Int, a_a8LY))))
                                      @ (Sem '[State Int, Input Int, Output Bool, Trace] a_a8LY)
                                      (runTraceList @ '[] @ ([Bool], (Int, a_a8LY)))
                                      (break<24>()
                                       . @ (Sem '[Output Bool, Trace] (Int, a_a8LY))
                                         @ (Sem '[Trace] ([Bool], (Int, a_a8LY)))
                                         @ (Sem '[State Int, Input Int, Output Bool, Trace] a_a8LY)
                                         (runOutputList @ Bool @ '[Trace] @ (Int, a_a8LY))
                                         (break<23>()
                                          . @ (Sem '[Input Int, Output Bool, Trace] (Int, a_a8LY))
                                            @ (Sem '[Output Bool, Trace] (Int, a_a8LY))
                                            @ (Sem
                                                 '[State Int, Input Int, Output Bool, Trace] a_a8LY)
                                            (break<21>()
                                             runInputConst
                                               @ Int
                                               @ '[Output Bool, Trace]
                                               @ (Int, a_a8LY)
                                               (ghc-prim-0.5.3:GHC.Types.I# 10#))
                                            (break<22>()
                                             runState
                                               @ Int
                                               @ '[Input Int, Output Bool, Trace]
                                               @ a_a8LY
                                               (ghc-prim-0.5.3:GHC.Types.I# 0#))))))))) } in
             >>
               @ (hspec-core-2.7.6:Test.Hspec.Core.Spec.Monad.SpecM ())
               (hspec-core-2.7.6:Test.Hspec.Core.Spec.Monad.$fMonadSpecM @ ())
               @ ()
               @ ()
               (break<32>(all_commutative_tests_a6Yf)
                $ @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
                  @ Expectation
                  @ (hspec-core-2.7.6:Test.Hspec.Core.Spec.Monad.SpecM () ())
                  ((it
                      @ Expectation
                      ($dIP2_raI5
                       `cast` (Sym (ghc-prim-0.5.3:GHC.Classes.N:IP[0]
                                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                               :: GHC.Stack.Types.CallStack
                                  ~R# (?callStack::GHC.Stack.Types.CallStack)))
                      hspec-core-2.7.6:Test.Hspec.Core.Example.$fExampleIO
                      (ghc-prim-0.5.3:GHC.CString.unpackCString#
                         "should have the right length"#))
                   `cast` (<Expectation>_R
                           ->_R (hspec-core-2.7.6:Test.Hspec.Core.Spec.Monad.SpecM
                                   (hspec-core-2.7.6:Test.Hspec.Core.Example.D:R:ArgIO[0]) <()>_N)_R
                           :: (Expectation
                               -> hspec-core-2.7.6:Test.Hspec.Core.Spec.Monad.SpecM
                                    (Arg Expectation) ())
                              ~R# (Expectation
                                   -> hspec-core-2.7.6:Test.Hspec.Core.Spec.Monad.SpecM () ())))
                  (break<31>(all_commutative_tests_a6Yf)
                   shouldBe
                     @ Int
                     ($dIP1_raI4
                      `cast` (Sym (ghc-prim-0.5.3:GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                              :: GHC.Stack.Types.CallStack
                                 ~R# (?callStack::GHC.Stack.Types.CallStack)))
                     GHC.Show.$fShowInt
                     ghc-prim-0.5.3:GHC.Classes.$fEqInt
                     (break<30>(all_commutative_tests_a6Yf)
                      length
                        @ []
                        Data.Foldable.$fFoldable[]
                        @ Property
                        all_commutative_tests_a6Yf)
                     (ghc-prim-0.5.3:GHC.Types.I# 3#)))
               (break<34>(all_commutative_tests_a6Yf)
                traverse_
                  @ []
                  @ (hspec-core-2.7.6:Test.Hspec.Core.Spec.Monad.SpecM ())
                  @ Property
                  @ ()
                  Data.Foldable.$fFoldable[]
                  (hspec-core-2.7.6:Test.Hspec.Core.Spec.Monad.$fApplicativeSpecM
                     @ ())
                  (break<33>()
                   prop
                     @ Property
                     ($dIP_raI3
                      `cast` (Sym (ghc-prim-0.5.3:GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                              :: GHC.Stack.Types.CallStack
                                 ~R# (?callStack::GHC.Stack.Types.CallStack)))
                     Test.QuickCheck.Property.$fTestableProperty
                     (ghc-prim-0.5.3:GHC.CString.unpackCString#
                        "Big row is commutative"#))
                  all_commutative_tests_a6Yf))))


